// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from stellar_like_wallet.djinni

#include "NJSStellarLikeOperationCpp.hpp"
#include "NJSObjectWrapper.hpp"

using namespace v8;
using namespace node;
using namespace std;

NAN_METHOD(NJSStellarLikeOperation::getRecord) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSStellarLikeOperation::getRecord needs 0 arguments");
    }

    //Check if parameters have correct types

    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::StellarLikeOperation>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSStellarLikeOperation::getRecord : implementation of StellarLikeOperation is not valid");
    }

    auto result = cpp_impl->getRecord();

    //Wrap result in node object
    auto arg_0 = Nan::New<Object>();
    auto arg_0_1 = Nan::New<String>(result.operationHash).ToLocalChecked();
    Nan::DefineOwnProperty(arg_0, Nan::New<String>("operationHash").ToLocalChecked(), arg_0_1);
    auto arg_0_2 = Nan::New<Boolean>(result.successful);
    Nan::DefineOwnProperty(arg_0, Nan::New<String>("successful").ToLocalChecked(), arg_0_2);
    auto arg_0_3 = Nan::New<Integer>((int)result.operationType);
    Nan::DefineOwnProperty(arg_0, Nan::New<String>("operationType").ToLocalChecked(), arg_0_3);
    auto arg_0_4 = Nan::New<String>(result.transactionHash).ToLocalChecked();
    Nan::DefineOwnProperty(arg_0, Nan::New<String>("transactionHash").ToLocalChecked(), arg_0_4);
    auto arg_0_5 = Nan::New<Object>();
    auto arg_0_5_1 = Nan::New<String>(result.asset.type).ToLocalChecked();
    Nan::DefineOwnProperty(arg_0_5, Nan::New<String>("type").ToLocalChecked(), arg_0_5_1);
    Local<Value> arg_0_5_2;
    if(result.asset.code)
    {
        auto arg_0_5_2_optional = (result.asset.code).value();
        auto arg_0_5_2_tmp = Nan::New<String>(arg_0_5_2_optional).ToLocalChecked();
        arg_0_5_2 = arg_0_5_2_tmp;
    }

    Nan::DefineOwnProperty(arg_0_5, Nan::New<String>("code").ToLocalChecked(), arg_0_5_2);
    Local<Value> arg_0_5_3;
    if(result.asset.issuer)
    {
        auto arg_0_5_3_optional = (result.asset.issuer).value();
        auto arg_0_5_3_tmp = Nan::New<String>(arg_0_5_3_optional).ToLocalChecked();
        arg_0_5_3 = arg_0_5_3_tmp;
    }

    Nan::DefineOwnProperty(arg_0_5, Nan::New<String>("issuer").ToLocalChecked(), arg_0_5_3);

    Nan::DefineOwnProperty(arg_0, Nan::New<String>("asset").ToLocalChecked(), arg_0_5);
    Local<Value> arg_0_6;
    if(result.sourceAsset)
    {
        auto arg_0_6_optional = (result.sourceAsset).value();
        auto arg_0_6_tmp = Nan::New<Object>();
        auto arg_0_6_tmp_1 = Nan::New<String>(arg_0_6_optional.type).ToLocalChecked();
        Nan::DefineOwnProperty(arg_0_6_tmp, Nan::New<String>("type").ToLocalChecked(), arg_0_6_tmp_1);
        Local<Value> arg_0_6_tmp_2;
        if(arg_0_6_optional.code)
        {
            auto arg_0_6_tmp_2_optional = (arg_0_6_optional.code).value();
            auto arg_0_6_tmp_2_tmp = Nan::New<String>(arg_0_6_tmp_2_optional).ToLocalChecked();
            arg_0_6_tmp_2 = arg_0_6_tmp_2_tmp;
        }

        Nan::DefineOwnProperty(arg_0_6_tmp, Nan::New<String>("code").ToLocalChecked(), arg_0_6_tmp_2);
        Local<Value> arg_0_6_tmp_3;
        if(arg_0_6_optional.issuer)
        {
            auto arg_0_6_tmp_3_optional = (arg_0_6_optional.issuer).value();
            auto arg_0_6_tmp_3_tmp = Nan::New<String>(arg_0_6_tmp_3_optional).ToLocalChecked();
            arg_0_6_tmp_3 = arg_0_6_tmp_3_tmp;
        }

        Nan::DefineOwnProperty(arg_0_6_tmp, Nan::New<String>("issuer").ToLocalChecked(), arg_0_6_tmp_3);

        arg_0_6 = arg_0_6_tmp;
    }

    Nan::DefineOwnProperty(arg_0, Nan::New<String>("sourceAsset").ToLocalChecked(), arg_0_6);
    auto arg_0_7 = NJSAmount::wrap(result.sourceAmount);


    Nan::DefineOwnProperty(arg_0, Nan::New<String>("sourceAmount").ToLocalChecked(), arg_0_7);


    //Return result
    info.GetReturnValue().Set(arg_0);
}
NAN_METHOD(NJSStellarLikeOperation::getTransaction) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSStellarLikeOperation::getTransaction needs 0 arguments");
    }

    //Check if parameters have correct types

    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::StellarLikeOperation>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSStellarLikeOperation::getTransaction : implementation of StellarLikeOperation is not valid");
    }

    auto result = cpp_impl->getTransaction();

    //Wrap result in node object
    auto arg_0 = NJSStellarLikeTransaction::wrap(result);


    //Return result
    info.GetReturnValue().Set(arg_0);
}

NAN_METHOD(NJSStellarLikeOperation::New) {
    //Only new allowed
    if(!info.IsConstructCall())
    {
        return Nan::ThrowError("NJSStellarLikeOperation function can only be called as constructor (use New)");
    }
    info.GetReturnValue().Set(info.This());
}


Nan::Persistent<ObjectTemplate> NJSStellarLikeOperation::StellarLikeOperation_prototype;

Local<Object> NJSStellarLikeOperation::wrap(const std::shared_ptr<ledger::core::api::StellarLikeOperation> &object) {
    Nan::EscapableHandleScope scope;
    Local<ObjectTemplate> local_prototype = Nan::New(StellarLikeOperation_prototype);

    Local<Object> obj;
    if(!local_prototype.IsEmpty())
    {
        obj = local_prototype->NewInstance(Nan::GetCurrentContext()).ToLocalChecked();
        djinni::js::ObjectWrapper<ledger::core::api::StellarLikeOperation>::Wrap(object, obj);
    }
    else
    {
        Nan::ThrowError("NJSStellarLikeOperation::wrap: object template not valid");
    }
    return scope.Escape(obj);
}

NAN_METHOD(NJSStellarLikeOperation::isNull) {
    auto cpp_implementation = djinni::js::ObjectWrapper<ledger::core::api::StellarLikeOperation>::Unwrap(info.This());
    auto isNull = !cpp_implementation ? true : false;
    return info.GetReturnValue().Set(Nan::New<Boolean>(isNull));
}

void NJSStellarLikeOperation::Initialize(Local<Object> target) {
    Nan::HandleScope scope;

    Local<FunctionTemplate> func_template = Nan::New<FunctionTemplate>(NJSStellarLikeOperation::New);
    Local<ObjectTemplate> objectTemplate = func_template->InstanceTemplate();
    objectTemplate->SetInternalFieldCount(1);

    func_template->SetClassName(Nan::New<String>("NJSStellarLikeOperation").ToLocalChecked());

    //SetPrototypeMethod all methods
    Nan::SetPrototypeMethod(func_template,"getRecord", getRecord);
    Nan::SetPrototypeMethod(func_template,"getTransaction", getTransaction);
    Nan::SetPrototypeMethod(func_template,"isNull", isNull);
    //Set object prototype
    StellarLikeOperation_prototype.Reset(objectTemplate);

    //Add template to target
    target->Set(Nan::New<String>("NJSStellarLikeOperation").ToLocalChecked(), func_template->GetFunction(Nan::GetCurrentContext()).ToLocalChecked());
}
