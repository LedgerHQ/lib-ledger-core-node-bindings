// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from bitcoin_like_wallet.djinni

#ifndef DJINNI_GENERATED_NJSBITCOINLIKETRANSACTION_HPP
#define DJINNI_GENERATED_NJSBITCOINLIKETRANSACTION_HPP


#include "../include/../utils/optional.hpp"
#include "../include/BitcoinLikeSignature.hpp"
#include "../include/BitcoinLikeSignatureState.hpp"
#include "../include/EstimatedSize.hpp"
#include "NJSAmountCpp.hpp"
#include "NJSBitcoinLikeBlockCpp.hpp"
#include "NJSBitcoinLikeInputCpp.hpp"
#include "NJSBitcoinLikeOutputCpp.hpp"
#include <chrono>
#include <cstdint>
#include <memory>
#include <string>
#include <vector>

#include <nan.h>
#include <node.h>
#include "../include/BitcoinLikeTransaction.hpp"

using namespace v8;
using namespace node;
using namespace std;
using namespace ledger::core::api;

class NJSBitcoinLikeTransaction final {
public:

    static void Initialize(Local<Object> target);
    NJSBitcoinLikeTransaction() = delete;

    static Local<Object> wrap(const std::shared_ptr<ledger::core::api::BitcoinLikeTransaction> &object);
    static Nan::Persistent<ObjectTemplate> BitcoinLikeTransaction_prototype;

private:
    /** Get the hash of the transaction. */
    static NAN_METHOD(getHash);

    /** Get the input of the transaction. */
    static NAN_METHOD(getInputs);

    /** Get the output of the transaction. */
    static NAN_METHOD(getOutputs);

    /** Get the block in which the transaction is inserted if the transaction is confirmed. */
    static NAN_METHOD(getBlock);

    /** Get the lock time of the transaction. */
    static NAN_METHOD(getLockTime);

    /** Get the amount of fees of the transaction. */
    static NAN_METHOD(getFees);

    /**
     * Get the time when the transaction was issued or the time of the block including
     * this transaction.
     */
    static NAN_METHOD(getTime);

    /** Get the timestamps serialized in the raw transaction if the underlying currency handles it. */
    static NAN_METHOD(getTimestamp);

    /** Get Transaction version. */
    static NAN_METHOD(getVersion);

    /** Serialize the transaction to its raw format. */
    static NAN_METHOD(serialize);

    /** Serialize outputs of the raw transaction into a byte array using the bitcoin transaction format. */
    static NAN_METHOD(serializeOutputs);

    /** Get the witness if the underlying transaction is a segwit transaction. */
    static NAN_METHOD(getWitness);

    /**
     * Estimate the size of the raw transaction in bytes. This method returns a minimum estimated size and a maximum estimated
     * size.
     */
    static NAN_METHOD(getEstimatedSize);

    /** Get the dust amount based on the maximum estimated size of the transaction */
    static NAN_METHOD(getDustAmount);

    /**
     * Sign all inputs for given transaction. 
     * Build DER encoded signature from RSV data.
     * @return SIGNING_SUCCEED if succeed case else refers to BitcoinLikeSignatureState enumeration
     */
    static NAN_METHOD(setSignatures);

    /**
     * Sign all inputs for given transaction. 
     * @return SIGNING_SUCCEED if succeed case else refers to BitcoinLikeSignatureState enumeration
     */
    static NAN_METHOD(setDERSignatures);

    static NAN_METHOD(New);

    static NAN_METHOD(isNull);
};
#endif //DJINNI_GENERATED_NJSBITCOINLIKETRANSACTION_HPP
