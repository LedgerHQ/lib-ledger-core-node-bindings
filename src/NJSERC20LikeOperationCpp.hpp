// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from erc20.djinni

#ifndef DJINNI_GENERATED_NJSERC20LIKEOPERATION_HPP
#define DJINNI_GENERATED_NJSERC20LIKEOPERATION_HPP


#include "../include/../utils/optional.hpp"
#include "../include/OperationType.hpp"
#include "NJSBigIntCpp.hpp"
#include <chrono>
#include <cstdint>
#include <memory>
#include <string>
#include <vector>

#include <nan.h>
#include <node.h>
#include "../include/ERC20LikeOperation.hpp"

using namespace v8;
using namespace node;
using namespace std;
using namespace ledger::core::api;

class NJSERC20LikeOperation final {
public:

    static void Initialize(Local<Object> target);
    NJSERC20LikeOperation() = delete;

    static Local<Object> wrap(const std::shared_ptr<ledger::core::api::ERC20LikeOperation> &object);
    static Nan::Persistent<ObjectTemplate> ERC20LikeOperation_prototype;

private:
    /** Get the hash of the transaction. */
    static NAN_METHOD(getHash);

    /** Get the nonce of the transaction : sequence number issued by originating EOA. */
    static NAN_METHOD(getNonce);

    /** Get Gas price (in wei). */
    static NAN_METHOD(getGasPrice);

    /** Get start gas (in wei) : maximum amount of gas the originator is willing to pay. */
    static NAN_METHOD(getGasLimit);

    /** Used gas (in wei) : used gas during this transaction: */
    static NAN_METHOD(getUsedGas);

    /** Get source ETH address. */
    static NAN_METHOD(getSender);

    /** Get destination ETH address. */
    static NAN_METHOD(getReceiver);

    /** Get amount of ether to send. */
    static NAN_METHOD(getValue);

    /** Get binary data payload. */
    static NAN_METHOD(getData);

    /**
     * Get the time when the transaction was issued or the time of the block including this
     * this transaction.
     */
    static NAN_METHOD(getTime);

    /** Get operation type : whether it is a SEND or RECEIVE. */
    static NAN_METHOD(getOperationType);

    /** Get opration status : pending or confirmed. */
    static NAN_METHOD(getStatus);

    /**
     * Get block height on which operation was included.
     * @return Optional 64-bit integer, height of block in which operation was validated
     */
    static NAN_METHOD(getBlockHeight);

    /** Get parent ETH operation uid */
    static NAN_METHOD(getETHOperationUid);

    /** Get ERC20 operation uid */
    static NAN_METHOD(getOperationUid);

    static NAN_METHOD(New);

    static NAN_METHOD(isNull);
};
#endif //DJINNI_GENERATED_NJSERC20LIKEOPERATION_HPP
