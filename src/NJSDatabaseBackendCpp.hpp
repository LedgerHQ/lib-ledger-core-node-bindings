// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from database.djinni

#ifndef DJINNI_GENERATED_NJSDATABASEBACKEND_HPP
#define DJINNI_GENERATED_NJSDATABASEBACKEND_HPP


#include "NJSDatabaseEngine.hpp"
#include <cstdint>
#include <memory>

#include <nan.h>
#include <node.h>
#include "../include/DatabaseBackend.hpp"

using namespace v8;
using namespace node;
using namespace std;
using namespace ledger::core::api;

class NJSDatabaseBackend final {
public:

    static void Initialize(Local<Object> target);
    NJSDatabaseBackend() = delete;

    static Local<Object> wrap(const std::shared_ptr<ledger::core::api::DatabaseBackend> &object);
    static Nan::Persistent<ObjectTemplate> DatabaseBackend_prototype;

private:
    /**
     * Get the maximum number of concurrent connection that the backend is able to open on a single database.
     * @return the size of the connection pool.
     */
    static NAN_METHOD(getConnectionPoolSize);

    /**
     * Get the maximum number of concurrent readonly connection that the backend is able to open on a single database.
     * @return the size of the readonly connection pool.
     */
    static NAN_METHOD(getReadonlyConnectionPoolSize);

    /**
     * Enable or disable query logging. By default logging is disabled. Query logging will record every SQL query in log streams.
     * @return this database backend (to chain configuration calls)
     */
    static NAN_METHOD(enableQueryLogging);

    /**
     * Return true if query logging is enabled.
     * @return trye if query logging is enabled, false otherwise.
     */
    static NAN_METHOD(isLoggingEnabled);

    /**
     * Create an instance of SQLite3 database.
     * @return DatabaseBackend object
     */
    static NAN_METHOD(getSqlite3Backend);

    /**
     * Create an instance of PostgreSQL database.
     * @return DatabaseBackend object
     */
    static NAN_METHOD(getPostgreSQLBackend);

    /** Create a database backend instance from the given DatabaseEngine implementation. */
    static NAN_METHOD(createBackendFromEngine);

    static NAN_METHOD(New);

    static NAN_METHOD(isNull);
};
#endif //DJINNI_GENERATED_NJSDATABASEBACKEND_HPP
