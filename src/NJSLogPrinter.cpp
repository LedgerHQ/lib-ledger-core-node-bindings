// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from logger.djinni

#include "NJSLogPrinter.hpp"
#include "NJSObjectWrapper.hpp"

using namespace v8;
using namespace node;
using namespace std;

void NJSLogPrinter::printError(const std::string & message)
{
    Nan::HandleScope scope;
    //Wrap parameters
    auto arg_0 = Nan::New<String>(message).ToLocalChecked();
    Local<Value> args[1] = {arg_0};
    Local<Object> local_njs_impl = Nan::New<Object>(njs_impl);
    if(!local_njs_impl->IsObject())
    {
        Nan::ThrowError("NJSLogPrinter::printError fail to retrieve node implementation");
    }
    auto calling_funtion = Nan::Get(local_njs_impl,Nan::New<String>("printError").ToLocalChecked()).ToLocalChecked();
    auto result_printError = Nan::CallAsFunction(calling_funtion->ToObject(Nan::GetCurrentContext()).ToLocalChecked(),local_njs_impl,1,args);
    if(result_printError.IsEmpty())
    {
        Nan::ThrowError("NJSLogPrinter::printError call failed");
    }
}

void NJSLogPrinter::printInfo(const std::string & message)
{
    Nan::HandleScope scope;
    //Wrap parameters
    auto arg_0 = Nan::New<String>(message).ToLocalChecked();
    Local<Value> args[1] = {arg_0};
    Local<Object> local_njs_impl = Nan::New<Object>(njs_impl);
    if(!local_njs_impl->IsObject())
    {
        Nan::ThrowError("NJSLogPrinter::printInfo fail to retrieve node implementation");
    }
    auto calling_funtion = Nan::Get(local_njs_impl,Nan::New<String>("printInfo").ToLocalChecked()).ToLocalChecked();
    auto result_printInfo = Nan::CallAsFunction(calling_funtion->ToObject(Nan::GetCurrentContext()).ToLocalChecked(),local_njs_impl,1,args);
    if(result_printInfo.IsEmpty())
    {
        Nan::ThrowError("NJSLogPrinter::printInfo call failed");
    }
}

void NJSLogPrinter::printDebug(const std::string & message)
{
    Nan::HandleScope scope;
    //Wrap parameters
    auto arg_0 = Nan::New<String>(message).ToLocalChecked();
    Local<Value> args[1] = {arg_0};
    Local<Object> local_njs_impl = Nan::New<Object>(njs_impl);
    if(!local_njs_impl->IsObject())
    {
        Nan::ThrowError("NJSLogPrinter::printDebug fail to retrieve node implementation");
    }
    auto calling_funtion = Nan::Get(local_njs_impl,Nan::New<String>("printDebug").ToLocalChecked()).ToLocalChecked();
    auto result_printDebug = Nan::CallAsFunction(calling_funtion->ToObject(Nan::GetCurrentContext()).ToLocalChecked(),local_njs_impl,1,args);
    if(result_printDebug.IsEmpty())
    {
        Nan::ThrowError("NJSLogPrinter::printDebug call failed");
    }
}

void NJSLogPrinter::printWarning(const std::string & message)
{
    Nan::HandleScope scope;
    //Wrap parameters
    auto arg_0 = Nan::New<String>(message).ToLocalChecked();
    Local<Value> args[1] = {arg_0};
    Local<Object> local_njs_impl = Nan::New<Object>(njs_impl);
    if(!local_njs_impl->IsObject())
    {
        Nan::ThrowError("NJSLogPrinter::printWarning fail to retrieve node implementation");
    }
    auto calling_funtion = Nan::Get(local_njs_impl,Nan::New<String>("printWarning").ToLocalChecked()).ToLocalChecked();
    auto result_printWarning = Nan::CallAsFunction(calling_funtion->ToObject(Nan::GetCurrentContext()).ToLocalChecked(),local_njs_impl,1,args);
    if(result_printWarning.IsEmpty())
    {
        Nan::ThrowError("NJSLogPrinter::printWarning call failed");
    }
}

void NJSLogPrinter::printApdu(const std::string & message)
{
    Nan::HandleScope scope;
    //Wrap parameters
    auto arg_0 = Nan::New<String>(message).ToLocalChecked();
    Local<Value> args[1] = {arg_0};
    Local<Object> local_njs_impl = Nan::New<Object>(njs_impl);
    if(!local_njs_impl->IsObject())
    {
        Nan::ThrowError("NJSLogPrinter::printApdu fail to retrieve node implementation");
    }
    auto calling_funtion = Nan::Get(local_njs_impl,Nan::New<String>("printApdu").ToLocalChecked()).ToLocalChecked();
    auto result_printApdu = Nan::CallAsFunction(calling_funtion->ToObject(Nan::GetCurrentContext()).ToLocalChecked(),local_njs_impl,1,args);
    if(result_printApdu.IsEmpty())
    {
        Nan::ThrowError("NJSLogPrinter::printApdu call failed");
    }
}

void NJSLogPrinter::printCriticalError(const std::string & message)
{
    Nan::HandleScope scope;
    //Wrap parameters
    auto arg_0 = Nan::New<String>(message).ToLocalChecked();
    Local<Value> args[1] = {arg_0};
    Local<Object> local_njs_impl = Nan::New<Object>(njs_impl);
    if(!local_njs_impl->IsObject())
    {
        Nan::ThrowError("NJSLogPrinter::printCriticalError fail to retrieve node implementation");
    }
    auto calling_funtion = Nan::Get(local_njs_impl,Nan::New<String>("printCriticalError").ToLocalChecked()).ToLocalChecked();
    auto result_printCriticalError = Nan::CallAsFunction(calling_funtion->ToObject(Nan::GetCurrentContext()).ToLocalChecked(),local_njs_impl,1,args);
    if(result_printCriticalError.IsEmpty())
    {
        Nan::ThrowError("NJSLogPrinter::printCriticalError call failed");
    }
}

std::shared_ptr<ExecutionContext> NJSLogPrinter::getContext()
{
    Nan::HandleScope scope;
    //Wrap parameters
    Local<Value> args[1];
    Local<Object> local_njs_impl = Nan::New<Object>(njs_impl);
    if(!local_njs_impl->IsObject())
    {
        Nan::ThrowError("NJSLogPrinter::getContext fail to retrieve node implementation");
    }
    auto calling_funtion = Nan::Get(local_njs_impl,Nan::New<String>("getContext").ToLocalChecked()).ToLocalChecked();
    auto result_getContext = Nan::CallAsFunction(calling_funtion->ToObject(Nan::GetCurrentContext()).ToLocalChecked(),local_njs_impl,0,args);
    if(result_getContext.IsEmpty())
    {
        Nan::ThrowError("NJSLogPrinter::getContext call failed");
    }
    auto checkedResult_getContext = result_getContext.ToLocalChecked();
    Local<Object> njs_fResult_getContext = checkedResult_getContext->ToObject(Nan::GetCurrentContext()).ToLocalChecked();
    auto fResult_getContext = djinni::js::ObjectWrapper<ledger::core::api::ExecutionContext>::Unwrap(njs_fResult_getContext);

    return fResult_getContext;
}

NAN_METHOD(NJSLogPrinter::New) {
    //Only new allowed
    if(!info.IsConstructCall())
    {
        return Nan::ThrowError("NJSLogPrinter function can only be called as constructor (use New)");
    }

    if(!info[0]->IsObject())
    {
        return Nan::ThrowError("NJSLogPrinter::New requires an implementation from node");
    }
    auto node_instance = std::make_shared<NJSLogPrinter>(info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked());
    djinni::js::ObjectWrapper<NJSLogPrinter>::Wrap(node_instance, info.This());
    info.GetReturnValue().Set(info.This());
}


Nan::Persistent<ObjectTemplate> NJSLogPrinter::LogPrinter_prototype;

Local<Object> NJSLogPrinter::wrap(const std::shared_ptr<ledger::core::api::LogPrinter> &object) {
    Nan::EscapableHandleScope scope;
    Local<ObjectTemplate> local_prototype = Nan::New(LogPrinter_prototype);

    Local<Object> obj;
    if(!local_prototype.IsEmpty())
    {
        obj = local_prototype->NewInstance(Nan::GetCurrentContext()).ToLocalChecked();
        djinni::js::ObjectWrapper<ledger::core::api::LogPrinter>::Wrap(object, obj);
    }
    else
    {
        Nan::ThrowError("NJSLogPrinter::wrap: object template not valid");
    }
    return scope.Escape(obj);
}

void NJSLogPrinter::Initialize(Local<Object> target) {
    Nan::HandleScope scope;

    Local<FunctionTemplate> func_template = Nan::New<FunctionTemplate>(NJSLogPrinter::New);
    Local<ObjectTemplate> objectTemplate = func_template->InstanceTemplate();
    objectTemplate->SetInternalFieldCount(1);

    func_template->SetClassName(Nan::New<String>("NJSLogPrinter").ToLocalChecked());
    Nan::SetPrototypeMethod(func_template,"New", New);
    //Set object prototype
    LogPrinter_prototype.Reset(objectTemplate);

    //Add template to target
    target->Set(Nan::New<String>("NJSLogPrinter").ToLocalChecked(), func_template->GetFunction(Nan::GetCurrentContext()).ToLocalChecked());
}
