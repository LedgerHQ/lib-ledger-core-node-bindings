// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from bitcoin_like_wallet.djinni

#include "NJSBitcoinLikeTransactionCpp.hpp"
#include "NJSObjectWrapper.hpp"

using namespace v8;
using namespace node;
using namespace std;

NAN_METHOD(NJSBitcoinLikeTransaction::getHash) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSBitcoinLikeTransaction::getHash needs 0 arguments");
    }

    //Check if parameters have correct types

    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::BitcoinLikeTransaction>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSBitcoinLikeTransaction::getHash : implementation of BitcoinLikeTransaction is not valid");
    }

    auto result = cpp_impl->getHash();

    //Wrap result in node object
    auto arg_0 = Nan::New<String>(result).ToLocalChecked();

    //Return result
    info.GetReturnValue().Set(arg_0);
}
NAN_METHOD(NJSBitcoinLikeTransaction::getInputs) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSBitcoinLikeTransaction::getInputs needs 0 arguments");
    }

    //Check if parameters have correct types

    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::BitcoinLikeTransaction>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSBitcoinLikeTransaction::getInputs : implementation of BitcoinLikeTransaction is not valid");
    }

    auto result = cpp_impl->getInputs();

    //Wrap result in node object
    Local<Array> arg_0 = Nan::New<Array>();
    for(size_t arg_0_id = 0; arg_0_id < result.size(); arg_0_id++)
    {
        auto arg_0_elem = NJSBitcoinLikeInput::wrap(result[arg_0_id]);

        arg_0->Set((int)arg_0_id,arg_0_elem);
    }


    //Return result
    info.GetReturnValue().Set(arg_0);
}
NAN_METHOD(NJSBitcoinLikeTransaction::getOutputs) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSBitcoinLikeTransaction::getOutputs needs 0 arguments");
    }

    //Check if parameters have correct types

    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::BitcoinLikeTransaction>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSBitcoinLikeTransaction::getOutputs : implementation of BitcoinLikeTransaction is not valid");
    }

    auto result = cpp_impl->getOutputs();

    //Wrap result in node object
    Local<Array> arg_0 = Nan::New<Array>();
    for(size_t arg_0_id = 0; arg_0_id < result.size(); arg_0_id++)
    {
        auto arg_0_elem = NJSBitcoinLikeOutput::wrap(result[arg_0_id]);

        arg_0->Set((int)arg_0_id,arg_0_elem);
    }


    //Return result
    info.GetReturnValue().Set(arg_0);
}
NAN_METHOD(NJSBitcoinLikeTransaction::getBlock) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSBitcoinLikeTransaction::getBlock needs 0 arguments");
    }

    //Check if parameters have correct types

    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::BitcoinLikeTransaction>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSBitcoinLikeTransaction::getBlock : implementation of BitcoinLikeTransaction is not valid");
    }

    auto result = cpp_impl->getBlock();

    //Wrap result in node object
    auto arg_0 = NJSBitcoinLikeBlock::wrap(result);



    //Return result
    info.GetReturnValue().Set(arg_0);
}
NAN_METHOD(NJSBitcoinLikeTransaction::getLockTime) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSBitcoinLikeTransaction::getLockTime needs 0 arguments");
    }

    //Check if parameters have correct types

    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::BitcoinLikeTransaction>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSBitcoinLikeTransaction::getLockTime : implementation of BitcoinLikeTransaction is not valid");
    }

    auto result = cpp_impl->getLockTime();

    //Wrap result in node object
    auto arg_0 = Nan::New<Number>(result);

    //Return result
    info.GetReturnValue().Set(arg_0);
}
NAN_METHOD(NJSBitcoinLikeTransaction::getFees) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSBitcoinLikeTransaction::getFees needs 0 arguments");
    }

    //Check if parameters have correct types

    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::BitcoinLikeTransaction>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSBitcoinLikeTransaction::getFees : implementation of BitcoinLikeTransaction is not valid");
    }

    auto result = cpp_impl->getFees();

    //Wrap result in node object
    auto arg_0 = NJSAmount::wrap(result);


    //Return result
    info.GetReturnValue().Set(arg_0);
}
NAN_METHOD(NJSBitcoinLikeTransaction::getTime) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSBitcoinLikeTransaction::getTime needs 0 arguments");
    }

    //Check if parameters have correct types

    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::BitcoinLikeTransaction>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSBitcoinLikeTransaction::getTime : implementation of BitcoinLikeTransaction is not valid");
    }

    auto result = cpp_impl->getTime();

    //Wrap result in node object
    auto date_arg_0 = chrono::duration_cast<chrono::milliseconds>(result.time_since_epoch()).count();
    auto arg_0 = Nan::New<Date>(date_arg_0).ToLocalChecked();

    //Return result
    info.GetReturnValue().Set(arg_0);
}
NAN_METHOD(NJSBitcoinLikeTransaction::getTimestamp) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSBitcoinLikeTransaction::getTimestamp needs 0 arguments");
    }

    //Check if parameters have correct types

    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::BitcoinLikeTransaction>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSBitcoinLikeTransaction::getTimestamp : implementation of BitcoinLikeTransaction is not valid");
    }

    auto result = cpp_impl->getTimestamp();

    //Wrap result in node object
    Local<Value> arg_0;
    if(result)
    {
        auto arg_0_optional = (result).value();
        auto arg_0_tmp = Nan::New<Int32>(arg_0_optional);
        arg_0 = arg_0_tmp;
    }


    //Return result
    info.GetReturnValue().Set(arg_0);
}
NAN_METHOD(NJSBitcoinLikeTransaction::getVersion) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSBitcoinLikeTransaction::getVersion needs 0 arguments");
    }

    //Check if parameters have correct types

    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::BitcoinLikeTransaction>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSBitcoinLikeTransaction::getVersion : implementation of BitcoinLikeTransaction is not valid");
    }

    auto result = cpp_impl->getVersion();

    //Wrap result in node object
    auto arg_0 = Nan::New<Int32>(result);

    //Return result
    info.GetReturnValue().Set(arg_0);
}
NAN_METHOD(NJSBitcoinLikeTransaction::serialize) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSBitcoinLikeTransaction::serialize needs 0 arguments");
    }

    //Check if parameters have correct types

    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::BitcoinLikeTransaction>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSBitcoinLikeTransaction::serialize : implementation of BitcoinLikeTransaction is not valid");
    }

    auto result = cpp_impl->serialize();

    //Wrap result in node object
    Local<Array> arg_0 = Nan::New<Array>();
    for(size_t arg_0_id = 0; arg_0_id < result.size(); arg_0_id++)
    {
        auto arg_0_elem = Nan::New<Uint32>(result[arg_0_id]);
        arg_0->Set((int)arg_0_id,arg_0_elem);
    }


    //Return result
    info.GetReturnValue().Set(arg_0);
}
NAN_METHOD(NJSBitcoinLikeTransaction::serializeOutputs) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSBitcoinLikeTransaction::serializeOutputs needs 0 arguments");
    }

    //Check if parameters have correct types

    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::BitcoinLikeTransaction>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSBitcoinLikeTransaction::serializeOutputs : implementation of BitcoinLikeTransaction is not valid");
    }

    auto result = cpp_impl->serializeOutputs();

    //Wrap result in node object
    Local<Array> arg_0 = Nan::New<Array>();
    for(size_t arg_0_id = 0; arg_0_id < result.size(); arg_0_id++)
    {
        auto arg_0_elem = Nan::New<Uint32>(result[arg_0_id]);
        arg_0->Set((int)arg_0_id,arg_0_elem);
    }


    //Return result
    info.GetReturnValue().Set(arg_0);
}
NAN_METHOD(NJSBitcoinLikeTransaction::getWitness) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSBitcoinLikeTransaction::getWitness needs 0 arguments");
    }

    //Check if parameters have correct types

    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::BitcoinLikeTransaction>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSBitcoinLikeTransaction::getWitness : implementation of BitcoinLikeTransaction is not valid");
    }

    auto result = cpp_impl->getWitness();

    //Wrap result in node object
    Local<Value> arg_0;
    if(result)
    {
        auto arg_0_optional = (result).value();
        Local<Array> arg_0_tmp = Nan::New<Array>();
        for(size_t arg_0_tmp_id = 0; arg_0_tmp_id < arg_0_optional.size(); arg_0_tmp_id++)
        {
            auto arg_0_tmp_elem = Nan::New<Uint32>(arg_0_optional[arg_0_tmp_id]);
            arg_0_tmp->Set((int)arg_0_tmp_id,arg_0_tmp_elem);
        }

        arg_0 = arg_0_tmp;
    }


    //Return result
    info.GetReturnValue().Set(arg_0);
}
NAN_METHOD(NJSBitcoinLikeTransaction::getEstimatedSize) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSBitcoinLikeTransaction::getEstimatedSize needs 0 arguments");
    }

    //Check if parameters have correct types

    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::BitcoinLikeTransaction>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSBitcoinLikeTransaction::getEstimatedSize : implementation of BitcoinLikeTransaction is not valid");
    }

    auto result = cpp_impl->getEstimatedSize();

    //Wrap result in node object
    auto arg_0 = Nan::New<Object>();
    auto arg_0_1 = Nan::New<Int32>(result.Min);
    Nan::DefineOwnProperty(arg_0, Nan::New<String>("Min").ToLocalChecked(), arg_0_1);
    auto arg_0_2 = Nan::New<Int32>(result.Max);
    Nan::DefineOwnProperty(arg_0, Nan::New<String>("Max").ToLocalChecked(), arg_0_2);


    //Return result
    info.GetReturnValue().Set(arg_0);
}
NAN_METHOD(NJSBitcoinLikeTransaction::setSignatures) {

    //Check if method called with right number of arguments
    if(info.Length() != 2)
    {
        return Nan::ThrowError("NJSBitcoinLikeTransaction::setSignatures needs 2 arguments");
    }

    //Check if parameters have correct types
    vector<BitcoinLikeSignature> arg_0;
    Local<Array> arg_0_container = Local<Array>::Cast(info[0]);
    for(uint32_t arg_0_id = 0; arg_0_id < arg_0_container->Length(); arg_0_id++)
    {
        if(arg_0_container->Get(arg_0_id)->IsObject())
        {

            auto field_arg_0_elem_1 = Nan::Get(arg_0_container->Get(arg_0_id)->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("r").ToLocalChecked()).ToLocalChecked();
            vector<uint8_t> arg_0_elem_1;
            Local<Array> arg_0_elem_1_container = Local<Array>::Cast(field_arg_0_elem_1);
            for(uint32_t arg_0_elem_1_id = 0; arg_0_elem_1_id < arg_0_elem_1_container->Length(); arg_0_elem_1_id++)
            {
                if(arg_0_elem_1_container->Get(arg_0_elem_1_id)->IsUint32())
                {
                    auto arg_0_elem_1_elem = Nan::To<uint32_t>(arg_0_elem_1_container->Get(arg_0_elem_1_id)).FromJust();
                    arg_0_elem_1.emplace_back(arg_0_elem_1_elem);
                }
            }


            auto field_arg_0_elem_2 = Nan::Get(arg_0_container->Get(arg_0_id)->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("s").ToLocalChecked()).ToLocalChecked();
            vector<uint8_t> arg_0_elem_2;
            Local<Array> arg_0_elem_2_container = Local<Array>::Cast(field_arg_0_elem_2);
            for(uint32_t arg_0_elem_2_id = 0; arg_0_elem_2_id < arg_0_elem_2_container->Length(); arg_0_elem_2_id++)
            {
                if(arg_0_elem_2_container->Get(arg_0_elem_2_id)->IsUint32())
                {
                    auto arg_0_elem_2_elem = Nan::To<uint32_t>(arg_0_elem_2_container->Get(arg_0_elem_2_id)).FromJust();
                    arg_0_elem_2.emplace_back(arg_0_elem_2_elem);
                }
            }


            auto field_arg_0_elem_3 = Nan::Get(arg_0_container->Get(arg_0_id)->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("v").ToLocalChecked()).ToLocalChecked();
            vector<uint8_t> arg_0_elem_3;
            Local<Array> arg_0_elem_3_container = Local<Array>::Cast(field_arg_0_elem_3);
            for(uint32_t arg_0_elem_3_id = 0; arg_0_elem_3_id < arg_0_elem_3_container->Length(); arg_0_elem_3_id++)
            {
                if(arg_0_elem_3_container->Get(arg_0_elem_3_id)->IsUint32())
                {
                    auto arg_0_elem_3_elem = Nan::To<uint32_t>(arg_0_elem_3_container->Get(arg_0_elem_3_id)).FromJust();
                    arg_0_elem_3.emplace_back(arg_0_elem_3_elem);
                }
            }

            BitcoinLikeSignature arg_0_elem(arg_0_elem_1, arg_0_elem_2, arg_0_elem_3);

            arg_0.emplace_back(arg_0_elem);
        }
    }

    auto arg_1 = Nan::To<bool>(info[1]).FromJust();

    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::BitcoinLikeTransaction>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSBitcoinLikeTransaction::setSignatures : implementation of BitcoinLikeTransaction is not valid");
    }

    auto result = cpp_impl->setSignatures(arg_0,arg_1);

    //Wrap result in node object
    auto arg_2 = Nan::New<Integer>((int)result);

    //Return result
    info.GetReturnValue().Set(arg_2);
}
NAN_METHOD(NJSBitcoinLikeTransaction::setDERSignatures) {

    //Check if method called with right number of arguments
    if(info.Length() != 2)
    {
        return Nan::ThrowError("NJSBitcoinLikeTransaction::setDERSignatures needs 2 arguments");
    }

    //Check if parameters have correct types
    vector<std::vector<uint8_t>> arg_0;
    Local<Array> arg_0_container = Local<Array>::Cast(info[0]);
    for(uint32_t arg_0_id = 0; arg_0_id < arg_0_container->Length(); arg_0_id++)
    {
        if(arg_0_container->Get(arg_0_id)->IsObject())
        {
            vector<uint8_t> arg_0_elem;
            Local<Array> arg_0_elem_container = Local<Array>::Cast(arg_0_container->Get(arg_0_id));
            for(uint32_t arg_0_elem_id = 0; arg_0_elem_id < arg_0_elem_container->Length(); arg_0_elem_id++)
            {
                if(arg_0_elem_container->Get(arg_0_elem_id)->IsUint32())
                {
                    auto arg_0_elem_elem = Nan::To<uint32_t>(arg_0_elem_container->Get(arg_0_elem_id)).FromJust();
                    arg_0_elem.emplace_back(arg_0_elem_elem);
                }
            }

            arg_0.emplace_back(arg_0_elem);
        }
    }

    auto arg_1 = Nan::To<bool>(info[1]).FromJust();

    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::BitcoinLikeTransaction>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSBitcoinLikeTransaction::setDERSignatures : implementation of BitcoinLikeTransaction is not valid");
    }

    auto result = cpp_impl->setDERSignatures(arg_0,arg_1);

    //Wrap result in node object
    auto arg_2 = Nan::New<Integer>((int)result);

    //Return result
    info.GetReturnValue().Set(arg_2);
}

NAN_METHOD(NJSBitcoinLikeTransaction::New) {
    //Only new allowed
    if(!info.IsConstructCall())
    {
        return Nan::ThrowError("NJSBitcoinLikeTransaction function can only be called as constructor (use New)");
    }
    info.GetReturnValue().Set(info.This());
}


Nan::Persistent<ObjectTemplate> NJSBitcoinLikeTransaction::BitcoinLikeTransaction_prototype;

Local<Object> NJSBitcoinLikeTransaction::wrap(const std::shared_ptr<ledger::core::api::BitcoinLikeTransaction> &object) {
    Nan::EscapableHandleScope scope;
    Local<ObjectTemplate> local_prototype = Nan::New(BitcoinLikeTransaction_prototype);

    Local<Object> obj;
    if(!local_prototype.IsEmpty())
    {
        obj = local_prototype->NewInstance(Nan::GetCurrentContext()).ToLocalChecked();
        djinni::js::ObjectWrapper<ledger::core::api::BitcoinLikeTransaction>::Wrap(object, obj);
    }
    else
    {
        Nan::ThrowError("NJSBitcoinLikeTransaction::wrap: object template not valid");
    }
    return scope.Escape(obj);
}

NAN_METHOD(NJSBitcoinLikeTransaction::isNull) {
    auto cpp_implementation = djinni::js::ObjectWrapper<ledger::core::api::BitcoinLikeTransaction>::Unwrap(info.This());
    auto isNull = !cpp_implementation ? true : false;
    return info.GetReturnValue().Set(Nan::New<Boolean>(isNull));
}

void NJSBitcoinLikeTransaction::Initialize(Local<Object> target) {
    Nan::HandleScope scope;

    Local<FunctionTemplate> func_template = Nan::New<FunctionTemplate>(NJSBitcoinLikeTransaction::New);
    Local<ObjectTemplate> objectTemplate = func_template->InstanceTemplate();
    objectTemplate->SetInternalFieldCount(1);

    func_template->SetClassName(Nan::New<String>("NJSBitcoinLikeTransaction").ToLocalChecked());

    //SetPrototypeMethod all methods
    Nan::SetPrototypeMethod(func_template,"getHash", getHash);
    Nan::SetPrototypeMethod(func_template,"getInputs", getInputs);
    Nan::SetPrototypeMethod(func_template,"getOutputs", getOutputs);
    Nan::SetPrototypeMethod(func_template,"getBlock", getBlock);
    Nan::SetPrototypeMethod(func_template,"getLockTime", getLockTime);
    Nan::SetPrototypeMethod(func_template,"getFees", getFees);
    Nan::SetPrototypeMethod(func_template,"getTime", getTime);
    Nan::SetPrototypeMethod(func_template,"getTimestamp", getTimestamp);
    Nan::SetPrototypeMethod(func_template,"getVersion", getVersion);
    Nan::SetPrototypeMethod(func_template,"serialize", serialize);
    Nan::SetPrototypeMethod(func_template,"serializeOutputs", serializeOutputs);
    Nan::SetPrototypeMethod(func_template,"getWitness", getWitness);
    Nan::SetPrototypeMethod(func_template,"getEstimatedSize", getEstimatedSize);
    Nan::SetPrototypeMethod(func_template,"setSignatures", setSignatures);
    Nan::SetPrototypeMethod(func_template,"setDERSignatures", setDERSignatures);
    Nan::SetPrototypeMethod(func_template,"isNull", isNull);
    //Set object prototype
    BitcoinLikeTransaction_prototype.Reset(objectTemplate);

    //Add template to target
    target->Set(Nan::New<String>("NJSBitcoinLikeTransaction").ToLocalChecked(), func_template->GetFunction(Nan::GetCurrentContext()).ToLocalChecked());
}
