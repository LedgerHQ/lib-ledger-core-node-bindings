// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from ethereum_like_wallet.djinni

#ifndef DJINNI_GENERATED_NJSETHEREUMLIKEACCOUNT_HPP
#define DJINNI_GENERATED_NJSETHEREUMLIKEACCOUNT_HPP


#include "../include/EthereumGasLimitRequest.hpp"
#include "NJSBigIntCallback.hpp"
#include "NJSBigIntListCallback.hpp"
#include "NJSERC20LikeAccountCpp.hpp"
#include "NJSEthereumLikeTransactionBuilderCpp.hpp"
#include "NJSEthereumLikeTransactionCpp.hpp"
#include "NJSStringCallback.hpp"
#include <cstdint>
#include <memory>
#include <string>
#include <vector>

#include <nan.h>
#include <node.h>
#include "../include/EthereumLikeAccount.hpp"

using namespace v8;
using namespace node;
using namespace std;
using namespace ledger::core::api;

class NJSEthereumLikeAccount final {
public:

    static void Initialize(Local<Object> target);
    NJSEthereumLikeAccount() = delete;

    static Local<Object> wrap(const std::shared_ptr<ledger::core::api::EthereumLikeAccount> &object);
    static Nan::Persistent<ObjectTemplate> EthereumLikeAccount_prototype;

private:
    /** Send a raw (binary) transaction on the Ethereum blockchain. */
    static NAN_METHOD(broadcastRawTransaction);

    /** Send a transaction on the Ethereum blockchain. */
    static NAN_METHOD(broadcastTransaction);

    /** Get a builder object to construct transactions. */
    static NAN_METHOD(buildTransaction);

    /** Get the list of ERC20 accounts associated with this Ethereum account. */
    static NAN_METHOD(getERC20Accounts);

    /**
     * Get gas price from network
     * Note: it would have been better to have this method on EthereumLikeWallet
     * but since EthereumLikeWallet is not used anywhere, it's better to keep all
     * specific methods under the same specific class so it will be easy to segratate
     * when the right time comes !
     */
    static NAN_METHOD(getGasPrice);

    /**
     * Get estimated gas limit to set so the transaction will succeed
     * The passed address could be EOA or contract
     * This estimation is based on X last incoming txs (to address) that succeeded
     * Note: same note as above
     */
    static NAN_METHOD(getEstimatedGasLimit);

    /**
     * Get estimated gas limit to set so the transaction will succeed
     * The passed address could be EOA or contract
     * This estimation is based on a dry-run on the node, and it will fail if the request is ill-formed
     * Note: same note as above
     */
    static NAN_METHOD(getDryRunGasLimit);

    /**
     * Get balance of ERC20 token
     * The passed address is an ERC20 account
     * Note: same note as above
     */
    static NAN_METHOD(getERC20Balance);

    /**
     * Get balance of ERC20 tokens
     * The passed addresses are ERC20 accounts
     * Note: same note as above
     */
    static NAN_METHOD(getERC20Balances);

    static NAN_METHOD(New);

    static NAN_METHOD(isNull);
};
#endif //DJINNI_GENERATED_NJSETHEREUMLIKEACCOUNT_HPP
