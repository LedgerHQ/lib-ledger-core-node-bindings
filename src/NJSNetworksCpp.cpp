// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from networks.djinni

#include "NJSNetworksCpp.hpp"
#include "NJSObjectWrapper.hpp"
#include "NJSHexUtils.hpp"

using namespace v8;
using namespace node;
using namespace std;

NAN_METHOD(NJSNetworks::bitcoin) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSNetworks::bitcoin needs 0 arguments");
    }

    //Check if parameters have correct types

    auto result = ledger::core::api::Networks::bitcoin();

    //Wrap result in node object
    auto arg_0 = Nan::New<Object>();
    auto arg_0_1 = Nan::New<String>(result.Identifier).ToLocalChecked();
    Nan::DefineOwnProperty(arg_0, Nan::New<String>("Identifier").ToLocalChecked(), arg_0_1);
    auto arg_0_2 = Nan::New<String>("0x" + djinni::js::hex::toString(result.P2PKHVersion)).ToLocalChecked();

    Nan::DefineOwnProperty(arg_0, Nan::New<String>("P2PKHVersion").ToLocalChecked(), arg_0_2);
    auto arg_0_3 = Nan::New<String>("0x" + djinni::js::hex::toString(result.P2SHVersion)).ToLocalChecked();

    Nan::DefineOwnProperty(arg_0, Nan::New<String>("P2SHVersion").ToLocalChecked(), arg_0_3);
    auto arg_0_4 = Nan::New<String>("0x" + djinni::js::hex::toString(result.XPUBVersion)).ToLocalChecked();

    Nan::DefineOwnProperty(arg_0, Nan::New<String>("XPUBVersion").ToLocalChecked(), arg_0_4);
    auto arg_0_5 = Nan::New<Integer>((int)result.FeePolicy);
    Nan::DefineOwnProperty(arg_0, Nan::New<String>("FeePolicy").ToLocalChecked(), arg_0_5);
    auto arg_0_6 = Nan::New<Number>(result.DustAmount);
    Nan::DefineOwnProperty(arg_0, Nan::New<String>("DustAmount").ToLocalChecked(), arg_0_6);
    auto arg_0_7 = Nan::New<String>(result.MessagePrefix).ToLocalChecked();
    Nan::DefineOwnProperty(arg_0, Nan::New<String>("MessagePrefix").ToLocalChecked(), arg_0_7);
    auto arg_0_8 = Nan::New<Boolean>(result.UsesTimestampedTransaction);
    Nan::DefineOwnProperty(arg_0, Nan::New<String>("UsesTimestampedTransaction").ToLocalChecked(), arg_0_8);
    auto arg_0_9 = Nan::New<Number>(result.TimestampDelay);
    Nan::DefineOwnProperty(arg_0, Nan::New<String>("TimestampDelay").ToLocalChecked(), arg_0_9);
    auto arg_0_10 = Nan::New<String>("0x" + djinni::js::hex::toString(result.SigHash)).ToLocalChecked();

    Nan::DefineOwnProperty(arg_0, Nan::New<String>("SigHash").ToLocalChecked(), arg_0_10);
    Local<Array> arg_0_11 = Nan::New<Array>();
    for(size_t arg_0_11_id = 0; arg_0_11_id < result.AdditionalBIPs.size(); arg_0_11_id++)
    {
        auto arg_0_11_elem = Nan::New<String>(result.AdditionalBIPs[arg_0_11_id]).ToLocalChecked();
        Nan::Set(arg_0_11, (int)arg_0_11_id,arg_0_11_elem);
    }

    Nan::DefineOwnProperty(arg_0, Nan::New<String>("AdditionalBIPs").ToLocalChecked(), arg_0_11);


    //Return result
    info.GetReturnValue().Set(arg_0);
}
NAN_METHOD(NJSNetworks::cosmos) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSNetworks::cosmos needs 1 arguments");
    }

    //Check if parameters have correct types
    Nan::Utf8String string_arg_0(info[0]->ToString(Nan::GetCurrentContext()).ToLocalChecked());
    auto arg_0 = std::string(*string_arg_0);

    auto result = ledger::core::api::Networks::cosmos(arg_0);

    //Wrap result in node object
    auto arg_1 = Nan::New<Object>();
    auto arg_1_1 = Nan::New<String>(result.Identifier).ToLocalChecked();
    Nan::DefineOwnProperty(arg_1, Nan::New<String>("Identifier").ToLocalChecked(), arg_1_1);
    auto arg_1_2 = Nan::New<String>(result.MessagePrefix).ToLocalChecked();
    Nan::DefineOwnProperty(arg_1, Nan::New<String>("MessagePrefix").ToLocalChecked(), arg_1_2);
    auto arg_1_3 = Nan::New<String>("0x" + djinni::js::hex::toString(result.XPUBVersion)).ToLocalChecked();

    Nan::DefineOwnProperty(arg_1, Nan::New<String>("XPUBVersion").ToLocalChecked(), arg_1_3);
    auto arg_1_4 = Nan::New<String>("0x" + djinni::js::hex::toString(result.PubKeyPrefix)).ToLocalChecked();

    Nan::DefineOwnProperty(arg_1, Nan::New<String>("PubKeyPrefix").ToLocalChecked(), arg_1_4);
    auto arg_1_5 = Nan::New<String>("0x" + djinni::js::hex::toString(result.Ed25519PubKeyPrefix)).ToLocalChecked();

    Nan::DefineOwnProperty(arg_1, Nan::New<String>("Ed25519PubKeyPrefix").ToLocalChecked(), arg_1_5);
    auto arg_1_6 = Nan::New<String>("0x" + djinni::js::hex::toString(result.AddressPrefix)).ToLocalChecked();

    Nan::DefineOwnProperty(arg_1, Nan::New<String>("AddressPrefix").ToLocalChecked(), arg_1_6);
    auto arg_1_7 = Nan::New<String>(result.ChainId).ToLocalChecked();
    Nan::DefineOwnProperty(arg_1, Nan::New<String>("ChainId").ToLocalChecked(), arg_1_7);
    Local<Array> arg_1_8 = Nan::New<Array>();
    for(size_t arg_1_8_id = 0; arg_1_8_id < result.AdditionalCIPs.size(); arg_1_8_id++)
    {
        auto arg_1_8_elem = Nan::New<String>(result.AdditionalCIPs[arg_1_8_id]).ToLocalChecked();
        Nan::Set(arg_1_8, (int)arg_1_8_id,arg_1_8_elem);
    }

    Nan::DefineOwnProperty(arg_1, Nan::New<String>("AdditionalCIPs").ToLocalChecked(), arg_1_8);


    //Return result
    info.GetReturnValue().Set(arg_1);
}
NAN_METHOD(NJSNetworks::ethereum) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSNetworks::ethereum needs 0 arguments");
    }

    //Check if parameters have correct types

    auto result = ledger::core::api::Networks::ethereum();

    //Wrap result in node object
    auto arg_0 = Nan::New<Object>();
    auto arg_0_1 = Nan::New<String>(result.Identifier).ToLocalChecked();
    Nan::DefineOwnProperty(arg_0, Nan::New<String>("Identifier").ToLocalChecked(), arg_0_1);
    auto arg_0_2 = Nan::New<String>(result.MessagePrefix).ToLocalChecked();
    Nan::DefineOwnProperty(arg_0, Nan::New<String>("MessagePrefix").ToLocalChecked(), arg_0_2);
    auto arg_0_3 = Nan::New<String>(result.ChainID).ToLocalChecked();
    Nan::DefineOwnProperty(arg_0, Nan::New<String>("ChainID").ToLocalChecked(), arg_0_3);
    auto arg_0_4 = Nan::New<String>("0x" + djinni::js::hex::toString(result.XPUBVersion)).ToLocalChecked();

    Nan::DefineOwnProperty(arg_0, Nan::New<String>("XPUBVersion").ToLocalChecked(), arg_0_4);
    Local<Array> arg_0_5 = Nan::New<Array>();
    for(size_t arg_0_5_id = 0; arg_0_5_id < result.AdditionalEIPs.size(); arg_0_5_id++)
    {
        auto arg_0_5_elem = Nan::New<String>(result.AdditionalEIPs[arg_0_5_id]).ToLocalChecked();
        Nan::Set(arg_0_5, (int)arg_0_5_id,arg_0_5_elem);
    }

    Nan::DefineOwnProperty(arg_0, Nan::New<String>("AdditionalEIPs").ToLocalChecked(), arg_0_5);
    auto arg_0_6 = Nan::New<Number>(result.TimestampDelay);
    Nan::DefineOwnProperty(arg_0, Nan::New<String>("TimestampDelay").ToLocalChecked(), arg_0_6);


    //Return result
    info.GetReturnValue().Set(arg_0);
}
NAN_METHOD(NJSNetworks::ripple) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSNetworks::ripple needs 0 arguments");
    }

    //Check if parameters have correct types

    auto result = ledger::core::api::Networks::ripple();

    //Wrap result in node object
    auto arg_0 = Nan::New<Object>();
    auto arg_0_1 = Nan::New<String>(result.Identifier).ToLocalChecked();
    Nan::DefineOwnProperty(arg_0, Nan::New<String>("Identifier").ToLocalChecked(), arg_0_1);
    auto arg_0_2 = Nan::New<String>(result.MessagePrefix).ToLocalChecked();
    Nan::DefineOwnProperty(arg_0, Nan::New<String>("MessagePrefix").ToLocalChecked(), arg_0_2);
    auto arg_0_3 = Nan::New<String>("0x" + djinni::js::hex::toString(result.XPUBVersion)).ToLocalChecked();

    Nan::DefineOwnProperty(arg_0, Nan::New<String>("XPUBVersion").ToLocalChecked(), arg_0_3);
    Local<Array> arg_0_4 = Nan::New<Array>();
    for(size_t arg_0_4_id = 0; arg_0_4_id < result.AdditionalRIPs.size(); arg_0_4_id++)
    {
        auto arg_0_4_elem = Nan::New<String>(result.AdditionalRIPs[arg_0_4_id]).ToLocalChecked();
        Nan::Set(arg_0_4, (int)arg_0_4_id,arg_0_4_elem);
    }

    Nan::DefineOwnProperty(arg_0, Nan::New<String>("AdditionalRIPs").ToLocalChecked(), arg_0_4);
    auto arg_0_5 = Nan::New<Number>(result.TimestampDelay);
    Nan::DefineOwnProperty(arg_0, Nan::New<String>("TimestampDelay").ToLocalChecked(), arg_0_5);


    //Return result
    info.GetReturnValue().Set(arg_0);
}
NAN_METHOD(NJSNetworks::tezos) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSNetworks::tezos needs 0 arguments");
    }

    //Check if parameters have correct types

    auto result = ledger::core::api::Networks::tezos();

    //Wrap result in node object
    auto arg_0 = Nan::New<Object>();
    auto arg_0_1 = Nan::New<String>(result.Identifier).ToLocalChecked();
    Nan::DefineOwnProperty(arg_0, Nan::New<String>("Identifier").ToLocalChecked(), arg_0_1);
    auto arg_0_2 = Nan::New<String>(result.MessagePrefix).ToLocalChecked();
    Nan::DefineOwnProperty(arg_0, Nan::New<String>("MessagePrefix").ToLocalChecked(), arg_0_2);
    auto arg_0_3 = Nan::New<String>("0x" + djinni::js::hex::toString(result.XPUBVersion)).ToLocalChecked();

    Nan::DefineOwnProperty(arg_0, Nan::New<String>("XPUBVersion").ToLocalChecked(), arg_0_3);
    auto arg_0_4 = Nan::New<String>("0x" + djinni::js::hex::toString(result.ImplicitPrefix)).ToLocalChecked();

    Nan::DefineOwnProperty(arg_0, Nan::New<String>("ImplicitPrefix").ToLocalChecked(), arg_0_4);
    auto arg_0_5 = Nan::New<String>("0x" + djinni::js::hex::toString(result.OriginatedPrefix)).ToLocalChecked();

    Nan::DefineOwnProperty(arg_0, Nan::New<String>("OriginatedPrefix").ToLocalChecked(), arg_0_5);
    Local<Array> arg_0_6 = Nan::New<Array>();
    for(size_t arg_0_6_id = 0; arg_0_6_id < result.AdditionalTIPs.size(); arg_0_6_id++)
    {
        auto arg_0_6_elem = Nan::New<String>(result.AdditionalTIPs[arg_0_6_id]).ToLocalChecked();
        Nan::Set(arg_0_6, (int)arg_0_6_id,arg_0_6_elem);
    }

    Nan::DefineOwnProperty(arg_0, Nan::New<String>("AdditionalTIPs").ToLocalChecked(), arg_0_6);
    auto arg_0_7 = Nan::New<Number>(result.TimestampDelay);
    Nan::DefineOwnProperty(arg_0, Nan::New<String>("TimestampDelay").ToLocalChecked(), arg_0_7);


    //Return result
    info.GetReturnValue().Set(arg_0);
}

NAN_METHOD(NJSNetworks::New) {
    //Only new allowed
    if(!info.IsConstructCall())
    {
        return Nan::ThrowError("NJSNetworks function can only be called as constructor (use New)");
    }
    info.GetReturnValue().Set(info.This());
}


Nan::Persistent<ObjectTemplate> NJSNetworks::Networks_prototype;

Local<Object> NJSNetworks::wrap(const std::shared_ptr<ledger::core::api::Networks> &object) {
    Nan::EscapableHandleScope scope;
    Local<ObjectTemplate> local_prototype = Nan::New(Networks_prototype);

    Local<Object> obj;
    if(!local_prototype.IsEmpty())
    {
        obj = local_prototype->NewInstance(Nan::GetCurrentContext()).ToLocalChecked();
        djinni::js::ObjectWrapper<ledger::core::api::Networks>::Wrap(object, obj);
    }
    else
    {
        Nan::ThrowError("NJSNetworks::wrap: object template not valid");
    }
    return scope.Escape(obj);
}

NAN_METHOD(NJSNetworks::isNull) {
    auto cpp_implementation = djinni::js::ObjectWrapper<ledger::core::api::Networks>::Unwrap(info.This());
    auto isNull = !cpp_implementation ? true : false;
    return info.GetReturnValue().Set(Nan::New<Boolean>(isNull));
}

void NJSNetworks::Initialize(Local<Object> target) {
    Nan::HandleScope scope;

    Local<FunctionTemplate> func_template = Nan::New<FunctionTemplate>(NJSNetworks::New);
    Local<ObjectTemplate> objectTemplate = func_template->InstanceTemplate();
    objectTemplate->SetInternalFieldCount(1);

    func_template->SetClassName(Nan::New<String>("NJSNetworks").ToLocalChecked());

    //SetPrototypeMethod all methods
    Nan::SetPrototypeMethod(func_template,"bitcoin", bitcoin);
    Nan::SetPrototypeMethod(func_template,"cosmos", cosmos);
    Nan::SetPrototypeMethod(func_template,"ethereum", ethereum);
    Nan::SetPrototypeMethod(func_template,"ripple", ripple);
    Nan::SetPrototypeMethod(func_template,"tezos", tezos);
    Nan::SetPrototypeMethod(func_template,"isNull", isNull);
    //Set object prototype
    Networks_prototype.Reset(objectTemplate);

    //Add template to target
    Nan::Set(target, Nan::New<String>("NJSNetworks").ToLocalChecked(), Nan::GetFunction(func_template).ToLocalChecked());
}
