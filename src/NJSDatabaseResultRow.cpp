// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from database.djinni

#include "NJSDatabaseResultRow.hpp"
#include "NJSObjectWrapper.hpp"

using namespace v8;
using namespace node;
using namespace std;

bool NJSDatabaseResultRow::isNullAtPos(int32_t pos)
{
    Nan::HandleScope scope;
    //Wrap parameters
    auto arg_0 = Nan::New<Int32>(pos);
    Local<Value> args[1] = {arg_0};
    Local<Object> local_njs_impl = Nan::New<Object>(njs_impl);
    if(!local_njs_impl->IsObject())
    {
        Nan::ThrowError("NJSDatabaseResultRow::isNullAtPos fail to retrieve node implementation");
    }
    auto calling_funtion = Nan::Get(local_njs_impl,Nan::New<String>("isNullAtPos").ToLocalChecked()).ToLocalChecked();
    auto result_isNullAtPos = Nan::CallAsFunction(calling_funtion->ToObject(Nan::GetCurrentContext()).ToLocalChecked(),local_njs_impl,1,args);
    if(result_isNullAtPos.IsEmpty())
    {
        Nan::ThrowError("NJSDatabaseResultRow::isNullAtPos call failed");
    }
    auto checkedResult_isNullAtPos = result_isNullAtPos.ToLocalChecked();
    auto fResult_isNullAtPos = Nan::To<bool>(checkedResult_isNullAtPos).FromJust();
    return fResult_isNullAtPos;
}

std::string NJSDatabaseResultRow::getColumnName(int32_t pos)
{
    Nan::HandleScope scope;
    //Wrap parameters
    auto arg_0 = Nan::New<Int32>(pos);
    Local<Value> args[1] = {arg_0};
    Local<Object> local_njs_impl = Nan::New<Object>(njs_impl);
    if(!local_njs_impl->IsObject())
    {
        Nan::ThrowError("NJSDatabaseResultRow::getColumnName fail to retrieve node implementation");
    }
    auto calling_funtion = Nan::Get(local_njs_impl,Nan::New<String>("getColumnName").ToLocalChecked()).ToLocalChecked();
    auto result_getColumnName = Nan::CallAsFunction(calling_funtion->ToObject(Nan::GetCurrentContext()).ToLocalChecked(),local_njs_impl,1,args);
    if(result_getColumnName.IsEmpty())
    {
        Nan::ThrowError("NJSDatabaseResultRow::getColumnName call failed");
    }
    auto checkedResult_getColumnName = result_getColumnName.ToLocalChecked();
    Nan::Utf8String string_fResult_getColumnName(checkedResult_getColumnName->ToString(Nan::GetCurrentContext()).ToLocalChecked());
    auto fResult_getColumnName = std::string(*string_fResult_getColumnName);
    return fResult_getColumnName;
}

int16_t NJSDatabaseResultRow::getShortByPos(int32_t pos)
{
    Nan::HandleScope scope;
    //Wrap parameters
    auto arg_0 = Nan::New<Int32>(pos);
    Local<Value> args[1] = {arg_0};
    Local<Object> local_njs_impl = Nan::New<Object>(njs_impl);
    if(!local_njs_impl->IsObject())
    {
        Nan::ThrowError("NJSDatabaseResultRow::getShortByPos fail to retrieve node implementation");
    }
    auto calling_funtion = Nan::Get(local_njs_impl,Nan::New<String>("getShortByPos").ToLocalChecked()).ToLocalChecked();
    auto result_getShortByPos = Nan::CallAsFunction(calling_funtion->ToObject(Nan::GetCurrentContext()).ToLocalChecked(),local_njs_impl,1,args);
    if(result_getShortByPos.IsEmpty())
    {
        Nan::ThrowError("NJSDatabaseResultRow::getShortByPos call failed");
    }
    auto checkedResult_getShortByPos = result_getShortByPos.ToLocalChecked();
    auto fResult_getShortByPos = Nan::To<int32_t>(checkedResult_getShortByPos).FromJust();
    return fResult_getShortByPos;
}

int32_t NJSDatabaseResultRow::getIntByPos(int32_t pos)
{
    Nan::HandleScope scope;
    //Wrap parameters
    auto arg_0 = Nan::New<Int32>(pos);
    Local<Value> args[1] = {arg_0};
    Local<Object> local_njs_impl = Nan::New<Object>(njs_impl);
    if(!local_njs_impl->IsObject())
    {
        Nan::ThrowError("NJSDatabaseResultRow::getIntByPos fail to retrieve node implementation");
    }
    auto calling_funtion = Nan::Get(local_njs_impl,Nan::New<String>("getIntByPos").ToLocalChecked()).ToLocalChecked();
    auto result_getIntByPos = Nan::CallAsFunction(calling_funtion->ToObject(Nan::GetCurrentContext()).ToLocalChecked(),local_njs_impl,1,args);
    if(result_getIntByPos.IsEmpty())
    {
        Nan::ThrowError("NJSDatabaseResultRow::getIntByPos call failed");
    }
    auto checkedResult_getIntByPos = result_getIntByPos.ToLocalChecked();
    auto fResult_getIntByPos = Nan::To<int32_t>(checkedResult_getIntByPos).FromJust();
    return fResult_getIntByPos;
}

float NJSDatabaseResultRow::getFloatByPos(int32_t pos)
{
    Nan::HandleScope scope;
    //Wrap parameters
    auto arg_0 = Nan::New<Int32>(pos);
    Local<Value> args[1] = {arg_0};
    Local<Object> local_njs_impl = Nan::New<Object>(njs_impl);
    if(!local_njs_impl->IsObject())
    {
        Nan::ThrowError("NJSDatabaseResultRow::getFloatByPos fail to retrieve node implementation");
    }
    auto calling_funtion = Nan::Get(local_njs_impl,Nan::New<String>("getFloatByPos").ToLocalChecked()).ToLocalChecked();
    auto result_getFloatByPos = Nan::CallAsFunction(calling_funtion->ToObject(Nan::GetCurrentContext()).ToLocalChecked(),local_njs_impl,1,args);
    if(result_getFloatByPos.IsEmpty())
    {
        Nan::ThrowError("NJSDatabaseResultRow::getFloatByPos call failed");
    }
    auto checkedResult_getFloatByPos = result_getFloatByPos.ToLocalChecked();
    auto fResult_getFloatByPos = Nan::To<double>(checkedResult_getFloatByPos).FromJust();
    return fResult_getFloatByPos;
}

double NJSDatabaseResultRow::getDoubleByPos(int32_t pos)
{
    Nan::HandleScope scope;
    //Wrap parameters
    auto arg_0 = Nan::New<Int32>(pos);
    Local<Value> args[1] = {arg_0};
    Local<Object> local_njs_impl = Nan::New<Object>(njs_impl);
    if(!local_njs_impl->IsObject())
    {
        Nan::ThrowError("NJSDatabaseResultRow::getDoubleByPos fail to retrieve node implementation");
    }
    auto calling_funtion = Nan::Get(local_njs_impl,Nan::New<String>("getDoubleByPos").ToLocalChecked()).ToLocalChecked();
    auto result_getDoubleByPos = Nan::CallAsFunction(calling_funtion->ToObject(Nan::GetCurrentContext()).ToLocalChecked(),local_njs_impl,1,args);
    if(result_getDoubleByPos.IsEmpty())
    {
        Nan::ThrowError("NJSDatabaseResultRow::getDoubleByPos call failed");
    }
    auto checkedResult_getDoubleByPos = result_getDoubleByPos.ToLocalChecked();
    auto fResult_getDoubleByPos = Nan::To<double>(checkedResult_getDoubleByPos).FromJust();
    return fResult_getDoubleByPos;
}

int64_t NJSDatabaseResultRow::getLongByPos(int32_t pos)
{
    Nan::HandleScope scope;
    //Wrap parameters
    auto arg_0 = Nan::New<Int32>(pos);
    Local<Value> args[1] = {arg_0};
    Local<Object> local_njs_impl = Nan::New<Object>(njs_impl);
    if(!local_njs_impl->IsObject())
    {
        Nan::ThrowError("NJSDatabaseResultRow::getLongByPos fail to retrieve node implementation");
    }
    auto calling_funtion = Nan::Get(local_njs_impl,Nan::New<String>("getLongByPos").ToLocalChecked()).ToLocalChecked();
    auto result_getLongByPos = Nan::CallAsFunction(calling_funtion->ToObject(Nan::GetCurrentContext()).ToLocalChecked(),local_njs_impl,1,args);
    if(result_getLongByPos.IsEmpty())
    {
        Nan::ThrowError("NJSDatabaseResultRow::getLongByPos call failed");
    }
    auto checkedResult_getLongByPos = result_getLongByPos.ToLocalChecked();
    auto fResult_getLongByPos = Nan::To<int64_t>(checkedResult_getLongByPos).FromJust();
    return fResult_getLongByPos;
}

std::string NJSDatabaseResultRow::getStringByPos(int32_t pos)
{
    Nan::HandleScope scope;
    //Wrap parameters
    auto arg_0 = Nan::New<Int32>(pos);
    Local<Value> args[1] = {arg_0};
    Local<Object> local_njs_impl = Nan::New<Object>(njs_impl);
    if(!local_njs_impl->IsObject())
    {
        Nan::ThrowError("NJSDatabaseResultRow::getStringByPos fail to retrieve node implementation");
    }
    auto calling_funtion = Nan::Get(local_njs_impl,Nan::New<String>("getStringByPos").ToLocalChecked()).ToLocalChecked();
    auto result_getStringByPos = Nan::CallAsFunction(calling_funtion->ToObject(Nan::GetCurrentContext()).ToLocalChecked(),local_njs_impl,1,args);
    if(result_getStringByPos.IsEmpty())
    {
        Nan::ThrowError("NJSDatabaseResultRow::getStringByPos call failed");
    }
    auto checkedResult_getStringByPos = result_getStringByPos.ToLocalChecked();
    Nan::Utf8String string_fResult_getStringByPos(checkedResult_getStringByPos->ToString(Nan::GetCurrentContext()).ToLocalChecked());
    auto fResult_getStringByPos = std::string(*string_fResult_getStringByPos);
    return fResult_getStringByPos;
}

std::shared_ptr<DatabaseBlob> NJSDatabaseResultRow::getBlobByPos(int32_t pos)
{
    Nan::HandleScope scope;
    //Wrap parameters
    auto arg_0 = Nan::New<Int32>(pos);
    Local<Value> args[1] = {arg_0};
    Local<Object> local_njs_impl = Nan::New<Object>(njs_impl);
    if(!local_njs_impl->IsObject())
    {
        Nan::ThrowError("NJSDatabaseResultRow::getBlobByPos fail to retrieve node implementation");
    }
    auto calling_funtion = Nan::Get(local_njs_impl,Nan::New<String>("getBlobByPos").ToLocalChecked()).ToLocalChecked();
    auto result_getBlobByPos = Nan::CallAsFunction(calling_funtion->ToObject(Nan::GetCurrentContext()).ToLocalChecked(),local_njs_impl,1,args);
    if(result_getBlobByPos.IsEmpty())
    {
        Nan::ThrowError("NJSDatabaseResultRow::getBlobByPos call failed");
    }
    auto checkedResult_getBlobByPos = result_getBlobByPos.ToLocalChecked();
    Local<Object> njs_fResult_getBlobByPos = checkedResult_getBlobByPos->ToObject(Nan::GetCurrentContext()).ToLocalChecked();
    auto fResult_getBlobByPos = djinni::js::ObjectWrapper<ledger::core::api::DatabaseBlob>::Unwrap(njs_fResult_getBlobByPos);

    return fResult_getBlobByPos;
}

NAN_METHOD(NJSDatabaseResultRow::New) {
    //Only new allowed
    if(!info.IsConstructCall())
    {
        return Nan::ThrowError("NJSDatabaseResultRow function can only be called as constructor (use New)");
    }

    if(!info[0]->IsObject())
    {
        return Nan::ThrowError("NJSDatabaseResultRow::New requires an implementation from node");
    }
    auto node_instance = std::make_shared<NJSDatabaseResultRow>(info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked());
    djinni::js::ObjectWrapper<NJSDatabaseResultRow>::Wrap(node_instance, info.This());
    info.GetReturnValue().Set(info.This());
}


Nan::Persistent<ObjectTemplate> NJSDatabaseResultRow::DatabaseResultRow_prototype;

Local<Object> NJSDatabaseResultRow::wrap(const std::shared_ptr<ledger::core::api::DatabaseResultRow> &object) {
    Nan::EscapableHandleScope scope;
    Local<ObjectTemplate> local_prototype = Nan::New(DatabaseResultRow_prototype);

    Local<Object> obj;
    if(!local_prototype.IsEmpty())
    {
        obj = local_prototype->NewInstance(Nan::GetCurrentContext()).ToLocalChecked();
        djinni::js::ObjectWrapper<ledger::core::api::DatabaseResultRow>::Wrap(object, obj);
    }
    else
    {
        Nan::ThrowError("NJSDatabaseResultRow::wrap: object template not valid");
    }
    return scope.Escape(obj);
}

void NJSDatabaseResultRow::Initialize(Local<Object> target) {
    Nan::HandleScope scope;

    Local<FunctionTemplate> func_template = Nan::New<FunctionTemplate>(NJSDatabaseResultRow::New);
    Local<ObjectTemplate> objectTemplate = func_template->InstanceTemplate();
    objectTemplate->SetInternalFieldCount(1);

    func_template->SetClassName(Nan::New<String>("NJSDatabaseResultRow").ToLocalChecked());
    Nan::SetPrototypeMethod(func_template,"New", New);
    //Set object prototype
    DatabaseResultRow_prototype.Reset(objectTemplate);

    //Add template to target
    target->Set(Nan::New<String>("NJSDatabaseResultRow").ToLocalChecked(), func_template->GetFunction(Nan::GetCurrentContext()).ToLocalChecked());
}
