// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from wallet.djinni

#include "NJSDerivationPathCpp.hpp"
#include "NJSObjectWrapper.hpp"

using namespace v8;
using namespace node;
using namespace std;

NAN_METHOD(NJSDerivationPath::getDepth) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSDerivationPath::getDepth needs 0 arguments");
    }

    //Check if parameters have correct types

    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::DerivationPath>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSDerivationPath::getDepth : implementation of DerivationPath is not valid");
    }

    auto result = cpp_impl->getDepth();

    //Wrap result in node object
    auto arg_0 = Nan::New<Int32>(result);

    //Return result
    info.GetReturnValue().Set(arg_0);
}
NAN_METHOD(NJSDerivationPath::getChildNum) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSDerivationPath::getChildNum needs 1 arguments");
    }

    //Check if parameters have correct types
    auto arg_0 = Nan::To<int32_t>(info[0]).FromJust();

    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::DerivationPath>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSDerivationPath::getChildNum : implementation of DerivationPath is not valid");
    }

    auto result = cpp_impl->getChildNum(arg_0);

    //Wrap result in node object
    auto arg_1 = Nan::New<Int32>(result);

    //Return result
    info.GetReturnValue().Set(arg_1);
}
NAN_METHOD(NJSDerivationPath::getUnhardenedChildNum) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSDerivationPath::getUnhardenedChildNum needs 1 arguments");
    }

    //Check if parameters have correct types
    auto arg_0 = Nan::To<int32_t>(info[0]).FromJust();

    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::DerivationPath>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSDerivationPath::getUnhardenedChildNum : implementation of DerivationPath is not valid");
    }

    auto result = cpp_impl->getUnhardenedChildNum(arg_0);

    //Wrap result in node object
    auto arg_1 = Nan::New<Int32>(result);

    //Return result
    info.GetReturnValue().Set(arg_1);
}
NAN_METHOD(NJSDerivationPath::isHardened) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSDerivationPath::isHardened needs 1 arguments");
    }

    //Check if parameters have correct types
    auto arg_0 = Nan::To<int32_t>(info[0]).FromJust();

    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::DerivationPath>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSDerivationPath::isHardened : implementation of DerivationPath is not valid");
    }

    auto result = cpp_impl->isHardened(arg_0);

    //Wrap result in node object
    auto arg_1 = Nan::New<Boolean>(result);

    //Return result
    info.GetReturnValue().Set(arg_1);
}
NAN_METHOD(NJSDerivationPath::toString) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSDerivationPath::toString needs 0 arguments");
    }

    //Check if parameters have correct types

    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::DerivationPath>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSDerivationPath::toString : implementation of DerivationPath is not valid");
    }

    auto result = cpp_impl->toString();

    //Wrap result in node object
    auto arg_0 = Nan::New<String>(result).ToLocalChecked();

    //Return result
    info.GetReturnValue().Set(arg_0);
}
NAN_METHOD(NJSDerivationPath::getParent) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSDerivationPath::getParent needs 0 arguments");
    }

    //Check if parameters have correct types

    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::DerivationPath>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSDerivationPath::getParent : implementation of DerivationPath is not valid");
    }

    auto result = cpp_impl->getParent();

    //Wrap result in node object
    auto arg_0 = NJSDerivationPath::wrap(result);


    //Return result
    info.GetReturnValue().Set(arg_0);
}
NAN_METHOD(NJSDerivationPath::toArray) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSDerivationPath::toArray needs 0 arguments");
    }

    //Check if parameters have correct types

    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::DerivationPath>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSDerivationPath::toArray : implementation of DerivationPath is not valid");
    }

    auto result = cpp_impl->toArray();

    //Wrap result in node object
    Local<Array> arg_0 = Nan::New<Array>();
    for(size_t arg_0_id = 0; arg_0_id < result.size(); arg_0_id++)
    {
        auto arg_0_elem = Nan::New<Int32>(result[arg_0_id]);
        arg_0->Set((int)arg_0_id,arg_0_elem);
    }


    //Return result
    info.GetReturnValue().Set(arg_0);
}
NAN_METHOD(NJSDerivationPath::parse) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSDerivationPath::parse needs 1 arguments");
    }

    //Check if parameters have correct types
    Nan::Utf8String string_arg_0(info[0]->ToString(Nan::GetCurrentContext()).ToLocalChecked());
    auto arg_0 = std::string(*string_arg_0);

    auto result = ledger::core::api::DerivationPath::parse(arg_0);

    //Wrap result in node object
    auto arg_1 = NJSDerivationPath::wrap(result);


    //Return result
    info.GetReturnValue().Set(arg_1);
}

NAN_METHOD(NJSDerivationPath::New) {
    //Only new allowed
    if(!info.IsConstructCall())
    {
        return Nan::ThrowError("NJSDerivationPath function can only be called as constructor (use New)");
    }

    //Check if NJSDerivationPath::New called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSDerivationPath::New needs same number of arguments as ledger::core::api::DerivationPath::parse method");
    }

    //Unwrap objects to get C++ classes
    Nan::Utf8String string_arg_0(info[0]->ToString(Nan::GetCurrentContext()).ToLocalChecked());
    auto arg_0 = std::string(*string_arg_0);

    //Call factory
    auto cpp_instance = ledger::core::api::DerivationPath::parse(arg_0);
    djinni::js::ObjectWrapper<ledger::core::api::DerivationPath>::Wrap(cpp_instance, info.This());
    info.GetReturnValue().Set(info.This());
}


Nan::Persistent<ObjectTemplate> NJSDerivationPath::DerivationPath_prototype;

Local<Object> NJSDerivationPath::wrap(const std::shared_ptr<ledger::core::api::DerivationPath> &object) {
    Nan::EscapableHandleScope scope;
    Local<ObjectTemplate> local_prototype = Nan::New(DerivationPath_prototype);

    Local<Object> obj;
    if(!local_prototype.IsEmpty())
    {
        obj = local_prototype->NewInstance(Nan::GetCurrentContext()).ToLocalChecked();
        djinni::js::ObjectWrapper<ledger::core::api::DerivationPath>::Wrap(object, obj);
    }
    else
    {
        Nan::ThrowError("NJSDerivationPath::wrap: object template not valid");
    }
    return scope.Escape(obj);
}

NAN_METHOD(NJSDerivationPath::isNull) {
    auto cpp_implementation = djinni::js::ObjectWrapper<ledger::core::api::DerivationPath>::Unwrap(info.This());
    auto isNull = !cpp_implementation ? true : false;
    return info.GetReturnValue().Set(Nan::New<Boolean>(isNull));
}

void NJSDerivationPath::Initialize(Local<Object> target) {
    Nan::HandleScope scope;

    Local<FunctionTemplate> func_template = Nan::New<FunctionTemplate>(NJSDerivationPath::New);
    Local<ObjectTemplate> objectTemplate = func_template->InstanceTemplate();
    objectTemplate->SetInternalFieldCount(1);

    func_template->SetClassName(Nan::New<String>("NJSDerivationPath").ToLocalChecked());

    //SetPrototypeMethod all methods
    Nan::SetPrototypeMethod(func_template,"getDepth", getDepth);
    Nan::SetPrototypeMethod(func_template,"getChildNum", getChildNum);
    Nan::SetPrototypeMethod(func_template,"getUnhardenedChildNum", getUnhardenedChildNum);
    Nan::SetPrototypeMethod(func_template,"isHardened", isHardened);
    Nan::SetPrototypeMethod(func_template,"toString", toString);
    Nan::SetPrototypeMethod(func_template,"getParent", getParent);
    Nan::SetPrototypeMethod(func_template,"toArray", toArray);
    Nan::SetPrototypeMethod(func_template,"parse", parse);
    Nan::SetPrototypeMethod(func_template,"isNull", isNull);
    //Set object prototype
    DerivationPath_prototype.Reset(objectTemplate);

    //Add template to target
    target->Set(Nan::New<String>("NJSDerivationPath").ToLocalChecked(), func_template->GetFunction(Nan::GetCurrentContext()).ToLocalChecked());
}
