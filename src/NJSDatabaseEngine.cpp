// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from database.djinni

#include "NJSDatabaseEngine.hpp"
#include "NJSObjectWrapper.hpp"

using namespace v8;
using namespace node;
using namespace std;

std::shared_ptr<DatabaseConnectionPool> NJSDatabaseEngine::connect(const std::string & databaseName)
{
    Nan::HandleScope scope;
    //Wrap parameters
    auto arg_0 = Nan::New<String>(databaseName).ToLocalChecked();
    Local<Value> args[1] = {arg_0};
    Local<Object> local_njs_impl = Nan::New<Object>(njs_impl);
    if(!local_njs_impl->IsObject())
    {
        Nan::ThrowError("NJSDatabaseEngine::connect fail to retrieve node implementation");
    }
    auto calling_funtion = Nan::Get(local_njs_impl,Nan::New<String>("connect").ToLocalChecked()).ToLocalChecked();
    auto result_connect = Nan::CallAsFunction(calling_funtion->ToObject(Nan::GetCurrentContext()).ToLocalChecked(),local_njs_impl,1,args);
    if(result_connect.IsEmpty())
    {
        Nan::ThrowError("NJSDatabaseEngine::connect call failed");
    }
    auto checkedResult_connect = result_connect.ToLocalChecked();
    Local<Object> njs_fResult_connect = checkedResult_connect->ToObject(Nan::GetCurrentContext()).ToLocalChecked();
    auto fResult_connect = djinni::js::ObjectWrapper<ledger::core::api::DatabaseConnectionPool>::Unwrap(njs_fResult_connect);

    return fResult_connect;
}

int32_t NJSDatabaseEngine::getPoolSize()
{
    Nan::HandleScope scope;
    //Wrap parameters
    Local<Value> args[1];
    Local<Object> local_njs_impl = Nan::New<Object>(njs_impl);
    if(!local_njs_impl->IsObject())
    {
        Nan::ThrowError("NJSDatabaseEngine::getPoolSize fail to retrieve node implementation");
    }
    auto calling_funtion = Nan::Get(local_njs_impl,Nan::New<String>("getPoolSize").ToLocalChecked()).ToLocalChecked();
    auto result_getPoolSize = Nan::CallAsFunction(calling_funtion->ToObject(Nan::GetCurrentContext()).ToLocalChecked(),local_njs_impl,0,args);
    if(result_getPoolSize.IsEmpty())
    {
        Nan::ThrowError("NJSDatabaseEngine::getPoolSize call failed");
    }
    auto checkedResult_getPoolSize = result_getPoolSize.ToLocalChecked();
    auto fResult_getPoolSize = Nan::To<int32_t>(checkedResult_getPoolSize).FromJust();
    return fResult_getPoolSize;
}

NAN_METHOD(NJSDatabaseEngine::New) {
    //Only new allowed
    if(!info.IsConstructCall())
    {
        return Nan::ThrowError("NJSDatabaseEngine function can only be called as constructor (use New)");
    }

    if(!info[0]->IsObject())
    {
        return Nan::ThrowError("NJSDatabaseEngine::New requires an implementation from node");
    }
    auto node_instance = std::make_shared<NJSDatabaseEngine>(info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked());
    djinni::js::ObjectWrapper<NJSDatabaseEngine>::Wrap(node_instance, info.This());
    info.GetReturnValue().Set(info.This());
}


Nan::Persistent<ObjectTemplate> NJSDatabaseEngine::DatabaseEngine_prototype;

Local<Object> NJSDatabaseEngine::wrap(const std::shared_ptr<ledger::core::api::DatabaseEngine> &object) {
    Nan::EscapableHandleScope scope;
    Local<ObjectTemplate> local_prototype = Nan::New(DatabaseEngine_prototype);

    Local<Object> obj;
    if(!local_prototype.IsEmpty())
    {
        obj = local_prototype->NewInstance(Nan::GetCurrentContext()).ToLocalChecked();
        djinni::js::ObjectWrapper<ledger::core::api::DatabaseEngine>::Wrap(object, obj);
    }
    else
    {
        Nan::ThrowError("NJSDatabaseEngine::wrap: object template not valid");
    }
    return scope.Escape(obj);
}

void NJSDatabaseEngine::Initialize(Local<Object> target) {
    Nan::HandleScope scope;

    Local<FunctionTemplate> func_template = Nan::New<FunctionTemplate>(NJSDatabaseEngine::New);
    Local<ObjectTemplate> objectTemplate = func_template->InstanceTemplate();
    objectTemplate->SetInternalFieldCount(1);

    func_template->SetClassName(Nan::New<String>("NJSDatabaseEngine").ToLocalChecked());
    Nan::SetPrototypeMethod(func_template,"New", New);
    //Set object prototype
    DatabaseEngine_prototype.Reset(objectTemplate);

    //Add template to target
    target->Set(Nan::New<String>("NJSDatabaseEngine").ToLocalChecked(), func_template->GetFunction(Nan::GetCurrentContext()).ToLocalChecked());
}
