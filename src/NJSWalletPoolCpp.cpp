// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from wallet_pool.djinni

#include "NJSWalletPoolCpp.hpp"
#include "NJSObjectWrapper.hpp"
#include "NJSHexUtils.hpp"

using namespace v8;
using namespace node;
using namespace std;

NAN_METHOD(NJSWalletPool::newInstance) {

    //Check if method called with right number of arguments
    if(info.Length() != 10)
    {
        return Nan::ThrowError("NJSWalletPool::newInstance needs 10 arguments");
    }

    //Check if parameters have correct types
    Nan::Utf8String string_arg_0(info[0]->ToString(Nan::GetCurrentContext()).ToLocalChecked());
    auto arg_0 = std::string(*string_arg_0);
    Nan::Utf8String string_arg_1(info[1]->ToString(Nan::GetCurrentContext()).ToLocalChecked());
    auto arg_1 = std::string(*string_arg_1);
    Local<Object> njs_arg_2 = info[2]->ToObject(Nan::GetCurrentContext()).ToLocalChecked();
    auto arg_2 = djinni::js::ObjectWrapper<ledger::core::api::HttpClient>::Unwrap(njs_arg_2);

    Local<Object> njs_arg_3 = info[3]->ToObject(Nan::GetCurrentContext()).ToLocalChecked();
    auto arg_3 = djinni::js::ObjectWrapper<ledger::core::api::WebSocketClient>::Unwrap(njs_arg_3);

    Local<Object> njs_arg_4 = info[4]->ToObject(Nan::GetCurrentContext()).ToLocalChecked();
    auto arg_4 = djinni::js::ObjectWrapper<ledger::core::api::PathResolver>::Unwrap(njs_arg_4);

    Local<Object> njs_arg_5 = info[5]->ToObject(Nan::GetCurrentContext()).ToLocalChecked();
    auto arg_5 = djinni::js::ObjectWrapper<ledger::core::api::LogPrinter>::Unwrap(njs_arg_5);

    Local<Object> njs_arg_6 = info[6]->ToObject(Nan::GetCurrentContext()).ToLocalChecked();
    auto arg_6 = djinni::js::ObjectWrapper<ledger::core::api::ThreadDispatcher>::Unwrap(njs_arg_6);

    Local<Object> njs_arg_7 = info[7]->ToObject(Nan::GetCurrentContext()).ToLocalChecked();
    auto arg_7 = djinni::js::ObjectWrapper<ledger::core::api::RandomNumberGenerator>::Unwrap(njs_arg_7);

    Local<Object> njs_arg_8 = info[8]->ToObject(Nan::GetCurrentContext()).ToLocalChecked();
    auto arg_8 = djinni::js::ObjectWrapper<ledger::core::api::DatabaseBackend>::Unwrap(njs_arg_8);
    if(!arg_8)
    {
        return Nan::ThrowError("NodeJs Object to NJSDatabaseBackend failed");
    }

    Local<Object> njs_arg_9 = info[9]->ToObject(Nan::GetCurrentContext()).ToLocalChecked();
    auto arg_9 = djinni::js::ObjectWrapper<ledger::core::api::DynamicObject>::Unwrap(njs_arg_9);
    if(!arg_9)
    {
        return Nan::ThrowError("NodeJs Object to NJSDynamicObject failed");
    }


    auto result = ledger::core::api::WalletPool::newInstance(arg_0,arg_1,arg_2,arg_3,arg_4,arg_5,arg_6,arg_7,arg_8,arg_9);

    //Wrap result in node object
    auto arg_10 = NJSWalletPool::wrap(result);


    //Return result
    info.GetReturnValue().Set(arg_10);
}
NAN_METHOD(NJSWalletPool::getLogger) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSWalletPool::getLogger needs 0 arguments");
    }

    //Check if parameters have correct types

    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::WalletPool>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSWalletPool::getLogger : implementation of WalletPool is not valid");
    }

    auto result = cpp_impl->getLogger();

    //Wrap result in node object
    auto arg_0 = NJSLogger::wrap(result);


    //Return result
    info.GetReturnValue().Set(arg_0);
}
NAN_METHOD(NJSWalletPool::getName) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSWalletPool::getName needs 0 arguments");
    }

    //Check if parameters have correct types

    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::WalletPool>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSWalletPool::getName : implementation of WalletPool is not valid");
    }

    auto result = cpp_impl->getName();

    //Wrap result in node object
    auto arg_0 = Nan::New<String>(result).ToLocalChecked();

    //Return result
    info.GetReturnValue().Set(arg_0);
}
NAN_METHOD(NJSWalletPool::getPreferences) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSWalletPool::getPreferences needs 0 arguments");
    }

    //Check if parameters have correct types

    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::WalletPool>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSWalletPool::getPreferences : implementation of WalletPool is not valid");
    }

    auto result = cpp_impl->getPreferences();

    //Wrap result in node object
    auto arg_0 = NJSPreferences::wrap(result);


    //Return result
    info.GetReturnValue().Set(arg_0);
}
NAN_METHOD(NJSWalletPool::getWalletCount) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSWalletPool::getWalletCount needs 0 arguments");
    }

    //Check if parameters have correct types

    //Create promise and set it into Callback
    auto arg_0_resolver = v8::Promise::Resolver::New(Nan::GetCurrentContext()).ToLocalChecked();
    NJSI32Callback *njs_ptr_arg_0 = new NJSI32Callback(arg_0_resolver);
    std::shared_ptr<NJSI32Callback> arg_0(njs_ptr_arg_0);


    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::WalletPool>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSWalletPool::getWalletCount : implementation of WalletPool is not valid");
    }
    cpp_impl->getWalletCount(arg_0);
    info.GetReturnValue().Set(arg_0_resolver->GetPromise());
}
NAN_METHOD(NJSWalletPool::getWallets) {

    //Check if method called with right number of arguments
    if(info.Length() != 2)
    {
        return Nan::ThrowError("NJSWalletPool::getWallets needs 2 arguments");
    }

    //Check if parameters have correct types
    auto arg_0 = Nan::To<int32_t>(info[0]).FromJust();
    auto arg_1 = Nan::To<int32_t>(info[1]).FromJust();

    //Create promise and set it into Callback
    auto arg_2_resolver = v8::Promise::Resolver::New(Nan::GetCurrentContext()).ToLocalChecked();
    NJSWalletListCallback *njs_ptr_arg_2 = new NJSWalletListCallback(arg_2_resolver);
    std::shared_ptr<NJSWalletListCallback> arg_2(njs_ptr_arg_2);


    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::WalletPool>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSWalletPool::getWallets : implementation of WalletPool is not valid");
    }
    cpp_impl->getWallets(arg_0,arg_1,arg_2);
    info.GetReturnValue().Set(arg_2_resolver->GetPromise());
}
NAN_METHOD(NJSWalletPool::getWallet) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSWalletPool::getWallet needs 1 arguments");
    }

    //Check if parameters have correct types
    Nan::Utf8String string_arg_0(info[0]->ToString(Nan::GetCurrentContext()).ToLocalChecked());
    auto arg_0 = std::string(*string_arg_0);

    //Create promise and set it into Callback
    auto arg_1_resolver = v8::Promise::Resolver::New(Nan::GetCurrentContext()).ToLocalChecked();
    NJSWalletCallback *njs_ptr_arg_1 = new NJSWalletCallback(arg_1_resolver);
    std::shared_ptr<NJSWalletCallback> arg_1(njs_ptr_arg_1);


    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::WalletPool>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSWalletPool::getWallet : implementation of WalletPool is not valid");
    }
    cpp_impl->getWallet(arg_0,arg_1);
    info.GetReturnValue().Set(arg_1_resolver->GetPromise());
}
NAN_METHOD(NJSWalletPool::updateWalletConfig) {

    //Check if method called with right number of arguments
    if(info.Length() != 2)
    {
        return Nan::ThrowError("NJSWalletPool::updateWalletConfig needs 2 arguments");
    }

    //Check if parameters have correct types
    Nan::Utf8String string_arg_0(info[0]->ToString(Nan::GetCurrentContext()).ToLocalChecked());
    auto arg_0 = std::string(*string_arg_0);
    Local<Object> njs_arg_1 = info[1]->ToObject(Nan::GetCurrentContext()).ToLocalChecked();
    auto arg_1 = djinni::js::ObjectWrapper<ledger::core::api::DynamicObject>::Unwrap(njs_arg_1);
    if(!arg_1)
    {
        return Nan::ThrowError("NodeJs Object to NJSDynamicObject failed");
    }


    //Create promise and set it into Callback
    auto arg_2_resolver = v8::Promise::Resolver::New(Nan::GetCurrentContext()).ToLocalChecked();
    NJSErrorCodeCallback *njs_ptr_arg_2 = new NJSErrorCodeCallback(arg_2_resolver);
    std::shared_ptr<NJSErrorCodeCallback> arg_2(njs_ptr_arg_2);


    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::WalletPool>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSWalletPool::updateWalletConfig : implementation of WalletPool is not valid");
    }
    cpp_impl->updateWalletConfig(arg_0,arg_1,arg_2);
    info.GetReturnValue().Set(arg_2_resolver->GetPromise());
}
NAN_METHOD(NJSWalletPool::createWallet) {

    //Check if method called with right number of arguments
    if(info.Length() != 3)
    {
        return Nan::ThrowError("NJSWalletPool::createWallet needs 3 arguments");
    }

    //Check if parameters have correct types
    Nan::Utf8String string_arg_0(info[0]->ToString(Nan::GetCurrentContext()).ToLocalChecked());
    auto arg_0 = std::string(*string_arg_0);

    auto field_arg_1_1 = Nan::Get(info[1]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("walletType").ToLocalChecked()).ToLocalChecked();
    auto arg_1_1 = (ledger::core::api::WalletType)Nan::To<int>(field_arg_1_1).FromJust();

    auto field_arg_1_2 = Nan::Get(info[1]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("name").ToLocalChecked()).ToLocalChecked();
    Nan::Utf8String string_arg_1_2(field_arg_1_2->ToString(Nan::GetCurrentContext()).ToLocalChecked());
    auto arg_1_2 = std::string(*string_arg_1_2);

    auto field_arg_1_3 = Nan::Get(info[1]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("bip44CoinType").ToLocalChecked()).ToLocalChecked();
    auto arg_1_3 = Nan::To<int32_t>(field_arg_1_3).FromJust();

    auto field_arg_1_4 = Nan::Get(info[1]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("paymentUriScheme").ToLocalChecked()).ToLocalChecked();
    Nan::Utf8String string_arg_1_4(field_arg_1_4->ToString(Nan::GetCurrentContext()).ToLocalChecked());
    auto arg_1_4 = std::string(*string_arg_1_4);

    auto field_arg_1_5 = Nan::Get(info[1]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("units").ToLocalChecked()).ToLocalChecked();
    vector<CurrencyUnit> arg_1_5;
    Local<Array> arg_1_5_container = Local<Array>::Cast(field_arg_1_5);
    for(uint32_t arg_1_5_id = 0; arg_1_5_id < arg_1_5_container->Length(); arg_1_5_id++)
    {
        if(arg_1_5_container->Get(Nan::GetCurrentContext(), arg_1_5_id).ToLocalChecked()->IsObject())
        {

            auto field_arg_1_5_elem_1 = Nan::Get(arg_1_5_container->Get(Nan::GetCurrentContext(), arg_1_5_id).ToLocalChecked()->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("name").ToLocalChecked()).ToLocalChecked();
            Nan::Utf8String string_arg_1_5_elem_1(field_arg_1_5_elem_1->ToString(Nan::GetCurrentContext()).ToLocalChecked());
            auto arg_1_5_elem_1 = std::string(*string_arg_1_5_elem_1);

            auto field_arg_1_5_elem_2 = Nan::Get(arg_1_5_container->Get(Nan::GetCurrentContext(), arg_1_5_id).ToLocalChecked()->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("symbol").ToLocalChecked()).ToLocalChecked();
            Nan::Utf8String string_arg_1_5_elem_2(field_arg_1_5_elem_2->ToString(Nan::GetCurrentContext()).ToLocalChecked());
            auto arg_1_5_elem_2 = std::string(*string_arg_1_5_elem_2);

            auto field_arg_1_5_elem_3 = Nan::Get(arg_1_5_container->Get(Nan::GetCurrentContext(), arg_1_5_id).ToLocalChecked()->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("code").ToLocalChecked()).ToLocalChecked();
            Nan::Utf8String string_arg_1_5_elem_3(field_arg_1_5_elem_3->ToString(Nan::GetCurrentContext()).ToLocalChecked());
            auto arg_1_5_elem_3 = std::string(*string_arg_1_5_elem_3);

            auto field_arg_1_5_elem_4 = Nan::Get(arg_1_5_container->Get(Nan::GetCurrentContext(), arg_1_5_id).ToLocalChecked()->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("numberOfDecimal").ToLocalChecked()).ToLocalChecked();
            auto arg_1_5_elem_4 = Nan::To<int32_t>(field_arg_1_5_elem_4).FromJust();
            CurrencyUnit arg_1_5_elem(arg_1_5_elem_1, arg_1_5_elem_2, arg_1_5_elem_3, arg_1_5_elem_4);

            arg_1_5.emplace_back(arg_1_5_elem);
        }
    }


    auto field_arg_1_6 = Nan::Get(info[1]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("bitcoinLikeNetworkParameters").ToLocalChecked()).ToLocalChecked();
    auto arg_1_6 = std::experimental::optional<BitcoinLikeNetworkParameters>();
    if(!field_arg_1_6->IsNull() && !field_arg_1_6->IsUndefined())
    {

        auto field_opt_arg_1_6_1 = Nan::Get(field_arg_1_6->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("Identifier").ToLocalChecked()).ToLocalChecked();
        Nan::Utf8String string_opt_arg_1_6_1(field_opt_arg_1_6_1->ToString(Nan::GetCurrentContext()).ToLocalChecked());
        auto opt_arg_1_6_1 = std::string(*string_opt_arg_1_6_1);

        auto field_opt_arg_1_6_2 = Nan::Get(field_arg_1_6->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("P2PKHVersion").ToLocalChecked()).ToLocalChecked();
        if(!field_opt_arg_1_6_2->IsString())
        {
            Nan::ThrowError("field_opt_arg_1_6_2 should be a hexadecimal string.");
        }
        std::vector<uint8_t> opt_arg_1_6_2;
        Nan::Utf8String str_opt_arg_1_6_2(field_opt_arg_1_6_2);
        std::string string_opt_arg_1_6_2(*str_opt_arg_1_6_2, str_opt_arg_1_6_2.length());
        if (string_opt_arg_1_6_2.rfind("0x", 0) == 0)
        {
            opt_arg_1_6_2 = djinni::js::hex::toByteArray(string_opt_arg_1_6_2.substr(2));
        }
        else
        {
            opt_arg_1_6_2 = std::vector<uint8_t>(string_opt_arg_1_6_2.cbegin(), string_opt_arg_1_6_2.cend());
        }


        auto field_opt_arg_1_6_3 = Nan::Get(field_arg_1_6->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("P2SHVersion").ToLocalChecked()).ToLocalChecked();
        if(!field_opt_arg_1_6_3->IsString())
        {
            Nan::ThrowError("field_opt_arg_1_6_3 should be a hexadecimal string.");
        }
        std::vector<uint8_t> opt_arg_1_6_3;
        Nan::Utf8String str_opt_arg_1_6_3(field_opt_arg_1_6_3);
        std::string string_opt_arg_1_6_3(*str_opt_arg_1_6_3, str_opt_arg_1_6_3.length());
        if (string_opt_arg_1_6_3.rfind("0x", 0) == 0)
        {
            opt_arg_1_6_3 = djinni::js::hex::toByteArray(string_opt_arg_1_6_3.substr(2));
        }
        else
        {
            opt_arg_1_6_3 = std::vector<uint8_t>(string_opt_arg_1_6_3.cbegin(), string_opt_arg_1_6_3.cend());
        }


        auto field_opt_arg_1_6_4 = Nan::Get(field_arg_1_6->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("XPUBVersion").ToLocalChecked()).ToLocalChecked();
        if(!field_opt_arg_1_6_4->IsString())
        {
            Nan::ThrowError("field_opt_arg_1_6_4 should be a hexadecimal string.");
        }
        std::vector<uint8_t> opt_arg_1_6_4;
        Nan::Utf8String str_opt_arg_1_6_4(field_opt_arg_1_6_4);
        std::string string_opt_arg_1_6_4(*str_opt_arg_1_6_4, str_opt_arg_1_6_4.length());
        if (string_opt_arg_1_6_4.rfind("0x", 0) == 0)
        {
            opt_arg_1_6_4 = djinni::js::hex::toByteArray(string_opt_arg_1_6_4.substr(2));
        }
        else
        {
            opt_arg_1_6_4 = std::vector<uint8_t>(string_opt_arg_1_6_4.cbegin(), string_opt_arg_1_6_4.cend());
        }


        auto field_opt_arg_1_6_5 = Nan::Get(field_arg_1_6->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("FeePolicy").ToLocalChecked()).ToLocalChecked();
        auto opt_arg_1_6_5 = (ledger::core::api::BitcoinLikeFeePolicy)Nan::To<int>(field_opt_arg_1_6_5).FromJust();

        auto field_opt_arg_1_6_6 = Nan::Get(field_arg_1_6->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("DustAmount").ToLocalChecked()).ToLocalChecked();
        auto opt_arg_1_6_6 = Nan::To<int64_t>(field_opt_arg_1_6_6).FromJust();

        auto field_opt_arg_1_6_7 = Nan::Get(field_arg_1_6->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("MessagePrefix").ToLocalChecked()).ToLocalChecked();
        Nan::Utf8String string_opt_arg_1_6_7(field_opt_arg_1_6_7->ToString(Nan::GetCurrentContext()).ToLocalChecked());
        auto opt_arg_1_6_7 = std::string(*string_opt_arg_1_6_7);

        auto field_opt_arg_1_6_8 = Nan::Get(field_arg_1_6->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("UsesTimestampedTransaction").ToLocalChecked()).ToLocalChecked();
        auto opt_arg_1_6_8 = Nan::To<bool>(field_opt_arg_1_6_8).FromJust();

        auto field_opt_arg_1_6_9 = Nan::Get(field_arg_1_6->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("TimestampDelay").ToLocalChecked()).ToLocalChecked();
        auto opt_arg_1_6_9 = Nan::To<int64_t>(field_opt_arg_1_6_9).FromJust();

        auto field_opt_arg_1_6_10 = Nan::Get(field_arg_1_6->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("SigHash").ToLocalChecked()).ToLocalChecked();
        if(!field_opt_arg_1_6_10->IsString())
        {
            Nan::ThrowError("field_opt_arg_1_6_10 should be a hexadecimal string.");
        }
        std::vector<uint8_t> opt_arg_1_6_10;
        Nan::Utf8String str_opt_arg_1_6_10(field_opt_arg_1_6_10);
        std::string string_opt_arg_1_6_10(*str_opt_arg_1_6_10, str_opt_arg_1_6_10.length());
        if (string_opt_arg_1_6_10.rfind("0x", 0) == 0)
        {
            opt_arg_1_6_10 = djinni::js::hex::toByteArray(string_opt_arg_1_6_10.substr(2));
        }
        else
        {
            opt_arg_1_6_10 = std::vector<uint8_t>(string_opt_arg_1_6_10.cbegin(), string_opt_arg_1_6_10.cend());
        }


        auto field_opt_arg_1_6_11 = Nan::Get(field_arg_1_6->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("AdditionalBIPs").ToLocalChecked()).ToLocalChecked();
        vector<std::string> opt_arg_1_6_11;
        Local<Array> opt_arg_1_6_11_container = Local<Array>::Cast(field_opt_arg_1_6_11);
        for(uint32_t opt_arg_1_6_11_id = 0; opt_arg_1_6_11_id < opt_arg_1_6_11_container->Length(); opt_arg_1_6_11_id++)
        {
            if(opt_arg_1_6_11_container->Get(Nan::GetCurrentContext(), opt_arg_1_6_11_id).ToLocalChecked()->IsString())
            {
                Nan::Utf8String string_opt_arg_1_6_11_elem(opt_arg_1_6_11_container->Get(Nan::GetCurrentContext(), opt_arg_1_6_11_id).ToLocalChecked()->ToString(Nan::GetCurrentContext()).ToLocalChecked());
                auto opt_arg_1_6_11_elem = std::string(*string_opt_arg_1_6_11_elem);
                opt_arg_1_6_11.emplace_back(opt_arg_1_6_11_elem);
            }
        }

        BitcoinLikeNetworkParameters opt_arg_1_6(opt_arg_1_6_1, opt_arg_1_6_2, opt_arg_1_6_3, opt_arg_1_6_4, opt_arg_1_6_5, opt_arg_1_6_6, opt_arg_1_6_7, opt_arg_1_6_8, opt_arg_1_6_9, opt_arg_1_6_10, opt_arg_1_6_11);

        arg_1_6.emplace(opt_arg_1_6);
    }


    auto field_arg_1_7 = Nan::Get(info[1]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("cosmosLikeNetworkParameters").ToLocalChecked()).ToLocalChecked();
    auto arg_1_7 = std::experimental::optional<CosmosLikeNetworkParameters>();
    if(!field_arg_1_7->IsNull() && !field_arg_1_7->IsUndefined())
    {

        auto field_opt_arg_1_7_1 = Nan::Get(field_arg_1_7->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("Identifier").ToLocalChecked()).ToLocalChecked();
        Nan::Utf8String string_opt_arg_1_7_1(field_opt_arg_1_7_1->ToString(Nan::GetCurrentContext()).ToLocalChecked());
        auto opt_arg_1_7_1 = std::string(*string_opt_arg_1_7_1);

        auto field_opt_arg_1_7_2 = Nan::Get(field_arg_1_7->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("MessagePrefix").ToLocalChecked()).ToLocalChecked();
        Nan::Utf8String string_opt_arg_1_7_2(field_opt_arg_1_7_2->ToString(Nan::GetCurrentContext()).ToLocalChecked());
        auto opt_arg_1_7_2 = std::string(*string_opt_arg_1_7_2);

        auto field_opt_arg_1_7_3 = Nan::Get(field_arg_1_7->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("XPUBVersion").ToLocalChecked()).ToLocalChecked();
        if(!field_opt_arg_1_7_3->IsString())
        {
            Nan::ThrowError("field_opt_arg_1_7_3 should be a hexadecimal string.");
        }
        std::vector<uint8_t> opt_arg_1_7_3;
        Nan::Utf8String str_opt_arg_1_7_3(field_opt_arg_1_7_3);
        std::string string_opt_arg_1_7_3(*str_opt_arg_1_7_3, str_opt_arg_1_7_3.length());
        if (string_opt_arg_1_7_3.rfind("0x", 0) == 0)
        {
            opt_arg_1_7_3 = djinni::js::hex::toByteArray(string_opt_arg_1_7_3.substr(2));
        }
        else
        {
            opt_arg_1_7_3 = std::vector<uint8_t>(string_opt_arg_1_7_3.cbegin(), string_opt_arg_1_7_3.cend());
        }


        auto field_opt_arg_1_7_4 = Nan::Get(field_arg_1_7->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("PubKeyPrefix").ToLocalChecked()).ToLocalChecked();
        if(!field_opt_arg_1_7_4->IsString())
        {
            Nan::ThrowError("field_opt_arg_1_7_4 should be a hexadecimal string.");
        }
        std::vector<uint8_t> opt_arg_1_7_4;
        Nan::Utf8String str_opt_arg_1_7_4(field_opt_arg_1_7_4);
        std::string string_opt_arg_1_7_4(*str_opt_arg_1_7_4, str_opt_arg_1_7_4.length());
        if (string_opt_arg_1_7_4.rfind("0x", 0) == 0)
        {
            opt_arg_1_7_4 = djinni::js::hex::toByteArray(string_opt_arg_1_7_4.substr(2));
        }
        else
        {
            opt_arg_1_7_4 = std::vector<uint8_t>(string_opt_arg_1_7_4.cbegin(), string_opt_arg_1_7_4.cend());
        }


        auto field_opt_arg_1_7_5 = Nan::Get(field_arg_1_7->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("Ed25519PubKeyPrefix").ToLocalChecked()).ToLocalChecked();
        if(!field_opt_arg_1_7_5->IsString())
        {
            Nan::ThrowError("field_opt_arg_1_7_5 should be a hexadecimal string.");
        }
        std::vector<uint8_t> opt_arg_1_7_5;
        Nan::Utf8String str_opt_arg_1_7_5(field_opt_arg_1_7_5);
        std::string string_opt_arg_1_7_5(*str_opt_arg_1_7_5, str_opt_arg_1_7_5.length());
        if (string_opt_arg_1_7_5.rfind("0x", 0) == 0)
        {
            opt_arg_1_7_5 = djinni::js::hex::toByteArray(string_opt_arg_1_7_5.substr(2));
        }
        else
        {
            opt_arg_1_7_5 = std::vector<uint8_t>(string_opt_arg_1_7_5.cbegin(), string_opt_arg_1_7_5.cend());
        }


        auto field_opt_arg_1_7_6 = Nan::Get(field_arg_1_7->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("AddressPrefix").ToLocalChecked()).ToLocalChecked();
        if(!field_opt_arg_1_7_6->IsString())
        {
            Nan::ThrowError("field_opt_arg_1_7_6 should be a hexadecimal string.");
        }
        std::vector<uint8_t> opt_arg_1_7_6;
        Nan::Utf8String str_opt_arg_1_7_6(field_opt_arg_1_7_6);
        std::string string_opt_arg_1_7_6(*str_opt_arg_1_7_6, str_opt_arg_1_7_6.length());
        if (string_opt_arg_1_7_6.rfind("0x", 0) == 0)
        {
            opt_arg_1_7_6 = djinni::js::hex::toByteArray(string_opt_arg_1_7_6.substr(2));
        }
        else
        {
            opt_arg_1_7_6 = std::vector<uint8_t>(string_opt_arg_1_7_6.cbegin(), string_opt_arg_1_7_6.cend());
        }


        auto field_opt_arg_1_7_7 = Nan::Get(field_arg_1_7->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("ChainId").ToLocalChecked()).ToLocalChecked();
        Nan::Utf8String string_opt_arg_1_7_7(field_opt_arg_1_7_7->ToString(Nan::GetCurrentContext()).ToLocalChecked());
        auto opt_arg_1_7_7 = std::string(*string_opt_arg_1_7_7);

        auto field_opt_arg_1_7_8 = Nan::Get(field_arg_1_7->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("AdditionalCIPs").ToLocalChecked()).ToLocalChecked();
        vector<std::string> opt_arg_1_7_8;
        Local<Array> opt_arg_1_7_8_container = Local<Array>::Cast(field_opt_arg_1_7_8);
        for(uint32_t opt_arg_1_7_8_id = 0; opt_arg_1_7_8_id < opt_arg_1_7_8_container->Length(); opt_arg_1_7_8_id++)
        {
            if(opt_arg_1_7_8_container->Get(Nan::GetCurrentContext(), opt_arg_1_7_8_id).ToLocalChecked()->IsString())
            {
                Nan::Utf8String string_opt_arg_1_7_8_elem(opt_arg_1_7_8_container->Get(Nan::GetCurrentContext(), opt_arg_1_7_8_id).ToLocalChecked()->ToString(Nan::GetCurrentContext()).ToLocalChecked());
                auto opt_arg_1_7_8_elem = std::string(*string_opt_arg_1_7_8_elem);
                opt_arg_1_7_8.emplace_back(opt_arg_1_7_8_elem);
            }
        }

        CosmosLikeNetworkParameters opt_arg_1_7(opt_arg_1_7_1, opt_arg_1_7_2, opt_arg_1_7_3, opt_arg_1_7_4, opt_arg_1_7_5, opt_arg_1_7_6, opt_arg_1_7_7, opt_arg_1_7_8);

        arg_1_7.emplace(opt_arg_1_7);
    }


    auto field_arg_1_8 = Nan::Get(info[1]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("ethereumLikeNetworkParameters").ToLocalChecked()).ToLocalChecked();
    auto arg_1_8 = std::experimental::optional<EthereumLikeNetworkParameters>();
    if(!field_arg_1_8->IsNull() && !field_arg_1_8->IsUndefined())
    {

        auto field_opt_arg_1_8_1 = Nan::Get(field_arg_1_8->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("Identifier").ToLocalChecked()).ToLocalChecked();
        Nan::Utf8String string_opt_arg_1_8_1(field_opt_arg_1_8_1->ToString(Nan::GetCurrentContext()).ToLocalChecked());
        auto opt_arg_1_8_1 = std::string(*string_opt_arg_1_8_1);

        auto field_opt_arg_1_8_2 = Nan::Get(field_arg_1_8->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("MessagePrefix").ToLocalChecked()).ToLocalChecked();
        Nan::Utf8String string_opt_arg_1_8_2(field_opt_arg_1_8_2->ToString(Nan::GetCurrentContext()).ToLocalChecked());
        auto opt_arg_1_8_2 = std::string(*string_opt_arg_1_8_2);

        auto field_opt_arg_1_8_3 = Nan::Get(field_arg_1_8->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("ChainID").ToLocalChecked()).ToLocalChecked();
        Nan::Utf8String string_opt_arg_1_8_3(field_opt_arg_1_8_3->ToString(Nan::GetCurrentContext()).ToLocalChecked());
        auto opt_arg_1_8_3 = std::string(*string_opt_arg_1_8_3);

        auto field_opt_arg_1_8_4 = Nan::Get(field_arg_1_8->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("XPUBVersion").ToLocalChecked()).ToLocalChecked();
        if(!field_opt_arg_1_8_4->IsString())
        {
            Nan::ThrowError("field_opt_arg_1_8_4 should be a hexadecimal string.");
        }
        std::vector<uint8_t> opt_arg_1_8_4;
        Nan::Utf8String str_opt_arg_1_8_4(field_opt_arg_1_8_4);
        std::string string_opt_arg_1_8_4(*str_opt_arg_1_8_4, str_opt_arg_1_8_4.length());
        if (string_opt_arg_1_8_4.rfind("0x", 0) == 0)
        {
            opt_arg_1_8_4 = djinni::js::hex::toByteArray(string_opt_arg_1_8_4.substr(2));
        }
        else
        {
            opt_arg_1_8_4 = std::vector<uint8_t>(string_opt_arg_1_8_4.cbegin(), string_opt_arg_1_8_4.cend());
        }


        auto field_opt_arg_1_8_5 = Nan::Get(field_arg_1_8->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("AdditionalEIPs").ToLocalChecked()).ToLocalChecked();
        vector<std::string> opt_arg_1_8_5;
        Local<Array> opt_arg_1_8_5_container = Local<Array>::Cast(field_opt_arg_1_8_5);
        for(uint32_t opt_arg_1_8_5_id = 0; opt_arg_1_8_5_id < opt_arg_1_8_5_container->Length(); opt_arg_1_8_5_id++)
        {
            if(opt_arg_1_8_5_container->Get(Nan::GetCurrentContext(), opt_arg_1_8_5_id).ToLocalChecked()->IsString())
            {
                Nan::Utf8String string_opt_arg_1_8_5_elem(opt_arg_1_8_5_container->Get(Nan::GetCurrentContext(), opt_arg_1_8_5_id).ToLocalChecked()->ToString(Nan::GetCurrentContext()).ToLocalChecked());
                auto opt_arg_1_8_5_elem = std::string(*string_opt_arg_1_8_5_elem);
                opt_arg_1_8_5.emplace_back(opt_arg_1_8_5_elem);
            }
        }


        auto field_opt_arg_1_8_6 = Nan::Get(field_arg_1_8->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("TimestampDelay").ToLocalChecked()).ToLocalChecked();
        auto opt_arg_1_8_6 = Nan::To<int64_t>(field_opt_arg_1_8_6).FromJust();
        EthereumLikeNetworkParameters opt_arg_1_8(opt_arg_1_8_1, opt_arg_1_8_2, opt_arg_1_8_3, opt_arg_1_8_4, opt_arg_1_8_5, opt_arg_1_8_6);

        arg_1_8.emplace(opt_arg_1_8);
    }


    auto field_arg_1_9 = Nan::Get(info[1]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("rippleLikeNetworkParameters").ToLocalChecked()).ToLocalChecked();
    auto arg_1_9 = std::experimental::optional<RippleLikeNetworkParameters>();
    if(!field_arg_1_9->IsNull() && !field_arg_1_9->IsUndefined())
    {

        auto field_opt_arg_1_9_1 = Nan::Get(field_arg_1_9->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("Identifier").ToLocalChecked()).ToLocalChecked();
        Nan::Utf8String string_opt_arg_1_9_1(field_opt_arg_1_9_1->ToString(Nan::GetCurrentContext()).ToLocalChecked());
        auto opt_arg_1_9_1 = std::string(*string_opt_arg_1_9_1);

        auto field_opt_arg_1_9_2 = Nan::Get(field_arg_1_9->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("MessagePrefix").ToLocalChecked()).ToLocalChecked();
        Nan::Utf8String string_opt_arg_1_9_2(field_opt_arg_1_9_2->ToString(Nan::GetCurrentContext()).ToLocalChecked());
        auto opt_arg_1_9_2 = std::string(*string_opt_arg_1_9_2);

        auto field_opt_arg_1_9_3 = Nan::Get(field_arg_1_9->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("XPUBVersion").ToLocalChecked()).ToLocalChecked();
        if(!field_opt_arg_1_9_3->IsString())
        {
            Nan::ThrowError("field_opt_arg_1_9_3 should be a hexadecimal string.");
        }
        std::vector<uint8_t> opt_arg_1_9_3;
        Nan::Utf8String str_opt_arg_1_9_3(field_opt_arg_1_9_3);
        std::string string_opt_arg_1_9_3(*str_opt_arg_1_9_3, str_opt_arg_1_9_3.length());
        if (string_opt_arg_1_9_3.rfind("0x", 0) == 0)
        {
            opt_arg_1_9_3 = djinni::js::hex::toByteArray(string_opt_arg_1_9_3.substr(2));
        }
        else
        {
            opt_arg_1_9_3 = std::vector<uint8_t>(string_opt_arg_1_9_3.cbegin(), string_opt_arg_1_9_3.cend());
        }


        auto field_opt_arg_1_9_4 = Nan::Get(field_arg_1_9->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("AdditionalRIPs").ToLocalChecked()).ToLocalChecked();
        vector<std::string> opt_arg_1_9_4;
        Local<Array> opt_arg_1_9_4_container = Local<Array>::Cast(field_opt_arg_1_9_4);
        for(uint32_t opt_arg_1_9_4_id = 0; opt_arg_1_9_4_id < opt_arg_1_9_4_container->Length(); opt_arg_1_9_4_id++)
        {
            if(opt_arg_1_9_4_container->Get(Nan::GetCurrentContext(), opt_arg_1_9_4_id).ToLocalChecked()->IsString())
            {
                Nan::Utf8String string_opt_arg_1_9_4_elem(opt_arg_1_9_4_container->Get(Nan::GetCurrentContext(), opt_arg_1_9_4_id).ToLocalChecked()->ToString(Nan::GetCurrentContext()).ToLocalChecked());
                auto opt_arg_1_9_4_elem = std::string(*string_opt_arg_1_9_4_elem);
                opt_arg_1_9_4.emplace_back(opt_arg_1_9_4_elem);
            }
        }


        auto field_opt_arg_1_9_5 = Nan::Get(field_arg_1_9->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("TimestampDelay").ToLocalChecked()).ToLocalChecked();
        auto opt_arg_1_9_5 = Nan::To<int64_t>(field_opt_arg_1_9_5).FromJust();
        RippleLikeNetworkParameters opt_arg_1_9(opt_arg_1_9_1, opt_arg_1_9_2, opt_arg_1_9_3, opt_arg_1_9_4, opt_arg_1_9_5);

        arg_1_9.emplace(opt_arg_1_9);
    }


    auto field_arg_1_10 = Nan::Get(info[1]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("tezosLikeNetworkParameters").ToLocalChecked()).ToLocalChecked();
    auto arg_1_10 = std::experimental::optional<TezosLikeNetworkParameters>();
    if(!field_arg_1_10->IsNull() && !field_arg_1_10->IsUndefined())
    {

        auto field_opt_arg_1_10_1 = Nan::Get(field_arg_1_10->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("Identifier").ToLocalChecked()).ToLocalChecked();
        Nan::Utf8String string_opt_arg_1_10_1(field_opt_arg_1_10_1->ToString(Nan::GetCurrentContext()).ToLocalChecked());
        auto opt_arg_1_10_1 = std::string(*string_opt_arg_1_10_1);

        auto field_opt_arg_1_10_2 = Nan::Get(field_arg_1_10->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("MessagePrefix").ToLocalChecked()).ToLocalChecked();
        Nan::Utf8String string_opt_arg_1_10_2(field_opt_arg_1_10_2->ToString(Nan::GetCurrentContext()).ToLocalChecked());
        auto opt_arg_1_10_2 = std::string(*string_opt_arg_1_10_2);

        auto field_opt_arg_1_10_3 = Nan::Get(field_arg_1_10->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("XPUBVersion").ToLocalChecked()).ToLocalChecked();
        if(!field_opt_arg_1_10_3->IsString())
        {
            Nan::ThrowError("field_opt_arg_1_10_3 should be a hexadecimal string.");
        }
        std::vector<uint8_t> opt_arg_1_10_3;
        Nan::Utf8String str_opt_arg_1_10_3(field_opt_arg_1_10_3);
        std::string string_opt_arg_1_10_3(*str_opt_arg_1_10_3, str_opt_arg_1_10_3.length());
        if (string_opt_arg_1_10_3.rfind("0x", 0) == 0)
        {
            opt_arg_1_10_3 = djinni::js::hex::toByteArray(string_opt_arg_1_10_3.substr(2));
        }
        else
        {
            opt_arg_1_10_3 = std::vector<uint8_t>(string_opt_arg_1_10_3.cbegin(), string_opt_arg_1_10_3.cend());
        }


        auto field_opt_arg_1_10_4 = Nan::Get(field_arg_1_10->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("ImplicitPrefix").ToLocalChecked()).ToLocalChecked();
        if(!field_opt_arg_1_10_4->IsString())
        {
            Nan::ThrowError("field_opt_arg_1_10_4 should be a hexadecimal string.");
        }
        std::vector<uint8_t> opt_arg_1_10_4;
        Nan::Utf8String str_opt_arg_1_10_4(field_opt_arg_1_10_4);
        std::string string_opt_arg_1_10_4(*str_opt_arg_1_10_4, str_opt_arg_1_10_4.length());
        if (string_opt_arg_1_10_4.rfind("0x", 0) == 0)
        {
            opt_arg_1_10_4 = djinni::js::hex::toByteArray(string_opt_arg_1_10_4.substr(2));
        }
        else
        {
            opt_arg_1_10_4 = std::vector<uint8_t>(string_opt_arg_1_10_4.cbegin(), string_opt_arg_1_10_4.cend());
        }


        auto field_opt_arg_1_10_5 = Nan::Get(field_arg_1_10->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("OriginatedPrefix").ToLocalChecked()).ToLocalChecked();
        if(!field_opt_arg_1_10_5->IsString())
        {
            Nan::ThrowError("field_opt_arg_1_10_5 should be a hexadecimal string.");
        }
        std::vector<uint8_t> opt_arg_1_10_5;
        Nan::Utf8String str_opt_arg_1_10_5(field_opt_arg_1_10_5);
        std::string string_opt_arg_1_10_5(*str_opt_arg_1_10_5, str_opt_arg_1_10_5.length());
        if (string_opt_arg_1_10_5.rfind("0x", 0) == 0)
        {
            opt_arg_1_10_5 = djinni::js::hex::toByteArray(string_opt_arg_1_10_5.substr(2));
        }
        else
        {
            opt_arg_1_10_5 = std::vector<uint8_t>(string_opt_arg_1_10_5.cbegin(), string_opt_arg_1_10_5.cend());
        }


        auto field_opt_arg_1_10_6 = Nan::Get(field_arg_1_10->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("AdditionalTIPs").ToLocalChecked()).ToLocalChecked();
        vector<std::string> opt_arg_1_10_6;
        Local<Array> opt_arg_1_10_6_container = Local<Array>::Cast(field_opt_arg_1_10_6);
        for(uint32_t opt_arg_1_10_6_id = 0; opt_arg_1_10_6_id < opt_arg_1_10_6_container->Length(); opt_arg_1_10_6_id++)
        {
            if(opt_arg_1_10_6_container->Get(Nan::GetCurrentContext(), opt_arg_1_10_6_id).ToLocalChecked()->IsString())
            {
                Nan::Utf8String string_opt_arg_1_10_6_elem(opt_arg_1_10_6_container->Get(Nan::GetCurrentContext(), opt_arg_1_10_6_id).ToLocalChecked()->ToString(Nan::GetCurrentContext()).ToLocalChecked());
                auto opt_arg_1_10_6_elem = std::string(*string_opt_arg_1_10_6_elem);
                opt_arg_1_10_6.emplace_back(opt_arg_1_10_6_elem);
            }
        }


        auto field_opt_arg_1_10_7 = Nan::Get(field_arg_1_10->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("TimestampDelay").ToLocalChecked()).ToLocalChecked();
        auto opt_arg_1_10_7 = Nan::To<int64_t>(field_opt_arg_1_10_7).FromJust();
        TezosLikeNetworkParameters opt_arg_1_10(opt_arg_1_10_1, opt_arg_1_10_2, opt_arg_1_10_3, opt_arg_1_10_4, opt_arg_1_10_5, opt_arg_1_10_6, opt_arg_1_10_7);

        arg_1_10.emplace(opt_arg_1_10);
    }


    auto field_arg_1_11 = Nan::Get(info[1]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("stellarLikeNetworkParameters").ToLocalChecked()).ToLocalChecked();
    auto arg_1_11 = std::experimental::optional<StellarLikeNetworkParameters>();
    if(!field_arg_1_11->IsNull() && !field_arg_1_11->IsUndefined())
    {

        auto field_opt_arg_1_11_1 = Nan::Get(field_arg_1_11->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("Identifier").ToLocalChecked()).ToLocalChecked();
        Nan::Utf8String string_opt_arg_1_11_1(field_opt_arg_1_11_1->ToString(Nan::GetCurrentContext()).ToLocalChecked());
        auto opt_arg_1_11_1 = std::string(*string_opt_arg_1_11_1);

        auto field_opt_arg_1_11_2 = Nan::Get(field_arg_1_11->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("Version").ToLocalChecked()).ToLocalChecked();
        if(!field_opt_arg_1_11_2->IsString())
        {
            Nan::ThrowError("field_opt_arg_1_11_2 should be a hexadecimal string.");
        }
        std::vector<uint8_t> opt_arg_1_11_2;
        Nan::Utf8String str_opt_arg_1_11_2(field_opt_arg_1_11_2);
        std::string string_opt_arg_1_11_2(*str_opt_arg_1_11_2, str_opt_arg_1_11_2.length());
        if (string_opt_arg_1_11_2.rfind("0x", 0) == 0)
        {
            opt_arg_1_11_2 = djinni::js::hex::toByteArray(string_opt_arg_1_11_2.substr(2));
        }
        else
        {
            opt_arg_1_11_2 = std::vector<uint8_t>(string_opt_arg_1_11_2.cbegin(), string_opt_arg_1_11_2.cend());
        }


        auto field_opt_arg_1_11_3 = Nan::Get(field_arg_1_11->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("MuxedVersion").ToLocalChecked()).ToLocalChecked();
        if(!field_opt_arg_1_11_3->IsString())
        {
            Nan::ThrowError("field_opt_arg_1_11_3 should be a hexadecimal string.");
        }
        std::vector<uint8_t> opt_arg_1_11_3;
        Nan::Utf8String str_opt_arg_1_11_3(field_opt_arg_1_11_3);
        std::string string_opt_arg_1_11_3(*str_opt_arg_1_11_3, str_opt_arg_1_11_3.length());
        if (string_opt_arg_1_11_3.rfind("0x", 0) == 0)
        {
            opt_arg_1_11_3 = djinni::js::hex::toByteArray(string_opt_arg_1_11_3.substr(2));
        }
        else
        {
            opt_arg_1_11_3 = std::vector<uint8_t>(string_opt_arg_1_11_3.cbegin(), string_opt_arg_1_11_3.cend());
        }


        auto field_opt_arg_1_11_4 = Nan::Get(field_arg_1_11->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("BaseReserve").ToLocalChecked()).ToLocalChecked();
        auto opt_arg_1_11_4 = Nan::To<int64_t>(field_opt_arg_1_11_4).FromJust();

        auto field_opt_arg_1_11_5 = Nan::Get(field_arg_1_11->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("BaseFee").ToLocalChecked()).ToLocalChecked();
        auto opt_arg_1_11_5 = Nan::To<int64_t>(field_opt_arg_1_11_5).FromJust();

        auto field_opt_arg_1_11_6 = Nan::Get(field_arg_1_11->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("AdditionalSEPs").ToLocalChecked()).ToLocalChecked();
        vector<std::string> opt_arg_1_11_6;
        Local<Array> opt_arg_1_11_6_container = Local<Array>::Cast(field_opt_arg_1_11_6);
        for(uint32_t opt_arg_1_11_6_id = 0; opt_arg_1_11_6_id < opt_arg_1_11_6_container->Length(); opt_arg_1_11_6_id++)
        {
            if(opt_arg_1_11_6_container->Get(Nan::GetCurrentContext(), opt_arg_1_11_6_id).ToLocalChecked()->IsString())
            {
                Nan::Utf8String string_opt_arg_1_11_6_elem(opt_arg_1_11_6_container->Get(Nan::GetCurrentContext(), opt_arg_1_11_6_id).ToLocalChecked()->ToString(Nan::GetCurrentContext()).ToLocalChecked());
                auto opt_arg_1_11_6_elem = std::string(*string_opt_arg_1_11_6_elem);
                opt_arg_1_11_6.emplace_back(opt_arg_1_11_6_elem);
            }
        }


        auto field_opt_arg_1_11_7 = Nan::Get(field_arg_1_11->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("NetworkPassphrase").ToLocalChecked()).ToLocalChecked();
        Nan::Utf8String string_opt_arg_1_11_7(field_opt_arg_1_11_7->ToString(Nan::GetCurrentContext()).ToLocalChecked());
        auto opt_arg_1_11_7 = std::string(*string_opt_arg_1_11_7);
        StellarLikeNetworkParameters opt_arg_1_11(opt_arg_1_11_1, opt_arg_1_11_2, opt_arg_1_11_3, opt_arg_1_11_4, opt_arg_1_11_5, opt_arg_1_11_6, opt_arg_1_11_7);

        arg_1_11.emplace(opt_arg_1_11);
    }


    auto field_arg_1_12 = Nan::Get(info[1]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("algorandNetworkParameters").ToLocalChecked()).ToLocalChecked();
    auto arg_1_12 = std::experimental::optional<AlgorandNetworkParameters>();
    if(!field_arg_1_12->IsNull() && !field_arg_1_12->IsUndefined())
    {

        auto field_opt_arg_1_12_1 = Nan::Get(field_arg_1_12->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("genesisID").ToLocalChecked()).ToLocalChecked();
        Nan::Utf8String string_opt_arg_1_12_1(field_opt_arg_1_12_1->ToString(Nan::GetCurrentContext()).ToLocalChecked());
        auto opt_arg_1_12_1 = std::string(*string_opt_arg_1_12_1);

        auto field_opt_arg_1_12_2 = Nan::Get(field_arg_1_12->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("genesisHash").ToLocalChecked()).ToLocalChecked();
        Nan::Utf8String string_opt_arg_1_12_2(field_opt_arg_1_12_2->ToString(Nan::GetCurrentContext()).ToLocalChecked());
        auto opt_arg_1_12_2 = std::string(*string_opt_arg_1_12_2);
        AlgorandNetworkParameters opt_arg_1_12(opt_arg_1_12_1, opt_arg_1_12_2);

        arg_1_12.emplace(opt_arg_1_12);
    }

    Currency arg_1(arg_1_1, arg_1_2, arg_1_3, arg_1_4, arg_1_5, arg_1_6, arg_1_7, arg_1_8, arg_1_9, arg_1_10, arg_1_11, arg_1_12);

    Local<Object> njs_arg_2 = info[2]->ToObject(Nan::GetCurrentContext()).ToLocalChecked();
    auto arg_2 = djinni::js::ObjectWrapper<ledger::core::api::DynamicObject>::Unwrap(njs_arg_2);
    if(!arg_2)
    {
        return Nan::ThrowError("NodeJs Object to NJSDynamicObject failed");
    }


    //Create promise and set it into Callback
    auto arg_3_resolver = v8::Promise::Resolver::New(Nan::GetCurrentContext()).ToLocalChecked();
    NJSWalletCallback *njs_ptr_arg_3 = new NJSWalletCallback(arg_3_resolver);
    std::shared_ptr<NJSWalletCallback> arg_3(njs_ptr_arg_3);


    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::WalletPool>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSWalletPool::createWallet : implementation of WalletPool is not valid");
    }
    cpp_impl->createWallet(arg_0,arg_1,arg_2,arg_3);
    info.GetReturnValue().Set(arg_3_resolver->GetPromise());
}
NAN_METHOD(NJSWalletPool::getCurrencies) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSWalletPool::getCurrencies needs 0 arguments");
    }

    //Check if parameters have correct types

    //Create promise and set it into Callback
    auto arg_0_resolver = v8::Promise::Resolver::New(Nan::GetCurrentContext()).ToLocalChecked();
    NJSCurrencyListCallback *njs_ptr_arg_0 = new NJSCurrencyListCallback(arg_0_resolver);
    std::shared_ptr<NJSCurrencyListCallback> arg_0(njs_ptr_arg_0);


    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::WalletPool>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSWalletPool::getCurrencies : implementation of WalletPool is not valid");
    }
    cpp_impl->getCurrencies(arg_0);
    info.GetReturnValue().Set(arg_0_resolver->GetPromise());
}
NAN_METHOD(NJSWalletPool::getCurrency) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSWalletPool::getCurrency needs 1 arguments");
    }

    //Check if parameters have correct types
    Nan::Utf8String string_arg_0(info[0]->ToString(Nan::GetCurrentContext()).ToLocalChecked());
    auto arg_0 = std::string(*string_arg_0);

    //Create promise and set it into Callback
    auto arg_1_resolver = v8::Promise::Resolver::New(Nan::GetCurrentContext()).ToLocalChecked();
    NJSCurrencyCallback *njs_ptr_arg_1 = new NJSCurrencyCallback(arg_1_resolver);
    std::shared_ptr<NJSCurrencyCallback> arg_1(njs_ptr_arg_1);


    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::WalletPool>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSWalletPool::getCurrency : implementation of WalletPool is not valid");
    }
    cpp_impl->getCurrency(arg_0,arg_1);
    info.GetReturnValue().Set(arg_1_resolver->GetPromise());
}
NAN_METHOD(NJSWalletPool::getLastBlock) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSWalletPool::getLastBlock needs 1 arguments");
    }

    //Check if parameters have correct types
    Nan::Utf8String string_arg_0(info[0]->ToString(Nan::GetCurrentContext()).ToLocalChecked());
    auto arg_0 = std::string(*string_arg_0);

    //Create promise and set it into Callback
    auto arg_1_resolver = v8::Promise::Resolver::New(Nan::GetCurrentContext()).ToLocalChecked();
    NJSBlockCallback *njs_ptr_arg_1 = new NJSBlockCallback(arg_1_resolver);
    std::shared_ptr<NJSBlockCallback> arg_1(njs_ptr_arg_1);


    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::WalletPool>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSWalletPool::getLastBlock : implementation of WalletPool is not valid");
    }
    cpp_impl->getLastBlock(arg_0,arg_1);
    info.GetReturnValue().Set(arg_1_resolver->GetPromise());
}
NAN_METHOD(NJSWalletPool::getEventBus) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSWalletPool::getEventBus needs 0 arguments");
    }

    //Check if parameters have correct types

    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::WalletPool>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSWalletPool::getEventBus : implementation of WalletPool is not valid");
    }

    auto result = cpp_impl->getEventBus();

    //Wrap result in node object
    auto arg_0 = NJSEventBus::wrap(result);


    //Return result
    info.GetReturnValue().Set(arg_0);
}
NAN_METHOD(NJSWalletPool::eraseDataSince) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSWalletPool::eraseDataSince needs 1 arguments");
    }

    //Check if parameters have correct types
    auto time_arg_0 = Nan::To<int32_t>(info[0]).FromJust();
    auto arg_0 = chrono::system_clock::time_point(chrono::milliseconds(time_arg_0));

    //Create promise and set it into Callback
    auto arg_1_resolver = v8::Promise::Resolver::New(Nan::GetCurrentContext()).ToLocalChecked();
    NJSErrorCodeCallback *njs_ptr_arg_1 = new NJSErrorCodeCallback(arg_1_resolver);
    std::shared_ptr<NJSErrorCodeCallback> arg_1(njs_ptr_arg_1);


    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::WalletPool>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSWalletPool::eraseDataSince : implementation of WalletPool is not valid");
    }
    cpp_impl->eraseDataSince(arg_0,arg_1);
    info.GetReturnValue().Set(arg_1_resolver->GetPromise());
}
NAN_METHOD(NJSWalletPool::freshResetAll) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSWalletPool::freshResetAll needs 0 arguments");
    }

    //Check if parameters have correct types

    //Create promise and set it into Callback
    auto arg_0_resolver = v8::Promise::Resolver::New(Nan::GetCurrentContext()).ToLocalChecked();
    NJSErrorCodeCallback *njs_ptr_arg_0 = new NJSErrorCodeCallback(arg_0_resolver);
    std::shared_ptr<NJSErrorCodeCallback> arg_0(njs_ptr_arg_0);


    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::WalletPool>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSWalletPool::freshResetAll : implementation of WalletPool is not valid");
    }
    cpp_impl->freshResetAll(arg_0);
    info.GetReturnValue().Set(arg_0_resolver->GetPromise());
}
NAN_METHOD(NJSWalletPool::changePassword) {

    //Check if method called with right number of arguments
    if(info.Length() != 2)
    {
        return Nan::ThrowError("NJSWalletPool::changePassword needs 2 arguments");
    }

    //Check if parameters have correct types
    Nan::Utf8String string_arg_0(info[0]->ToString(Nan::GetCurrentContext()).ToLocalChecked());
    auto arg_0 = std::string(*string_arg_0);
    Nan::Utf8String string_arg_1(info[1]->ToString(Nan::GetCurrentContext()).ToLocalChecked());
    auto arg_1 = std::string(*string_arg_1);

    //Create promise and set it into Callback
    auto arg_2_resolver = v8::Promise::Resolver::New(Nan::GetCurrentContext()).ToLocalChecked();
    NJSErrorCodeCallback *njs_ptr_arg_2 = new NJSErrorCodeCallback(arg_2_resolver);
    std::shared_ptr<NJSErrorCodeCallback> arg_2(njs_ptr_arg_2);


    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::WalletPool>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSWalletPool::changePassword : implementation of WalletPool is not valid");
    }
    cpp_impl->changePassword(arg_0,arg_1,arg_2);
    info.GetReturnValue().Set(arg_2_resolver->GetPromise());
}

NAN_METHOD(NJSWalletPool::New) {
    //Only new allowed
    if(!info.IsConstructCall())
    {
        return Nan::ThrowError("NJSWalletPool function can only be called as constructor (use New)");
    }

    //Check if NJSWalletPool::New called with right number of arguments
    if(info.Length() != 10)
    {
        return Nan::ThrowError("NJSWalletPool::New needs same number of arguments as ledger::core::api::WalletPool::newInstance method");
    }

    //Unwrap objects to get C++ classes
    Nan::Utf8String string_arg_0(info[0]->ToString(Nan::GetCurrentContext()).ToLocalChecked());
    auto arg_0 = std::string(*string_arg_0);
    Nan::Utf8String string_arg_1(info[1]->ToString(Nan::GetCurrentContext()).ToLocalChecked());
    auto arg_1 = std::string(*string_arg_1);
    Local<Object> njs_arg_2 = info[2]->ToObject(Nan::GetCurrentContext()).ToLocalChecked();
    auto arg_2 = djinni::js::ObjectWrapper<ledger::core::api::HttpClient>::Unwrap(njs_arg_2);

    Local<Object> njs_arg_3 = info[3]->ToObject(Nan::GetCurrentContext()).ToLocalChecked();
    auto arg_3 = djinni::js::ObjectWrapper<ledger::core::api::WebSocketClient>::Unwrap(njs_arg_3);

    Local<Object> njs_arg_4 = info[4]->ToObject(Nan::GetCurrentContext()).ToLocalChecked();
    auto arg_4 = djinni::js::ObjectWrapper<ledger::core::api::PathResolver>::Unwrap(njs_arg_4);

    Local<Object> njs_arg_5 = info[5]->ToObject(Nan::GetCurrentContext()).ToLocalChecked();
    auto arg_5 = djinni::js::ObjectWrapper<ledger::core::api::LogPrinter>::Unwrap(njs_arg_5);

    Local<Object> njs_arg_6 = info[6]->ToObject(Nan::GetCurrentContext()).ToLocalChecked();
    auto arg_6 = djinni::js::ObjectWrapper<ledger::core::api::ThreadDispatcher>::Unwrap(njs_arg_6);

    Local<Object> njs_arg_7 = info[7]->ToObject(Nan::GetCurrentContext()).ToLocalChecked();
    auto arg_7 = djinni::js::ObjectWrapper<ledger::core::api::RandomNumberGenerator>::Unwrap(njs_arg_7);

    Local<Object> njs_arg_8 = info[8]->ToObject(Nan::GetCurrentContext()).ToLocalChecked();
    auto arg_8 = djinni::js::ObjectWrapper<ledger::core::api::DatabaseBackend>::Unwrap(njs_arg_8);
    if(!arg_8)
    {
        return Nan::ThrowError("NodeJs Object to NJSDatabaseBackend failed");
    }

    Local<Object> njs_arg_9 = info[9]->ToObject(Nan::GetCurrentContext()).ToLocalChecked();
    auto arg_9 = djinni::js::ObjectWrapper<ledger::core::api::DynamicObject>::Unwrap(njs_arg_9);
    if(!arg_9)
    {
        return Nan::ThrowError("NodeJs Object to NJSDynamicObject failed");
    }


    //Call factory
    auto cpp_instance = ledger::core::api::WalletPool::newInstance(arg_0,arg_1,arg_2,arg_3,arg_4,arg_5,arg_6,arg_7,arg_8,arg_9);
    djinni::js::ObjectWrapper<ledger::core::api::WalletPool>::Wrap(cpp_instance, info.This());
    info.GetReturnValue().Set(info.This());
}


Nan::Persistent<ObjectTemplate> NJSWalletPool::WalletPool_prototype;

Local<Object> NJSWalletPool::wrap(const std::shared_ptr<ledger::core::api::WalletPool> &object) {
    Nan::EscapableHandleScope scope;
    Local<ObjectTemplate> local_prototype = Nan::New(WalletPool_prototype);

    Local<Object> obj;
    if(!local_prototype.IsEmpty())
    {
        obj = local_prototype->NewInstance(Nan::GetCurrentContext()).ToLocalChecked();
        djinni::js::ObjectWrapper<ledger::core::api::WalletPool>::Wrap(object, obj);
    }
    else
    {
        Nan::ThrowError("NJSWalletPool::wrap: object template not valid");
    }
    return scope.Escape(obj);
}

NAN_METHOD(NJSWalletPool::isNull) {
    auto cpp_implementation = djinni::js::ObjectWrapper<ledger::core::api::WalletPool>::Unwrap(info.This());
    auto isNull = !cpp_implementation ? true : false;
    return info.GetReturnValue().Set(Nan::New<Boolean>(isNull));
}

void NJSWalletPool::Initialize(Local<Object> target) {
    Nan::HandleScope scope;

    Local<FunctionTemplate> func_template = Nan::New<FunctionTemplate>(NJSWalletPool::New);
    Local<ObjectTemplate> objectTemplate = func_template->InstanceTemplate();
    objectTemplate->SetInternalFieldCount(1);

    func_template->SetClassName(Nan::New<String>("NJSWalletPool").ToLocalChecked());

    //SetPrototypeMethod all methods
    Nan::SetPrototypeMethod(func_template,"newInstance", newInstance);
    Nan::SetPrototypeMethod(func_template,"getLogger", getLogger);
    Nan::SetPrototypeMethod(func_template,"getName", getName);
    Nan::SetPrototypeMethod(func_template,"getPreferences", getPreferences);
    Nan::SetPrototypeMethod(func_template,"getWalletCount", getWalletCount);
    Nan::SetPrototypeMethod(func_template,"getWallets", getWallets);
    Nan::SetPrototypeMethod(func_template,"getWallet", getWallet);
    Nan::SetPrototypeMethod(func_template,"updateWalletConfig", updateWalletConfig);
    Nan::SetPrototypeMethod(func_template,"createWallet", createWallet);
    Nan::SetPrototypeMethod(func_template,"getCurrencies", getCurrencies);
    Nan::SetPrototypeMethod(func_template,"getCurrency", getCurrency);
    Nan::SetPrototypeMethod(func_template,"getLastBlock", getLastBlock);
    Nan::SetPrototypeMethod(func_template,"getEventBus", getEventBus);
    Nan::SetPrototypeMethod(func_template,"eraseDataSince", eraseDataSince);
    Nan::SetPrototypeMethod(func_template,"freshResetAll", freshResetAll);
    Nan::SetPrototypeMethod(func_template,"changePassword", changePassword);
    Nan::SetPrototypeMethod(func_template,"isNull", isNull);
    //Set object prototype
    WalletPool_prototype.Reset(objectTemplate);

    //Add template to target
    Nan::Set(target, Nan::New<String>("NJSWalletPool").ToLocalChecked(), Nan::GetFunction(func_template).ToLocalChecked());
}
