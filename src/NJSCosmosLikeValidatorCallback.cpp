// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from callback.djinni

#include "NJSCosmosLikeValidatorCallback.hpp"
#include "NJSObjectWrapper.hpp"
#include "NJSHexUtils.hpp"

using namespace v8;
using namespace node;
using namespace std;

void NJSCosmosLikeValidatorCallback::onCallback(const std::experimental::optional<::ledger::core::api::CosmosLikeValidator> & result, const std::experimental::optional<::ledger::core::api::Error> & error)
{
    Nan::HandleScope scope;
    //Wrap parameters
    Local<Value> arg_0;
    if(result)
    {
        auto arg_0_optional = (result).value();
        auto arg_0_tmp = Nan::New<Object>();
        auto arg_0_tmp_1 = Nan::New<Object>();
        auto arg_0_tmp_1_1 = Nan::New<String>(arg_0_optional.validatorDetails.moniker).ToLocalChecked();
        Nan::DefineOwnProperty(arg_0_tmp_1, Nan::New<String>("moniker").ToLocalChecked(), arg_0_tmp_1_1);
        Local<Value> arg_0_tmp_1_2;
        if(arg_0_optional.validatorDetails.identity)
        {
            auto arg_0_tmp_1_2_optional = (arg_0_optional.validatorDetails.identity).value();
            auto arg_0_tmp_1_2_tmp = Nan::New<String>(arg_0_tmp_1_2_optional).ToLocalChecked();
            arg_0_tmp_1_2 = arg_0_tmp_1_2_tmp;
        }

        Nan::DefineOwnProperty(arg_0_tmp_1, Nan::New<String>("identity").ToLocalChecked(), arg_0_tmp_1_2);
        Local<Value> arg_0_tmp_1_3;
        if(arg_0_optional.validatorDetails.website)
        {
            auto arg_0_tmp_1_3_optional = (arg_0_optional.validatorDetails.website).value();
            auto arg_0_tmp_1_3_tmp = Nan::New<String>(arg_0_tmp_1_3_optional).ToLocalChecked();
            arg_0_tmp_1_3 = arg_0_tmp_1_3_tmp;
        }

        Nan::DefineOwnProperty(arg_0_tmp_1, Nan::New<String>("website").ToLocalChecked(), arg_0_tmp_1_3);
        Local<Value> arg_0_tmp_1_4;
        if(arg_0_optional.validatorDetails.securityContact)
        {
            auto arg_0_tmp_1_4_optional = (arg_0_optional.validatorDetails.securityContact).value();
            auto arg_0_tmp_1_4_tmp = Nan::New<String>(arg_0_tmp_1_4_optional).ToLocalChecked();
            arg_0_tmp_1_4 = arg_0_tmp_1_4_tmp;
        }

        Nan::DefineOwnProperty(arg_0_tmp_1, Nan::New<String>("securityContact").ToLocalChecked(), arg_0_tmp_1_4);
        Local<Value> arg_0_tmp_1_5;
        if(arg_0_optional.validatorDetails.details)
        {
            auto arg_0_tmp_1_5_optional = (arg_0_optional.validatorDetails.details).value();
            auto arg_0_tmp_1_5_tmp = Nan::New<String>(arg_0_tmp_1_5_optional).ToLocalChecked();
            arg_0_tmp_1_5 = arg_0_tmp_1_5_tmp;
        }

        Nan::DefineOwnProperty(arg_0_tmp_1, Nan::New<String>("details").ToLocalChecked(), arg_0_tmp_1_5);

        Nan::DefineOwnProperty(arg_0_tmp, Nan::New<String>("validatorDetails").ToLocalChecked(), arg_0_tmp_1);
        auto arg_0_tmp_2 = Nan::New<Object>();
        auto arg_0_tmp_2_1 = Nan::New<Object>();
        auto arg_0_tmp_2_1_1 = Nan::New<String>(arg_0_optional.commission.rates.rate).ToLocalChecked();
        Nan::DefineOwnProperty(arg_0_tmp_2_1, Nan::New<String>("rate").ToLocalChecked(), arg_0_tmp_2_1_1);
        auto arg_0_tmp_2_1_2 = Nan::New<String>(arg_0_optional.commission.rates.maxRate).ToLocalChecked();
        Nan::DefineOwnProperty(arg_0_tmp_2_1, Nan::New<String>("maxRate").ToLocalChecked(), arg_0_tmp_2_1_2);
        auto arg_0_tmp_2_1_3 = Nan::New<String>(arg_0_optional.commission.rates.maxChangeRate).ToLocalChecked();
        Nan::DefineOwnProperty(arg_0_tmp_2_1, Nan::New<String>("maxChangeRate").ToLocalChecked(), arg_0_tmp_2_1_3);

        Nan::DefineOwnProperty(arg_0_tmp_2, Nan::New<String>("rates").ToLocalChecked(), arg_0_tmp_2_1);
        auto date_arg_0_tmp_2_2 = chrono::duration_cast<chrono::milliseconds>(arg_0_optional.commission.updateTime.time_since_epoch()).count();
        auto arg_0_tmp_2_2 = Nan::New<Date>(date_arg_0_tmp_2_2).ToLocalChecked();
        Nan::DefineOwnProperty(arg_0_tmp_2, Nan::New<String>("updateTime").ToLocalChecked(), arg_0_tmp_2_2);

        Nan::DefineOwnProperty(arg_0_tmp, Nan::New<String>("commission").ToLocalChecked(), arg_0_tmp_2);
        auto arg_0_tmp_3 = Nan::New<Object>();
        auto arg_0_tmp_3_1 = Nan::New<String>(arg_0_optional.distInfo.selfBondRewards).ToLocalChecked();
        Nan::DefineOwnProperty(arg_0_tmp_3, Nan::New<String>("selfBondRewards").ToLocalChecked(), arg_0_tmp_3_1);
        auto arg_0_tmp_3_2 = Nan::New<String>(arg_0_optional.distInfo.validatorCommission).ToLocalChecked();
        Nan::DefineOwnProperty(arg_0_tmp_3, Nan::New<String>("validatorCommission").ToLocalChecked(), arg_0_tmp_3_2);

        Nan::DefineOwnProperty(arg_0_tmp, Nan::New<String>("distInfo").ToLocalChecked(), arg_0_tmp_3);
        auto arg_0_tmp_4 = Nan::New<Object>();
        auto arg_0_tmp_4_1 = Nan::New<Number>(arg_0_optional.signInfo.startHeight);
        Nan::DefineOwnProperty(arg_0_tmp_4, Nan::New<String>("startHeight").ToLocalChecked(), arg_0_tmp_4_1);
        auto arg_0_tmp_4_2 = Nan::New<Number>(arg_0_optional.signInfo.indexOffset);
        Nan::DefineOwnProperty(arg_0_tmp_4, Nan::New<String>("indexOffset").ToLocalChecked(), arg_0_tmp_4_2);
        auto date_arg_0_tmp_4_3 = chrono::duration_cast<chrono::milliseconds>(arg_0_optional.signInfo.jailedUntil.time_since_epoch()).count();
        auto arg_0_tmp_4_3 = Nan::New<Date>(date_arg_0_tmp_4_3).ToLocalChecked();
        Nan::DefineOwnProperty(arg_0_tmp_4, Nan::New<String>("jailedUntil").ToLocalChecked(), arg_0_tmp_4_3);
        auto arg_0_tmp_4_4 = Nan::New<Boolean>(arg_0_optional.signInfo.tombstoned);
        Nan::DefineOwnProperty(arg_0_tmp_4, Nan::New<String>("tombstoned").ToLocalChecked(), arg_0_tmp_4_4);
        auto arg_0_tmp_4_5 = Nan::New<Int32>(arg_0_optional.signInfo.missedBlocksCounter);
        Nan::DefineOwnProperty(arg_0_tmp_4, Nan::New<String>("missedBlocksCounter").ToLocalChecked(), arg_0_tmp_4_5);

        Nan::DefineOwnProperty(arg_0_tmp, Nan::New<String>("signInfo").ToLocalChecked(), arg_0_tmp_4);
        auto arg_0_tmp_5 = Nan::New<Int32>(arg_0_optional.unbondingHeight);
        Nan::DefineOwnProperty(arg_0_tmp, Nan::New<String>("unbondingHeight").ToLocalChecked(), arg_0_tmp_5);
        Local<Value> arg_0_tmp_6;
        if(arg_0_optional.unbondingTime)
        {
            auto arg_0_tmp_6_optional = (arg_0_optional.unbondingTime).value();
            auto date_arg_0_tmp_6_tmp = chrono::duration_cast<chrono::milliseconds>(arg_0_tmp_6_optional.time_since_epoch()).count();
            auto arg_0_tmp_6_tmp = Nan::New<Date>(date_arg_0_tmp_6_tmp).ToLocalChecked();
            arg_0_tmp_6 = arg_0_tmp_6_tmp;
        }

        Nan::DefineOwnProperty(arg_0_tmp, Nan::New<String>("unbondingTime").ToLocalChecked(), arg_0_tmp_6);
        auto arg_0_tmp_7 = Nan::New<String>(arg_0_optional.minSelfDelegation).ToLocalChecked();
        Nan::DefineOwnProperty(arg_0_tmp, Nan::New<String>("minSelfDelegation").ToLocalChecked(), arg_0_tmp_7);
        auto arg_0_tmp_8 = Nan::New<Boolean>(arg_0_optional.jailed);
        Nan::DefineOwnProperty(arg_0_tmp, Nan::New<String>("jailed").ToLocalChecked(), arg_0_tmp_8);
        auto arg_0_tmp_9 = Nan::New<String>(arg_0_optional.votingPower).ToLocalChecked();
        Nan::DefineOwnProperty(arg_0_tmp, Nan::New<String>("votingPower").ToLocalChecked(), arg_0_tmp_9);
        auto arg_0_tmp_10 = Nan::New<String>(arg_0_optional.operatorAddress).ToLocalChecked();
        Nan::DefineOwnProperty(arg_0_tmp, Nan::New<String>("operatorAddress").ToLocalChecked(), arg_0_tmp_10);
        auto arg_0_tmp_11 = Nan::New<String>(arg_0_optional.consensusPubkey).ToLocalChecked();
        Nan::DefineOwnProperty(arg_0_tmp, Nan::New<String>("consensusPubkey").ToLocalChecked(), arg_0_tmp_11);
        auto arg_0_tmp_12 = Nan::New<String>(arg_0_optional.activeStatus).ToLocalChecked();
        Nan::DefineOwnProperty(arg_0_tmp, Nan::New<String>("activeStatus").ToLocalChecked(), arg_0_tmp_12);

        arg_0 = arg_0_tmp;
    }

    Local<Value> arg_1;
    if(error)
    {
        auto arg_1_optional = (error).value();
        auto arg_1_tmp = Nan::New<Object>();
        auto arg_1_tmp_1 = Nan::New<Integer>((int)arg_1_optional.code);
        Nan::DefineOwnProperty(arg_1_tmp, Nan::New<String>("code").ToLocalChecked(), arg_1_tmp_1);
        auto arg_1_tmp_2 = Nan::New<String>(arg_1_optional.message).ToLocalChecked();
        Nan::DefineOwnProperty(arg_1_tmp, Nan::New<String>("message").ToLocalChecked(), arg_1_tmp_2);

        arg_1 = arg_1_tmp;
    }

    auto local_resolver = Nan::New<Promise::Resolver>(pers_resolver);
    if(error)
    {
        auto rejected = local_resolver->Reject(Nan::GetCurrentContext(), arg_1);
        rejected.FromJust();
    }
    else
    {
        auto resolve = local_resolver->Resolve(Nan::GetCurrentContext(), arg_0);
        resolve.FromJust();
    }
}

NAN_METHOD(NJSCosmosLikeValidatorCallback::New) {
    //Only new allowed
    if(!info.IsConstructCall())
    {
        return Nan::ThrowError("NJSCosmosLikeValidatorCallback function can only be called as constructor (use New)");
    }

    auto resolver = v8::Promise::Resolver::New(Nan::GetCurrentContext()).ToLocalChecked();
    auto node_instance = std::make_shared<NJSCosmosLikeValidatorCallback>(resolver);
    djinni::js::ObjectWrapper<NJSCosmosLikeValidatorCallback>::Wrap(node_instance, info.This());
    info.GetReturnValue().Set(info.This());
}


Nan::Persistent<ObjectTemplate> NJSCosmosLikeValidatorCallback::CosmosLikeValidatorCallback_prototype;

Local<Object> NJSCosmosLikeValidatorCallback::wrap(const std::shared_ptr<ledger::core::api::CosmosLikeValidatorCallback> &object) {
    Nan::EscapableHandleScope scope;
    Local<ObjectTemplate> local_prototype = Nan::New(CosmosLikeValidatorCallback_prototype);

    Local<Object> obj;
    if(!local_prototype.IsEmpty())
    {
        obj = local_prototype->NewInstance(Nan::GetCurrentContext()).ToLocalChecked();
        djinni::js::ObjectWrapper<ledger::core::api::CosmosLikeValidatorCallback>::Wrap(object, obj);
    }
    else
    {
        Nan::ThrowError("NJSCosmosLikeValidatorCallback::wrap: object template not valid");
    }
    return scope.Escape(obj);
}

void NJSCosmosLikeValidatorCallback::Initialize(Local<Object> target) {
    Nan::HandleScope scope;

    Local<FunctionTemplate> func_template = Nan::New<FunctionTemplate>(NJSCosmosLikeValidatorCallback::New);
    Local<ObjectTemplate> objectTemplate = func_template->InstanceTemplate();
    objectTemplate->SetInternalFieldCount(1);

    func_template->SetClassName(Nan::New<String>("NJSCosmosLikeValidatorCallback").ToLocalChecked());
    Nan::SetPrototypeMethod(func_template,"New", New);
    //Set object prototype
    CosmosLikeValidatorCallback_prototype.Reset(objectTemplate);

    //Add template to target
    Nan::Set(target, Nan::New<String>("NJSCosmosLikeValidatorCallback").ToLocalChecked(), Nan::GetFunction(func_template).ToLocalChecked());
}
