// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from messages.djinni

#include "NJSCosmosLikeMessageCpp.hpp"
#include "NJSObjectWrapper.hpp"
#include "NJSHexUtils.hpp"

using namespace v8;
using namespace node;
using namespace std;

NAN_METHOD(NJSCosmosLikeMessage::getMessageType) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSCosmosLikeMessage::getMessageType needs 0 arguments");
    }

    //Check if parameters have correct types

    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::CosmosLikeMessage>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSCosmosLikeMessage::getMessageType : implementation of CosmosLikeMessage is not valid");
    }

    auto result = cpp_impl->getMessageType();

    //Wrap result in node object
    auto arg_0 = Nan::New<Integer>((int)result);

    //Return result
    info.GetReturnValue().Set(arg_0);
}
NAN_METHOD(NJSCosmosLikeMessage::getRawMessageType) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSCosmosLikeMessage::getRawMessageType needs 0 arguments");
    }

    //Check if parameters have correct types

    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::CosmosLikeMessage>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSCosmosLikeMessage::getRawMessageType : implementation of CosmosLikeMessage is not valid");
    }

    auto result = cpp_impl->getRawMessageType();

    //Wrap result in node object
    auto arg_0 = Nan::New<String>(result).ToLocalChecked();

    //Return result
    info.GetReturnValue().Set(arg_0);
}
NAN_METHOD(NJSCosmosLikeMessage::getSuccess) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSCosmosLikeMessage::getSuccess needs 0 arguments");
    }

    //Check if parameters have correct types

    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::CosmosLikeMessage>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSCosmosLikeMessage::getSuccess : implementation of CosmosLikeMessage is not valid");
    }

    auto result = cpp_impl->getSuccess();

    //Wrap result in node object
    auto arg_0 = Nan::New<Boolean>(result);

    //Return result
    info.GetReturnValue().Set(arg_0);
}
NAN_METHOD(NJSCosmosLikeMessage::getLog) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSCosmosLikeMessage::getLog needs 0 arguments");
    }

    //Check if parameters have correct types

    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::CosmosLikeMessage>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSCosmosLikeMessage::getLog : implementation of CosmosLikeMessage is not valid");
    }

    auto result = cpp_impl->getLog();

    //Wrap result in node object
    auto arg_0 = Nan::New<String>(result).ToLocalChecked();

    //Return result
    info.GetReturnValue().Set(arg_0);
}
NAN_METHOD(NJSCosmosLikeMessage::getIndex) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSCosmosLikeMessage::getIndex needs 0 arguments");
    }

    //Check if parameters have correct types

    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::CosmosLikeMessage>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSCosmosLikeMessage::getIndex : implementation of CosmosLikeMessage is not valid");
    }

    auto result = cpp_impl->getIndex();

    //Wrap result in node object
    auto arg_0 = Nan::New<String>(result).ToLocalChecked();

    //Return result
    info.GetReturnValue().Set(arg_0);
}
NAN_METHOD(NJSCosmosLikeMessage::wrapMsgSend) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSCosmosLikeMessage::wrapMsgSend needs 1 arguments");
    }

    //Check if parameters have correct types

    auto field_arg_0_1 = Nan::Get(info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("fromAddress").ToLocalChecked()).ToLocalChecked();
    Nan::Utf8String string_arg_0_1(field_arg_0_1->ToString(Nan::GetCurrentContext()).ToLocalChecked());
    auto arg_0_1 = std::string(*string_arg_0_1);

    auto field_arg_0_2 = Nan::Get(info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("toAddress").ToLocalChecked()).ToLocalChecked();
    Nan::Utf8String string_arg_0_2(field_arg_0_2->ToString(Nan::GetCurrentContext()).ToLocalChecked());
    auto arg_0_2 = std::string(*string_arg_0_2);

    auto field_arg_0_3 = Nan::Get(info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("amount").ToLocalChecked()).ToLocalChecked();
    vector<CosmosLikeAmount> arg_0_3;
    Local<Array> arg_0_3_container = Local<Array>::Cast(field_arg_0_3);
    for(uint32_t arg_0_3_id = 0; arg_0_3_id < arg_0_3_container->Length(); arg_0_3_id++)
    {
        if(arg_0_3_container->Get(Nan::GetCurrentContext(), arg_0_3_id).ToLocalChecked()->IsObject())
        {

            auto field_arg_0_3_elem_1 = Nan::Get(arg_0_3_container->Get(Nan::GetCurrentContext(), arg_0_3_id).ToLocalChecked()->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("amount").ToLocalChecked()).ToLocalChecked();
            Nan::Utf8String string_arg_0_3_elem_1(field_arg_0_3_elem_1->ToString(Nan::GetCurrentContext()).ToLocalChecked());
            auto arg_0_3_elem_1 = std::string(*string_arg_0_3_elem_1);

            auto field_arg_0_3_elem_2 = Nan::Get(arg_0_3_container->Get(Nan::GetCurrentContext(), arg_0_3_id).ToLocalChecked()->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("denom").ToLocalChecked()).ToLocalChecked();
            Nan::Utf8String string_arg_0_3_elem_2(field_arg_0_3_elem_2->ToString(Nan::GetCurrentContext()).ToLocalChecked());
            auto arg_0_3_elem_2 = std::string(*string_arg_0_3_elem_2);
            CosmosLikeAmount arg_0_3_elem(arg_0_3_elem_1, arg_0_3_elem_2);

            arg_0_3.emplace_back(arg_0_3_elem);
        }
    }

    CosmosLikeMsgSend arg_0(arg_0_1, arg_0_2, arg_0_3);


    auto result = ledger::core::api::CosmosLikeMessage::wrapMsgSend(arg_0);

    //Wrap result in node object
    auto arg_1 = NJSCosmosLikeMessage::wrap(result);


    //Return result
    info.GetReturnValue().Set(arg_1);
}
NAN_METHOD(NJSCosmosLikeMessage::unwrapMsgSend) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSCosmosLikeMessage::unwrapMsgSend needs 1 arguments");
    }

    //Check if parameters have correct types
    Local<Object> njs_arg_0 = info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked();
    auto arg_0 = djinni::js::ObjectWrapper<ledger::core::api::CosmosLikeMessage>::Unwrap(njs_arg_0);
    if(!arg_0)
    {
        return Nan::ThrowError("NodeJs Object to NJSCosmosLikeMessage failed");
    }


    auto result = ledger::core::api::CosmosLikeMessage::unwrapMsgSend(arg_0);

    //Wrap result in node object
    auto arg_1 = Nan::New<Object>();
    auto arg_1_1 = Nan::New<String>(result.fromAddress).ToLocalChecked();
    Nan::DefineOwnProperty(arg_1, Nan::New<String>("fromAddress").ToLocalChecked(), arg_1_1);
    auto arg_1_2 = Nan::New<String>(result.toAddress).ToLocalChecked();
    Nan::DefineOwnProperty(arg_1, Nan::New<String>("toAddress").ToLocalChecked(), arg_1_2);
    Local<Array> arg_1_3 = Nan::New<Array>();
    for(size_t arg_1_3_id = 0; arg_1_3_id < result.amount.size(); arg_1_3_id++)
    {
        auto arg_1_3_elem = Nan::New<Object>();
        auto arg_1_3_elem_1 = Nan::New<String>(result.amount[arg_1_3_id].amount).ToLocalChecked();
        Nan::DefineOwnProperty(arg_1_3_elem, Nan::New<String>("amount").ToLocalChecked(), arg_1_3_elem_1);
        auto arg_1_3_elem_2 = Nan::New<String>(result.amount[arg_1_3_id].denom).ToLocalChecked();
        Nan::DefineOwnProperty(arg_1_3_elem, Nan::New<String>("denom").ToLocalChecked(), arg_1_3_elem_2);

        Nan::Set(arg_1_3, (int)arg_1_3_id,arg_1_3_elem);
    }

    Nan::DefineOwnProperty(arg_1, Nan::New<String>("amount").ToLocalChecked(), arg_1_3);


    //Return result
    info.GetReturnValue().Set(arg_1);
}
NAN_METHOD(NJSCosmosLikeMessage::wrapMsgDelegate) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSCosmosLikeMessage::wrapMsgDelegate needs 1 arguments");
    }

    //Check if parameters have correct types

    auto field_arg_0_1 = Nan::Get(info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("delegatorAddress").ToLocalChecked()).ToLocalChecked();
    Nan::Utf8String string_arg_0_1(field_arg_0_1->ToString(Nan::GetCurrentContext()).ToLocalChecked());
    auto arg_0_1 = std::string(*string_arg_0_1);

    auto field_arg_0_2 = Nan::Get(info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("validatorAddress").ToLocalChecked()).ToLocalChecked();
    Nan::Utf8String string_arg_0_2(field_arg_0_2->ToString(Nan::GetCurrentContext()).ToLocalChecked());
    auto arg_0_2 = std::string(*string_arg_0_2);

    auto field_arg_0_3 = Nan::Get(info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("amount").ToLocalChecked()).ToLocalChecked();

    auto field_arg_0_3_1 = Nan::Get(field_arg_0_3->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("amount").ToLocalChecked()).ToLocalChecked();
    Nan::Utf8String string_arg_0_3_1(field_arg_0_3_1->ToString(Nan::GetCurrentContext()).ToLocalChecked());
    auto arg_0_3_1 = std::string(*string_arg_0_3_1);

    auto field_arg_0_3_2 = Nan::Get(field_arg_0_3->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("denom").ToLocalChecked()).ToLocalChecked();
    Nan::Utf8String string_arg_0_3_2(field_arg_0_3_2->ToString(Nan::GetCurrentContext()).ToLocalChecked());
    auto arg_0_3_2 = std::string(*string_arg_0_3_2);
    CosmosLikeAmount arg_0_3(arg_0_3_1, arg_0_3_2);

    CosmosLikeMsgDelegate arg_0(arg_0_1, arg_0_2, arg_0_3);


    auto result = ledger::core::api::CosmosLikeMessage::wrapMsgDelegate(arg_0);

    //Wrap result in node object
    auto arg_1 = NJSCosmosLikeMessage::wrap(result);


    //Return result
    info.GetReturnValue().Set(arg_1);
}
NAN_METHOD(NJSCosmosLikeMessage::unwrapMsgDelegate) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSCosmosLikeMessage::unwrapMsgDelegate needs 1 arguments");
    }

    //Check if parameters have correct types
    Local<Object> njs_arg_0 = info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked();
    auto arg_0 = djinni::js::ObjectWrapper<ledger::core::api::CosmosLikeMessage>::Unwrap(njs_arg_0);
    if(!arg_0)
    {
        return Nan::ThrowError("NodeJs Object to NJSCosmosLikeMessage failed");
    }


    auto result = ledger::core::api::CosmosLikeMessage::unwrapMsgDelegate(arg_0);

    //Wrap result in node object
    auto arg_1 = Nan::New<Object>();
    auto arg_1_1 = Nan::New<String>(result.delegatorAddress).ToLocalChecked();
    Nan::DefineOwnProperty(arg_1, Nan::New<String>("delegatorAddress").ToLocalChecked(), arg_1_1);
    auto arg_1_2 = Nan::New<String>(result.validatorAddress).ToLocalChecked();
    Nan::DefineOwnProperty(arg_1, Nan::New<String>("validatorAddress").ToLocalChecked(), arg_1_2);
    auto arg_1_3 = Nan::New<Object>();
    auto arg_1_3_1 = Nan::New<String>(result.amount.amount).ToLocalChecked();
    Nan::DefineOwnProperty(arg_1_3, Nan::New<String>("amount").ToLocalChecked(), arg_1_3_1);
    auto arg_1_3_2 = Nan::New<String>(result.amount.denom).ToLocalChecked();
    Nan::DefineOwnProperty(arg_1_3, Nan::New<String>("denom").ToLocalChecked(), arg_1_3_2);

    Nan::DefineOwnProperty(arg_1, Nan::New<String>("amount").ToLocalChecked(), arg_1_3);


    //Return result
    info.GetReturnValue().Set(arg_1);
}
NAN_METHOD(NJSCosmosLikeMessage::wrapMsgUndelegate) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSCosmosLikeMessage::wrapMsgUndelegate needs 1 arguments");
    }

    //Check if parameters have correct types

    auto field_arg_0_1 = Nan::Get(info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("delegatorAddress").ToLocalChecked()).ToLocalChecked();
    Nan::Utf8String string_arg_0_1(field_arg_0_1->ToString(Nan::GetCurrentContext()).ToLocalChecked());
    auto arg_0_1 = std::string(*string_arg_0_1);

    auto field_arg_0_2 = Nan::Get(info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("validatorAddress").ToLocalChecked()).ToLocalChecked();
    Nan::Utf8String string_arg_0_2(field_arg_0_2->ToString(Nan::GetCurrentContext()).ToLocalChecked());
    auto arg_0_2 = std::string(*string_arg_0_2);

    auto field_arg_0_3 = Nan::Get(info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("amount").ToLocalChecked()).ToLocalChecked();

    auto field_arg_0_3_1 = Nan::Get(field_arg_0_3->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("amount").ToLocalChecked()).ToLocalChecked();
    Nan::Utf8String string_arg_0_3_1(field_arg_0_3_1->ToString(Nan::GetCurrentContext()).ToLocalChecked());
    auto arg_0_3_1 = std::string(*string_arg_0_3_1);

    auto field_arg_0_3_2 = Nan::Get(field_arg_0_3->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("denom").ToLocalChecked()).ToLocalChecked();
    Nan::Utf8String string_arg_0_3_2(field_arg_0_3_2->ToString(Nan::GetCurrentContext()).ToLocalChecked());
    auto arg_0_3_2 = std::string(*string_arg_0_3_2);
    CosmosLikeAmount arg_0_3(arg_0_3_1, arg_0_3_2);

    CosmosLikeMsgUndelegate arg_0(arg_0_1, arg_0_2, arg_0_3);


    auto result = ledger::core::api::CosmosLikeMessage::wrapMsgUndelegate(arg_0);

    //Wrap result in node object
    auto arg_1 = NJSCosmosLikeMessage::wrap(result);


    //Return result
    info.GetReturnValue().Set(arg_1);
}
NAN_METHOD(NJSCosmosLikeMessage::unwrapMsgUndelegate) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSCosmosLikeMessage::unwrapMsgUndelegate needs 1 arguments");
    }

    //Check if parameters have correct types
    Local<Object> njs_arg_0 = info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked();
    auto arg_0 = djinni::js::ObjectWrapper<ledger::core::api::CosmosLikeMessage>::Unwrap(njs_arg_0);
    if(!arg_0)
    {
        return Nan::ThrowError("NodeJs Object to NJSCosmosLikeMessage failed");
    }


    auto result = ledger::core::api::CosmosLikeMessage::unwrapMsgUndelegate(arg_0);

    //Wrap result in node object
    auto arg_1 = Nan::New<Object>();
    auto arg_1_1 = Nan::New<String>(result.delegatorAddress).ToLocalChecked();
    Nan::DefineOwnProperty(arg_1, Nan::New<String>("delegatorAddress").ToLocalChecked(), arg_1_1);
    auto arg_1_2 = Nan::New<String>(result.validatorAddress).ToLocalChecked();
    Nan::DefineOwnProperty(arg_1, Nan::New<String>("validatorAddress").ToLocalChecked(), arg_1_2);
    auto arg_1_3 = Nan::New<Object>();
    auto arg_1_3_1 = Nan::New<String>(result.amount.amount).ToLocalChecked();
    Nan::DefineOwnProperty(arg_1_3, Nan::New<String>("amount").ToLocalChecked(), arg_1_3_1);
    auto arg_1_3_2 = Nan::New<String>(result.amount.denom).ToLocalChecked();
    Nan::DefineOwnProperty(arg_1_3, Nan::New<String>("denom").ToLocalChecked(), arg_1_3_2);

    Nan::DefineOwnProperty(arg_1, Nan::New<String>("amount").ToLocalChecked(), arg_1_3);


    //Return result
    info.GetReturnValue().Set(arg_1);
}
NAN_METHOD(NJSCosmosLikeMessage::wrapMsgBeginRedelegate) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSCosmosLikeMessage::wrapMsgBeginRedelegate needs 1 arguments");
    }

    //Check if parameters have correct types

    auto field_arg_0_1 = Nan::Get(info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("delegatorAddress").ToLocalChecked()).ToLocalChecked();
    Nan::Utf8String string_arg_0_1(field_arg_0_1->ToString(Nan::GetCurrentContext()).ToLocalChecked());
    auto arg_0_1 = std::string(*string_arg_0_1);

    auto field_arg_0_2 = Nan::Get(info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("validatorSourceAddress").ToLocalChecked()).ToLocalChecked();
    Nan::Utf8String string_arg_0_2(field_arg_0_2->ToString(Nan::GetCurrentContext()).ToLocalChecked());
    auto arg_0_2 = std::string(*string_arg_0_2);

    auto field_arg_0_3 = Nan::Get(info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("validatorDestinationAddress").ToLocalChecked()).ToLocalChecked();
    Nan::Utf8String string_arg_0_3(field_arg_0_3->ToString(Nan::GetCurrentContext()).ToLocalChecked());
    auto arg_0_3 = std::string(*string_arg_0_3);

    auto field_arg_0_4 = Nan::Get(info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("amount").ToLocalChecked()).ToLocalChecked();

    auto field_arg_0_4_1 = Nan::Get(field_arg_0_4->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("amount").ToLocalChecked()).ToLocalChecked();
    Nan::Utf8String string_arg_0_4_1(field_arg_0_4_1->ToString(Nan::GetCurrentContext()).ToLocalChecked());
    auto arg_0_4_1 = std::string(*string_arg_0_4_1);

    auto field_arg_0_4_2 = Nan::Get(field_arg_0_4->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("denom").ToLocalChecked()).ToLocalChecked();
    Nan::Utf8String string_arg_0_4_2(field_arg_0_4_2->ToString(Nan::GetCurrentContext()).ToLocalChecked());
    auto arg_0_4_2 = std::string(*string_arg_0_4_2);
    CosmosLikeAmount arg_0_4(arg_0_4_1, arg_0_4_2);

    CosmosLikeMsgBeginRedelegate arg_0(arg_0_1, arg_0_2, arg_0_3, arg_0_4);


    auto result = ledger::core::api::CosmosLikeMessage::wrapMsgBeginRedelegate(arg_0);

    //Wrap result in node object
    auto arg_1 = NJSCosmosLikeMessage::wrap(result);


    //Return result
    info.GetReturnValue().Set(arg_1);
}
NAN_METHOD(NJSCosmosLikeMessage::unwrapMsgBeginRedelegate) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSCosmosLikeMessage::unwrapMsgBeginRedelegate needs 1 arguments");
    }

    //Check if parameters have correct types
    Local<Object> njs_arg_0 = info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked();
    auto arg_0 = djinni::js::ObjectWrapper<ledger::core::api::CosmosLikeMessage>::Unwrap(njs_arg_0);
    if(!arg_0)
    {
        return Nan::ThrowError("NodeJs Object to NJSCosmosLikeMessage failed");
    }


    auto result = ledger::core::api::CosmosLikeMessage::unwrapMsgBeginRedelegate(arg_0);

    //Wrap result in node object
    auto arg_1 = Nan::New<Object>();
    auto arg_1_1 = Nan::New<String>(result.delegatorAddress).ToLocalChecked();
    Nan::DefineOwnProperty(arg_1, Nan::New<String>("delegatorAddress").ToLocalChecked(), arg_1_1);
    auto arg_1_2 = Nan::New<String>(result.validatorSourceAddress).ToLocalChecked();
    Nan::DefineOwnProperty(arg_1, Nan::New<String>("validatorSourceAddress").ToLocalChecked(), arg_1_2);
    auto arg_1_3 = Nan::New<String>(result.validatorDestinationAddress).ToLocalChecked();
    Nan::DefineOwnProperty(arg_1, Nan::New<String>("validatorDestinationAddress").ToLocalChecked(), arg_1_3);
    auto arg_1_4 = Nan::New<Object>();
    auto arg_1_4_1 = Nan::New<String>(result.amount.amount).ToLocalChecked();
    Nan::DefineOwnProperty(arg_1_4, Nan::New<String>("amount").ToLocalChecked(), arg_1_4_1);
    auto arg_1_4_2 = Nan::New<String>(result.amount.denom).ToLocalChecked();
    Nan::DefineOwnProperty(arg_1_4, Nan::New<String>("denom").ToLocalChecked(), arg_1_4_2);

    Nan::DefineOwnProperty(arg_1, Nan::New<String>("amount").ToLocalChecked(), arg_1_4);


    //Return result
    info.GetReturnValue().Set(arg_1);
}
NAN_METHOD(NJSCosmosLikeMessage::wrapMsgSubmitProposal) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSCosmosLikeMessage::wrapMsgSubmitProposal needs 1 arguments");
    }

    //Check if parameters have correct types

    auto field_arg_0_1 = Nan::Get(info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("content").ToLocalChecked()).ToLocalChecked();

    auto field_arg_0_1_1 = Nan::Get(field_arg_0_1->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("type").ToLocalChecked()).ToLocalChecked();
    Nan::Utf8String string_arg_0_1_1(field_arg_0_1_1->ToString(Nan::GetCurrentContext()).ToLocalChecked());
    auto arg_0_1_1 = std::string(*string_arg_0_1_1);

    auto field_arg_0_1_2 = Nan::Get(field_arg_0_1->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("title").ToLocalChecked()).ToLocalChecked();
    Nan::Utf8String string_arg_0_1_2(field_arg_0_1_2->ToString(Nan::GetCurrentContext()).ToLocalChecked());
    auto arg_0_1_2 = std::string(*string_arg_0_1_2);

    auto field_arg_0_1_3 = Nan::Get(field_arg_0_1->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("descr").ToLocalChecked()).ToLocalChecked();
    Nan::Utf8String string_arg_0_1_3(field_arg_0_1_3->ToString(Nan::GetCurrentContext()).ToLocalChecked());
    auto arg_0_1_3 = std::string(*string_arg_0_1_3);
    CosmosLikeContent arg_0_1(arg_0_1_1, arg_0_1_2, arg_0_1_3);


    auto field_arg_0_2 = Nan::Get(info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("proposer").ToLocalChecked()).ToLocalChecked();
    Nan::Utf8String string_arg_0_2(field_arg_0_2->ToString(Nan::GetCurrentContext()).ToLocalChecked());
    auto arg_0_2 = std::string(*string_arg_0_2);

    auto field_arg_0_3 = Nan::Get(info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("initialDeposit").ToLocalChecked()).ToLocalChecked();
    vector<CosmosLikeAmount> arg_0_3;
    Local<Array> arg_0_3_container = Local<Array>::Cast(field_arg_0_3);
    for(uint32_t arg_0_3_id = 0; arg_0_3_id < arg_0_3_container->Length(); arg_0_3_id++)
    {
        if(arg_0_3_container->Get(Nan::GetCurrentContext(), arg_0_3_id).ToLocalChecked()->IsObject())
        {

            auto field_arg_0_3_elem_1 = Nan::Get(arg_0_3_container->Get(Nan::GetCurrentContext(), arg_0_3_id).ToLocalChecked()->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("amount").ToLocalChecked()).ToLocalChecked();
            Nan::Utf8String string_arg_0_3_elem_1(field_arg_0_3_elem_1->ToString(Nan::GetCurrentContext()).ToLocalChecked());
            auto arg_0_3_elem_1 = std::string(*string_arg_0_3_elem_1);

            auto field_arg_0_3_elem_2 = Nan::Get(arg_0_3_container->Get(Nan::GetCurrentContext(), arg_0_3_id).ToLocalChecked()->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("denom").ToLocalChecked()).ToLocalChecked();
            Nan::Utf8String string_arg_0_3_elem_2(field_arg_0_3_elem_2->ToString(Nan::GetCurrentContext()).ToLocalChecked());
            auto arg_0_3_elem_2 = std::string(*string_arg_0_3_elem_2);
            CosmosLikeAmount arg_0_3_elem(arg_0_3_elem_1, arg_0_3_elem_2);

            arg_0_3.emplace_back(arg_0_3_elem);
        }
    }

    CosmosLikeMsgSubmitProposal arg_0(arg_0_1, arg_0_2, arg_0_3);


    auto result = ledger::core::api::CosmosLikeMessage::wrapMsgSubmitProposal(arg_0);

    //Wrap result in node object
    auto arg_1 = NJSCosmosLikeMessage::wrap(result);


    //Return result
    info.GetReturnValue().Set(arg_1);
}
NAN_METHOD(NJSCosmosLikeMessage::unwrapMsgSubmitProposal) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSCosmosLikeMessage::unwrapMsgSubmitProposal needs 1 arguments");
    }

    //Check if parameters have correct types
    Local<Object> njs_arg_0 = info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked();
    auto arg_0 = djinni::js::ObjectWrapper<ledger::core::api::CosmosLikeMessage>::Unwrap(njs_arg_0);
    if(!arg_0)
    {
        return Nan::ThrowError("NodeJs Object to NJSCosmosLikeMessage failed");
    }


    auto result = ledger::core::api::CosmosLikeMessage::unwrapMsgSubmitProposal(arg_0);

    //Wrap result in node object
    auto arg_1 = Nan::New<Object>();
    auto arg_1_1 = Nan::New<Object>();
    auto arg_1_1_1 = Nan::New<String>(result.content.type).ToLocalChecked();
    Nan::DefineOwnProperty(arg_1_1, Nan::New<String>("type").ToLocalChecked(), arg_1_1_1);
    auto arg_1_1_2 = Nan::New<String>(result.content.title).ToLocalChecked();
    Nan::DefineOwnProperty(arg_1_1, Nan::New<String>("title").ToLocalChecked(), arg_1_1_2);
    auto arg_1_1_3 = Nan::New<String>(result.content.descr).ToLocalChecked();
    Nan::DefineOwnProperty(arg_1_1, Nan::New<String>("descr").ToLocalChecked(), arg_1_1_3);

    Nan::DefineOwnProperty(arg_1, Nan::New<String>("content").ToLocalChecked(), arg_1_1);
    auto arg_1_2 = Nan::New<String>(result.proposer).ToLocalChecked();
    Nan::DefineOwnProperty(arg_1, Nan::New<String>("proposer").ToLocalChecked(), arg_1_2);
    Local<Array> arg_1_3 = Nan::New<Array>();
    for(size_t arg_1_3_id = 0; arg_1_3_id < result.initialDeposit.size(); arg_1_3_id++)
    {
        auto arg_1_3_elem = Nan::New<Object>();
        auto arg_1_3_elem_1 = Nan::New<String>(result.initialDeposit[arg_1_3_id].amount).ToLocalChecked();
        Nan::DefineOwnProperty(arg_1_3_elem, Nan::New<String>("amount").ToLocalChecked(), arg_1_3_elem_1);
        auto arg_1_3_elem_2 = Nan::New<String>(result.initialDeposit[arg_1_3_id].denom).ToLocalChecked();
        Nan::DefineOwnProperty(arg_1_3_elem, Nan::New<String>("denom").ToLocalChecked(), arg_1_3_elem_2);

        Nan::Set(arg_1_3, (int)arg_1_3_id,arg_1_3_elem);
    }

    Nan::DefineOwnProperty(arg_1, Nan::New<String>("initialDeposit").ToLocalChecked(), arg_1_3);


    //Return result
    info.GetReturnValue().Set(arg_1);
}
NAN_METHOD(NJSCosmosLikeMessage::wrapMsgVote) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSCosmosLikeMessage::wrapMsgVote needs 1 arguments");
    }

    //Check if parameters have correct types

    auto field_arg_0_1 = Nan::Get(info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("voter").ToLocalChecked()).ToLocalChecked();
    Nan::Utf8String string_arg_0_1(field_arg_0_1->ToString(Nan::GetCurrentContext()).ToLocalChecked());
    auto arg_0_1 = std::string(*string_arg_0_1);

    auto field_arg_0_2 = Nan::Get(info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("proposalId").ToLocalChecked()).ToLocalChecked();
    Nan::Utf8String string_arg_0_2(field_arg_0_2->ToString(Nan::GetCurrentContext()).ToLocalChecked());
    auto arg_0_2 = std::string(*string_arg_0_2);

    auto field_arg_0_3 = Nan::Get(info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("option").ToLocalChecked()).ToLocalChecked();
    auto arg_0_3 = (ledger::core::api::CosmosLikeVoteOption)Nan::To<int>(field_arg_0_3).FromJust();
    CosmosLikeMsgVote arg_0(arg_0_1, arg_0_2, arg_0_3);


    auto result = ledger::core::api::CosmosLikeMessage::wrapMsgVote(arg_0);

    //Wrap result in node object
    auto arg_1 = NJSCosmosLikeMessage::wrap(result);


    //Return result
    info.GetReturnValue().Set(arg_1);
}
NAN_METHOD(NJSCosmosLikeMessage::unwrapMsgVote) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSCosmosLikeMessage::unwrapMsgVote needs 1 arguments");
    }

    //Check if parameters have correct types
    Local<Object> njs_arg_0 = info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked();
    auto arg_0 = djinni::js::ObjectWrapper<ledger::core::api::CosmosLikeMessage>::Unwrap(njs_arg_0);
    if(!arg_0)
    {
        return Nan::ThrowError("NodeJs Object to NJSCosmosLikeMessage failed");
    }


    auto result = ledger::core::api::CosmosLikeMessage::unwrapMsgVote(arg_0);

    //Wrap result in node object
    auto arg_1 = Nan::New<Object>();
    auto arg_1_1 = Nan::New<String>(result.voter).ToLocalChecked();
    Nan::DefineOwnProperty(arg_1, Nan::New<String>("voter").ToLocalChecked(), arg_1_1);
    auto arg_1_2 = Nan::New<String>(result.proposalId).ToLocalChecked();
    Nan::DefineOwnProperty(arg_1, Nan::New<String>("proposalId").ToLocalChecked(), arg_1_2);
    auto arg_1_3 = Nan::New<Integer>((int)result.option);
    Nan::DefineOwnProperty(arg_1, Nan::New<String>("option").ToLocalChecked(), arg_1_3);


    //Return result
    info.GetReturnValue().Set(arg_1);
}
NAN_METHOD(NJSCosmosLikeMessage::wrapMsgDeposit) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSCosmosLikeMessage::wrapMsgDeposit needs 1 arguments");
    }

    //Check if parameters have correct types

    auto field_arg_0_1 = Nan::Get(info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("depositor").ToLocalChecked()).ToLocalChecked();
    Nan::Utf8String string_arg_0_1(field_arg_0_1->ToString(Nan::GetCurrentContext()).ToLocalChecked());
    auto arg_0_1 = std::string(*string_arg_0_1);

    auto field_arg_0_2 = Nan::Get(info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("proposalId").ToLocalChecked()).ToLocalChecked();
    Nan::Utf8String string_arg_0_2(field_arg_0_2->ToString(Nan::GetCurrentContext()).ToLocalChecked());
    auto arg_0_2 = std::string(*string_arg_0_2);

    auto field_arg_0_3 = Nan::Get(info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("amount").ToLocalChecked()).ToLocalChecked();
    vector<CosmosLikeAmount> arg_0_3;
    Local<Array> arg_0_3_container = Local<Array>::Cast(field_arg_0_3);
    for(uint32_t arg_0_3_id = 0; arg_0_3_id < arg_0_3_container->Length(); arg_0_3_id++)
    {
        if(arg_0_3_container->Get(Nan::GetCurrentContext(), arg_0_3_id).ToLocalChecked()->IsObject())
        {

            auto field_arg_0_3_elem_1 = Nan::Get(arg_0_3_container->Get(Nan::GetCurrentContext(), arg_0_3_id).ToLocalChecked()->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("amount").ToLocalChecked()).ToLocalChecked();
            Nan::Utf8String string_arg_0_3_elem_1(field_arg_0_3_elem_1->ToString(Nan::GetCurrentContext()).ToLocalChecked());
            auto arg_0_3_elem_1 = std::string(*string_arg_0_3_elem_1);

            auto field_arg_0_3_elem_2 = Nan::Get(arg_0_3_container->Get(Nan::GetCurrentContext(), arg_0_3_id).ToLocalChecked()->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("denom").ToLocalChecked()).ToLocalChecked();
            Nan::Utf8String string_arg_0_3_elem_2(field_arg_0_3_elem_2->ToString(Nan::GetCurrentContext()).ToLocalChecked());
            auto arg_0_3_elem_2 = std::string(*string_arg_0_3_elem_2);
            CosmosLikeAmount arg_0_3_elem(arg_0_3_elem_1, arg_0_3_elem_2);

            arg_0_3.emplace_back(arg_0_3_elem);
        }
    }

    CosmosLikeMsgDeposit arg_0(arg_0_1, arg_0_2, arg_0_3);


    auto result = ledger::core::api::CosmosLikeMessage::wrapMsgDeposit(arg_0);

    //Wrap result in node object
    auto arg_1 = NJSCosmosLikeMessage::wrap(result);


    //Return result
    info.GetReturnValue().Set(arg_1);
}
NAN_METHOD(NJSCosmosLikeMessage::unwrapMsgDeposit) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSCosmosLikeMessage::unwrapMsgDeposit needs 1 arguments");
    }

    //Check if parameters have correct types
    Local<Object> njs_arg_0 = info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked();
    auto arg_0 = djinni::js::ObjectWrapper<ledger::core::api::CosmosLikeMessage>::Unwrap(njs_arg_0);
    if(!arg_0)
    {
        return Nan::ThrowError("NodeJs Object to NJSCosmosLikeMessage failed");
    }


    auto result = ledger::core::api::CosmosLikeMessage::unwrapMsgDeposit(arg_0);

    //Wrap result in node object
    auto arg_1 = Nan::New<Object>();
    auto arg_1_1 = Nan::New<String>(result.depositor).ToLocalChecked();
    Nan::DefineOwnProperty(arg_1, Nan::New<String>("depositor").ToLocalChecked(), arg_1_1);
    auto arg_1_2 = Nan::New<String>(result.proposalId).ToLocalChecked();
    Nan::DefineOwnProperty(arg_1, Nan::New<String>("proposalId").ToLocalChecked(), arg_1_2);
    Local<Array> arg_1_3 = Nan::New<Array>();
    for(size_t arg_1_3_id = 0; arg_1_3_id < result.amount.size(); arg_1_3_id++)
    {
        auto arg_1_3_elem = Nan::New<Object>();
        auto arg_1_3_elem_1 = Nan::New<String>(result.amount[arg_1_3_id].amount).ToLocalChecked();
        Nan::DefineOwnProperty(arg_1_3_elem, Nan::New<String>("amount").ToLocalChecked(), arg_1_3_elem_1);
        auto arg_1_3_elem_2 = Nan::New<String>(result.amount[arg_1_3_id].denom).ToLocalChecked();
        Nan::DefineOwnProperty(arg_1_3_elem, Nan::New<String>("denom").ToLocalChecked(), arg_1_3_elem_2);

        Nan::Set(arg_1_3, (int)arg_1_3_id,arg_1_3_elem);
    }

    Nan::DefineOwnProperty(arg_1, Nan::New<String>("amount").ToLocalChecked(), arg_1_3);


    //Return result
    info.GetReturnValue().Set(arg_1);
}
NAN_METHOD(NJSCosmosLikeMessage::wrapMsgWithdrawDelegationReward) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSCosmosLikeMessage::wrapMsgWithdrawDelegationReward needs 1 arguments");
    }

    //Check if parameters have correct types

    auto field_arg_0_1 = Nan::Get(info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("delegatorAddress").ToLocalChecked()).ToLocalChecked();
    Nan::Utf8String string_arg_0_1(field_arg_0_1->ToString(Nan::GetCurrentContext()).ToLocalChecked());
    auto arg_0_1 = std::string(*string_arg_0_1);

    auto field_arg_0_2 = Nan::Get(info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("validatorAddress").ToLocalChecked()).ToLocalChecked();
    Nan::Utf8String string_arg_0_2(field_arg_0_2->ToString(Nan::GetCurrentContext()).ToLocalChecked());
    auto arg_0_2 = std::string(*string_arg_0_2);
    CosmosLikeMsgWithdrawDelegationReward arg_0(arg_0_1, arg_0_2);


    auto result = ledger::core::api::CosmosLikeMessage::wrapMsgWithdrawDelegationReward(arg_0);

    //Wrap result in node object
    auto arg_1 = NJSCosmosLikeMessage::wrap(result);


    //Return result
    info.GetReturnValue().Set(arg_1);
}
NAN_METHOD(NJSCosmosLikeMessage::unwrapMsgWithdrawDelegationReward) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSCosmosLikeMessage::unwrapMsgWithdrawDelegationReward needs 1 arguments");
    }

    //Check if parameters have correct types
    Local<Object> njs_arg_0 = info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked();
    auto arg_0 = djinni::js::ObjectWrapper<ledger::core::api::CosmosLikeMessage>::Unwrap(njs_arg_0);
    if(!arg_0)
    {
        return Nan::ThrowError("NodeJs Object to NJSCosmosLikeMessage failed");
    }


    auto result = ledger::core::api::CosmosLikeMessage::unwrapMsgWithdrawDelegationReward(arg_0);

    //Wrap result in node object
    auto arg_1 = Nan::New<Object>();
    auto arg_1_1 = Nan::New<String>(result.delegatorAddress).ToLocalChecked();
    Nan::DefineOwnProperty(arg_1, Nan::New<String>("delegatorAddress").ToLocalChecked(), arg_1_1);
    auto arg_1_2 = Nan::New<String>(result.validatorAddress).ToLocalChecked();
    Nan::DefineOwnProperty(arg_1, Nan::New<String>("validatorAddress").ToLocalChecked(), arg_1_2);


    //Return result
    info.GetReturnValue().Set(arg_1);
}
NAN_METHOD(NJSCosmosLikeMessage::wrapMsgMultiSend) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSCosmosLikeMessage::wrapMsgMultiSend needs 1 arguments");
    }

    //Check if parameters have correct types

    auto field_arg_0_1 = Nan::Get(info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("inputs").ToLocalChecked()).ToLocalChecked();
    vector<CosmosLikeMultiSendInput> arg_0_1;
    Local<Array> arg_0_1_container = Local<Array>::Cast(field_arg_0_1);
    for(uint32_t arg_0_1_id = 0; arg_0_1_id < arg_0_1_container->Length(); arg_0_1_id++)
    {
        if(arg_0_1_container->Get(Nan::GetCurrentContext(), arg_0_1_id).ToLocalChecked()->IsObject())
        {

            auto field_arg_0_1_elem_1 = Nan::Get(arg_0_1_container->Get(Nan::GetCurrentContext(), arg_0_1_id).ToLocalChecked()->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("fromAddress").ToLocalChecked()).ToLocalChecked();
            Nan::Utf8String string_arg_0_1_elem_1(field_arg_0_1_elem_1->ToString(Nan::GetCurrentContext()).ToLocalChecked());
            auto arg_0_1_elem_1 = std::string(*string_arg_0_1_elem_1);

            auto field_arg_0_1_elem_2 = Nan::Get(arg_0_1_container->Get(Nan::GetCurrentContext(), arg_0_1_id).ToLocalChecked()->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("coins").ToLocalChecked()).ToLocalChecked();
            vector<CosmosLikeAmount> arg_0_1_elem_2;
            Local<Array> arg_0_1_elem_2_container = Local<Array>::Cast(field_arg_0_1_elem_2);
            for(uint32_t arg_0_1_elem_2_id = 0; arg_0_1_elem_2_id < arg_0_1_elem_2_container->Length(); arg_0_1_elem_2_id++)
            {
                if(arg_0_1_elem_2_container->Get(Nan::GetCurrentContext(), arg_0_1_elem_2_id).ToLocalChecked()->IsObject())
                {

                    auto field_arg_0_1_elem_2_elem_1 = Nan::Get(arg_0_1_elem_2_container->Get(Nan::GetCurrentContext(), arg_0_1_elem_2_id).ToLocalChecked()->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("amount").ToLocalChecked()).ToLocalChecked();
                    Nan::Utf8String string_arg_0_1_elem_2_elem_1(field_arg_0_1_elem_2_elem_1->ToString(Nan::GetCurrentContext()).ToLocalChecked());
                    auto arg_0_1_elem_2_elem_1 = std::string(*string_arg_0_1_elem_2_elem_1);

                    auto field_arg_0_1_elem_2_elem_2 = Nan::Get(arg_0_1_elem_2_container->Get(Nan::GetCurrentContext(), arg_0_1_elem_2_id).ToLocalChecked()->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("denom").ToLocalChecked()).ToLocalChecked();
                    Nan::Utf8String string_arg_0_1_elem_2_elem_2(field_arg_0_1_elem_2_elem_2->ToString(Nan::GetCurrentContext()).ToLocalChecked());
                    auto arg_0_1_elem_2_elem_2 = std::string(*string_arg_0_1_elem_2_elem_2);
                    CosmosLikeAmount arg_0_1_elem_2_elem(arg_0_1_elem_2_elem_1, arg_0_1_elem_2_elem_2);

                    arg_0_1_elem_2.emplace_back(arg_0_1_elem_2_elem);
                }
            }

            CosmosLikeMultiSendInput arg_0_1_elem(arg_0_1_elem_1, arg_0_1_elem_2);

            arg_0_1.emplace_back(arg_0_1_elem);
        }
    }


    auto field_arg_0_2 = Nan::Get(info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("outputs").ToLocalChecked()).ToLocalChecked();
    vector<CosmosLikeMultiSendOutput> arg_0_2;
    Local<Array> arg_0_2_container = Local<Array>::Cast(field_arg_0_2);
    for(uint32_t arg_0_2_id = 0; arg_0_2_id < arg_0_2_container->Length(); arg_0_2_id++)
    {
        if(arg_0_2_container->Get(Nan::GetCurrentContext(), arg_0_2_id).ToLocalChecked()->IsObject())
        {

            auto field_arg_0_2_elem_1 = Nan::Get(arg_0_2_container->Get(Nan::GetCurrentContext(), arg_0_2_id).ToLocalChecked()->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("toAddress").ToLocalChecked()).ToLocalChecked();
            Nan::Utf8String string_arg_0_2_elem_1(field_arg_0_2_elem_1->ToString(Nan::GetCurrentContext()).ToLocalChecked());
            auto arg_0_2_elem_1 = std::string(*string_arg_0_2_elem_1);

            auto field_arg_0_2_elem_2 = Nan::Get(arg_0_2_container->Get(Nan::GetCurrentContext(), arg_0_2_id).ToLocalChecked()->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("coins").ToLocalChecked()).ToLocalChecked();
            vector<CosmosLikeAmount> arg_0_2_elem_2;
            Local<Array> arg_0_2_elem_2_container = Local<Array>::Cast(field_arg_0_2_elem_2);
            for(uint32_t arg_0_2_elem_2_id = 0; arg_0_2_elem_2_id < arg_0_2_elem_2_container->Length(); arg_0_2_elem_2_id++)
            {
                if(arg_0_2_elem_2_container->Get(Nan::GetCurrentContext(), arg_0_2_elem_2_id).ToLocalChecked()->IsObject())
                {

                    auto field_arg_0_2_elem_2_elem_1 = Nan::Get(arg_0_2_elem_2_container->Get(Nan::GetCurrentContext(), arg_0_2_elem_2_id).ToLocalChecked()->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("amount").ToLocalChecked()).ToLocalChecked();
                    Nan::Utf8String string_arg_0_2_elem_2_elem_1(field_arg_0_2_elem_2_elem_1->ToString(Nan::GetCurrentContext()).ToLocalChecked());
                    auto arg_0_2_elem_2_elem_1 = std::string(*string_arg_0_2_elem_2_elem_1);

                    auto field_arg_0_2_elem_2_elem_2 = Nan::Get(arg_0_2_elem_2_container->Get(Nan::GetCurrentContext(), arg_0_2_elem_2_id).ToLocalChecked()->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("denom").ToLocalChecked()).ToLocalChecked();
                    Nan::Utf8String string_arg_0_2_elem_2_elem_2(field_arg_0_2_elem_2_elem_2->ToString(Nan::GetCurrentContext()).ToLocalChecked());
                    auto arg_0_2_elem_2_elem_2 = std::string(*string_arg_0_2_elem_2_elem_2);
                    CosmosLikeAmount arg_0_2_elem_2_elem(arg_0_2_elem_2_elem_1, arg_0_2_elem_2_elem_2);

                    arg_0_2_elem_2.emplace_back(arg_0_2_elem_2_elem);
                }
            }

            CosmosLikeMultiSendOutput arg_0_2_elem(arg_0_2_elem_1, arg_0_2_elem_2);

            arg_0_2.emplace_back(arg_0_2_elem);
        }
    }

    CosmosLikeMsgMultiSend arg_0(arg_0_1, arg_0_2);


    auto result = ledger::core::api::CosmosLikeMessage::wrapMsgMultiSend(arg_0);

    //Wrap result in node object
    auto arg_1 = NJSCosmosLikeMessage::wrap(result);


    //Return result
    info.GetReturnValue().Set(arg_1);
}
NAN_METHOD(NJSCosmosLikeMessage::unwrapMsgMultiSend) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSCosmosLikeMessage::unwrapMsgMultiSend needs 1 arguments");
    }

    //Check if parameters have correct types
    Local<Object> njs_arg_0 = info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked();
    auto arg_0 = djinni::js::ObjectWrapper<ledger::core::api::CosmosLikeMessage>::Unwrap(njs_arg_0);
    if(!arg_0)
    {
        return Nan::ThrowError("NodeJs Object to NJSCosmosLikeMessage failed");
    }


    auto result = ledger::core::api::CosmosLikeMessage::unwrapMsgMultiSend(arg_0);

    //Wrap result in node object
    auto arg_1 = Nan::New<Object>();
    Local<Array> arg_1_1 = Nan::New<Array>();
    for(size_t arg_1_1_id = 0; arg_1_1_id < result.inputs.size(); arg_1_1_id++)
    {
        auto arg_1_1_elem = Nan::New<Object>();
        auto arg_1_1_elem_1 = Nan::New<String>(result.inputs[arg_1_1_id].fromAddress).ToLocalChecked();
        Nan::DefineOwnProperty(arg_1_1_elem, Nan::New<String>("fromAddress").ToLocalChecked(), arg_1_1_elem_1);
        Local<Array> arg_1_1_elem_2 = Nan::New<Array>();
        for(size_t arg_1_1_elem_2_id = 0; arg_1_1_elem_2_id < result.inputs[arg_1_1_id].coins.size(); arg_1_1_elem_2_id++)
        {
            auto arg_1_1_elem_2_elem = Nan::New<Object>();
            auto arg_1_1_elem_2_elem_1 = Nan::New<String>(result.inputs[arg_1_1_id].coins[arg_1_1_elem_2_id].amount).ToLocalChecked();
            Nan::DefineOwnProperty(arg_1_1_elem_2_elem, Nan::New<String>("amount").ToLocalChecked(), arg_1_1_elem_2_elem_1);
            auto arg_1_1_elem_2_elem_2 = Nan::New<String>(result.inputs[arg_1_1_id].coins[arg_1_1_elem_2_id].denom).ToLocalChecked();
            Nan::DefineOwnProperty(arg_1_1_elem_2_elem, Nan::New<String>("denom").ToLocalChecked(), arg_1_1_elem_2_elem_2);

            Nan::Set(arg_1_1_elem_2, (int)arg_1_1_elem_2_id,arg_1_1_elem_2_elem);
        }

        Nan::DefineOwnProperty(arg_1_1_elem, Nan::New<String>("coins").ToLocalChecked(), arg_1_1_elem_2);

        Nan::Set(arg_1_1, (int)arg_1_1_id,arg_1_1_elem);
    }

    Nan::DefineOwnProperty(arg_1, Nan::New<String>("inputs").ToLocalChecked(), arg_1_1);
    Local<Array> arg_1_2 = Nan::New<Array>();
    for(size_t arg_1_2_id = 0; arg_1_2_id < result.outputs.size(); arg_1_2_id++)
    {
        auto arg_1_2_elem = Nan::New<Object>();
        auto arg_1_2_elem_1 = Nan::New<String>(result.outputs[arg_1_2_id].toAddress).ToLocalChecked();
        Nan::DefineOwnProperty(arg_1_2_elem, Nan::New<String>("toAddress").ToLocalChecked(), arg_1_2_elem_1);
        Local<Array> arg_1_2_elem_2 = Nan::New<Array>();
        for(size_t arg_1_2_elem_2_id = 0; arg_1_2_elem_2_id < result.outputs[arg_1_2_id].coins.size(); arg_1_2_elem_2_id++)
        {
            auto arg_1_2_elem_2_elem = Nan::New<Object>();
            auto arg_1_2_elem_2_elem_1 = Nan::New<String>(result.outputs[arg_1_2_id].coins[arg_1_2_elem_2_id].amount).ToLocalChecked();
            Nan::DefineOwnProperty(arg_1_2_elem_2_elem, Nan::New<String>("amount").ToLocalChecked(), arg_1_2_elem_2_elem_1);
            auto arg_1_2_elem_2_elem_2 = Nan::New<String>(result.outputs[arg_1_2_id].coins[arg_1_2_elem_2_id].denom).ToLocalChecked();
            Nan::DefineOwnProperty(arg_1_2_elem_2_elem, Nan::New<String>("denom").ToLocalChecked(), arg_1_2_elem_2_elem_2);

            Nan::Set(arg_1_2_elem_2, (int)arg_1_2_elem_2_id,arg_1_2_elem_2_elem);
        }

        Nan::DefineOwnProperty(arg_1_2_elem, Nan::New<String>("coins").ToLocalChecked(), arg_1_2_elem_2);

        Nan::Set(arg_1_2, (int)arg_1_2_id,arg_1_2_elem);
    }

    Nan::DefineOwnProperty(arg_1, Nan::New<String>("outputs").ToLocalChecked(), arg_1_2);


    //Return result
    info.GetReturnValue().Set(arg_1);
}
NAN_METHOD(NJSCosmosLikeMessage::wrapMsgCreateValidator) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSCosmosLikeMessage::wrapMsgCreateValidator needs 1 arguments");
    }

    //Check if parameters have correct types

    auto field_arg_0_1 = Nan::Get(info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("descr").ToLocalChecked()).ToLocalChecked();

    auto field_arg_0_1_1 = Nan::Get(field_arg_0_1->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("moniker").ToLocalChecked()).ToLocalChecked();
    Nan::Utf8String string_arg_0_1_1(field_arg_0_1_1->ToString(Nan::GetCurrentContext()).ToLocalChecked());
    auto arg_0_1_1 = std::string(*string_arg_0_1_1);

    auto field_arg_0_1_2 = Nan::Get(field_arg_0_1->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("identity").ToLocalChecked()).ToLocalChecked();
    auto arg_0_1_2 = std::experimental::optional<std::string>();
    if(!field_arg_0_1_2->IsNull() && !field_arg_0_1_2->IsUndefined())
    {
        Nan::Utf8String string_opt_arg_0_1_2(field_arg_0_1_2->ToString(Nan::GetCurrentContext()).ToLocalChecked());
        auto opt_arg_0_1_2 = std::string(*string_opt_arg_0_1_2);
        arg_0_1_2.emplace(opt_arg_0_1_2);
    }


    auto field_arg_0_1_3 = Nan::Get(field_arg_0_1->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("website").ToLocalChecked()).ToLocalChecked();
    auto arg_0_1_3 = std::experimental::optional<std::string>();
    if(!field_arg_0_1_3->IsNull() && !field_arg_0_1_3->IsUndefined())
    {
        Nan::Utf8String string_opt_arg_0_1_3(field_arg_0_1_3->ToString(Nan::GetCurrentContext()).ToLocalChecked());
        auto opt_arg_0_1_3 = std::string(*string_opt_arg_0_1_3);
        arg_0_1_3.emplace(opt_arg_0_1_3);
    }


    auto field_arg_0_1_4 = Nan::Get(field_arg_0_1->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("securityContact").ToLocalChecked()).ToLocalChecked();
    auto arg_0_1_4 = std::experimental::optional<std::string>();
    if(!field_arg_0_1_4->IsNull() && !field_arg_0_1_4->IsUndefined())
    {
        Nan::Utf8String string_opt_arg_0_1_4(field_arg_0_1_4->ToString(Nan::GetCurrentContext()).ToLocalChecked());
        auto opt_arg_0_1_4 = std::string(*string_opt_arg_0_1_4);
        arg_0_1_4.emplace(opt_arg_0_1_4);
    }


    auto field_arg_0_1_5 = Nan::Get(field_arg_0_1->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("details").ToLocalChecked()).ToLocalChecked();
    auto arg_0_1_5 = std::experimental::optional<std::string>();
    if(!field_arg_0_1_5->IsNull() && !field_arg_0_1_5->IsUndefined())
    {
        Nan::Utf8String string_opt_arg_0_1_5(field_arg_0_1_5->ToString(Nan::GetCurrentContext()).ToLocalChecked());
        auto opt_arg_0_1_5 = std::string(*string_opt_arg_0_1_5);
        arg_0_1_5.emplace(opt_arg_0_1_5);
    }

    CosmosLikeValidatorDescription arg_0_1(arg_0_1_1, arg_0_1_2, arg_0_1_3, arg_0_1_4, arg_0_1_5);


    auto field_arg_0_2 = Nan::Get(info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("commission").ToLocalChecked()).ToLocalChecked();

    auto field_arg_0_2_1 = Nan::Get(field_arg_0_2->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("rates").ToLocalChecked()).ToLocalChecked();

    auto field_arg_0_2_1_1 = Nan::Get(field_arg_0_2_1->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("rate").ToLocalChecked()).ToLocalChecked();
    Nan::Utf8String string_arg_0_2_1_1(field_arg_0_2_1_1->ToString(Nan::GetCurrentContext()).ToLocalChecked());
    auto arg_0_2_1_1 = std::string(*string_arg_0_2_1_1);

    auto field_arg_0_2_1_2 = Nan::Get(field_arg_0_2_1->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("maxRate").ToLocalChecked()).ToLocalChecked();
    Nan::Utf8String string_arg_0_2_1_2(field_arg_0_2_1_2->ToString(Nan::GetCurrentContext()).ToLocalChecked());
    auto arg_0_2_1_2 = std::string(*string_arg_0_2_1_2);

    auto field_arg_0_2_1_3 = Nan::Get(field_arg_0_2_1->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("maxChangeRate").ToLocalChecked()).ToLocalChecked();
    Nan::Utf8String string_arg_0_2_1_3(field_arg_0_2_1_3->ToString(Nan::GetCurrentContext()).ToLocalChecked());
    auto arg_0_2_1_3 = std::string(*string_arg_0_2_1_3);
    CosmosLikeCommissionRates arg_0_2_1(arg_0_2_1_1, arg_0_2_1_2, arg_0_2_1_3);


    auto field_arg_0_2_2 = Nan::Get(field_arg_0_2->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("updateTime").ToLocalChecked()).ToLocalChecked();
    auto time_arg_0_2_2 = Nan::To<int32_t>(field_arg_0_2_2).FromJust();
    auto arg_0_2_2 = chrono::system_clock::time_point(chrono::milliseconds(time_arg_0_2_2));
    CosmosLikeValidatorCommission arg_0_2(arg_0_2_1, arg_0_2_2);


    auto field_arg_0_3 = Nan::Get(info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("minSelfDelegation").ToLocalChecked()).ToLocalChecked();
    Nan::Utf8String string_arg_0_3(field_arg_0_3->ToString(Nan::GetCurrentContext()).ToLocalChecked());
    auto arg_0_3 = std::string(*string_arg_0_3);

    auto field_arg_0_4 = Nan::Get(info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("delegatorAddress").ToLocalChecked()).ToLocalChecked();
    Nan::Utf8String string_arg_0_4(field_arg_0_4->ToString(Nan::GetCurrentContext()).ToLocalChecked());
    auto arg_0_4 = std::string(*string_arg_0_4);

    auto field_arg_0_5 = Nan::Get(info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("validatorAddress").ToLocalChecked()).ToLocalChecked();
    Nan::Utf8String string_arg_0_5(field_arg_0_5->ToString(Nan::GetCurrentContext()).ToLocalChecked());
    auto arg_0_5 = std::string(*string_arg_0_5);

    auto field_arg_0_6 = Nan::Get(info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("pubkey").ToLocalChecked()).ToLocalChecked();
    Nan::Utf8String string_arg_0_6(field_arg_0_6->ToString(Nan::GetCurrentContext()).ToLocalChecked());
    auto arg_0_6 = std::string(*string_arg_0_6);

    auto field_arg_0_7 = Nan::Get(info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("value").ToLocalChecked()).ToLocalChecked();

    auto field_arg_0_7_1 = Nan::Get(field_arg_0_7->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("amount").ToLocalChecked()).ToLocalChecked();
    Nan::Utf8String string_arg_0_7_1(field_arg_0_7_1->ToString(Nan::GetCurrentContext()).ToLocalChecked());
    auto arg_0_7_1 = std::string(*string_arg_0_7_1);

    auto field_arg_0_7_2 = Nan::Get(field_arg_0_7->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("denom").ToLocalChecked()).ToLocalChecked();
    Nan::Utf8String string_arg_0_7_2(field_arg_0_7_2->ToString(Nan::GetCurrentContext()).ToLocalChecked());
    auto arg_0_7_2 = std::string(*string_arg_0_7_2);
    CosmosLikeAmount arg_0_7(arg_0_7_1, arg_0_7_2);

    CosmosLikeMsgCreateValidator arg_0(arg_0_1, arg_0_2, arg_0_3, arg_0_4, arg_0_5, arg_0_6, arg_0_7);


    auto result = ledger::core::api::CosmosLikeMessage::wrapMsgCreateValidator(arg_0);

    //Wrap result in node object
    auto arg_1 = NJSCosmosLikeMessage::wrap(result);


    //Return result
    info.GetReturnValue().Set(arg_1);
}
NAN_METHOD(NJSCosmosLikeMessage::unwrapMsgCreateValidator) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSCosmosLikeMessage::unwrapMsgCreateValidator needs 1 arguments");
    }

    //Check if parameters have correct types
    Local<Object> njs_arg_0 = info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked();
    auto arg_0 = djinni::js::ObjectWrapper<ledger::core::api::CosmosLikeMessage>::Unwrap(njs_arg_0);
    if(!arg_0)
    {
        return Nan::ThrowError("NodeJs Object to NJSCosmosLikeMessage failed");
    }


    auto result = ledger::core::api::CosmosLikeMessage::unwrapMsgCreateValidator(arg_0);

    //Wrap result in node object
    auto arg_1 = Nan::New<Object>();
    auto arg_1_1 = Nan::New<Object>();
    auto arg_1_1_1 = Nan::New<String>(result.descr.moniker).ToLocalChecked();
    Nan::DefineOwnProperty(arg_1_1, Nan::New<String>("moniker").ToLocalChecked(), arg_1_1_1);
    Local<Value> arg_1_1_2;
    if(result.descr.identity)
    {
        auto arg_1_1_2_optional = (result.descr.identity).value();
        auto arg_1_1_2_tmp = Nan::New<String>(arg_1_1_2_optional).ToLocalChecked();
        arg_1_1_2 = arg_1_1_2_tmp;
    }

    Nan::DefineOwnProperty(arg_1_1, Nan::New<String>("identity").ToLocalChecked(), arg_1_1_2);
    Local<Value> arg_1_1_3;
    if(result.descr.website)
    {
        auto arg_1_1_3_optional = (result.descr.website).value();
        auto arg_1_1_3_tmp = Nan::New<String>(arg_1_1_3_optional).ToLocalChecked();
        arg_1_1_3 = arg_1_1_3_tmp;
    }

    Nan::DefineOwnProperty(arg_1_1, Nan::New<String>("website").ToLocalChecked(), arg_1_1_3);
    Local<Value> arg_1_1_4;
    if(result.descr.securityContact)
    {
        auto arg_1_1_4_optional = (result.descr.securityContact).value();
        auto arg_1_1_4_tmp = Nan::New<String>(arg_1_1_4_optional).ToLocalChecked();
        arg_1_1_4 = arg_1_1_4_tmp;
    }

    Nan::DefineOwnProperty(arg_1_1, Nan::New<String>("securityContact").ToLocalChecked(), arg_1_1_4);
    Local<Value> arg_1_1_5;
    if(result.descr.details)
    {
        auto arg_1_1_5_optional = (result.descr.details).value();
        auto arg_1_1_5_tmp = Nan::New<String>(arg_1_1_5_optional).ToLocalChecked();
        arg_1_1_5 = arg_1_1_5_tmp;
    }

    Nan::DefineOwnProperty(arg_1_1, Nan::New<String>("details").ToLocalChecked(), arg_1_1_5);

    Nan::DefineOwnProperty(arg_1, Nan::New<String>("descr").ToLocalChecked(), arg_1_1);
    auto arg_1_2 = Nan::New<Object>();
    auto arg_1_2_1 = Nan::New<Object>();
    auto arg_1_2_1_1 = Nan::New<String>(result.commission.rates.rate).ToLocalChecked();
    Nan::DefineOwnProperty(arg_1_2_1, Nan::New<String>("rate").ToLocalChecked(), arg_1_2_1_1);
    auto arg_1_2_1_2 = Nan::New<String>(result.commission.rates.maxRate).ToLocalChecked();
    Nan::DefineOwnProperty(arg_1_2_1, Nan::New<String>("maxRate").ToLocalChecked(), arg_1_2_1_2);
    auto arg_1_2_1_3 = Nan::New<String>(result.commission.rates.maxChangeRate).ToLocalChecked();
    Nan::DefineOwnProperty(arg_1_2_1, Nan::New<String>("maxChangeRate").ToLocalChecked(), arg_1_2_1_3);

    Nan::DefineOwnProperty(arg_1_2, Nan::New<String>("rates").ToLocalChecked(), arg_1_2_1);
    auto date_arg_1_2_2 = chrono::duration_cast<chrono::milliseconds>(result.commission.updateTime.time_since_epoch()).count();
    auto arg_1_2_2 = Nan::New<Date>(date_arg_1_2_2).ToLocalChecked();
    Nan::DefineOwnProperty(arg_1_2, Nan::New<String>("updateTime").ToLocalChecked(), arg_1_2_2);

    Nan::DefineOwnProperty(arg_1, Nan::New<String>("commission").ToLocalChecked(), arg_1_2);
    auto arg_1_3 = Nan::New<String>(result.minSelfDelegation).ToLocalChecked();
    Nan::DefineOwnProperty(arg_1, Nan::New<String>("minSelfDelegation").ToLocalChecked(), arg_1_3);
    auto arg_1_4 = Nan::New<String>(result.delegatorAddress).ToLocalChecked();
    Nan::DefineOwnProperty(arg_1, Nan::New<String>("delegatorAddress").ToLocalChecked(), arg_1_4);
    auto arg_1_5 = Nan::New<String>(result.validatorAddress).ToLocalChecked();
    Nan::DefineOwnProperty(arg_1, Nan::New<String>("validatorAddress").ToLocalChecked(), arg_1_5);
    auto arg_1_6 = Nan::New<String>(result.pubkey).ToLocalChecked();
    Nan::DefineOwnProperty(arg_1, Nan::New<String>("pubkey").ToLocalChecked(), arg_1_6);
    auto arg_1_7 = Nan::New<Object>();
    auto arg_1_7_1 = Nan::New<String>(result.value.amount).ToLocalChecked();
    Nan::DefineOwnProperty(arg_1_7, Nan::New<String>("amount").ToLocalChecked(), arg_1_7_1);
    auto arg_1_7_2 = Nan::New<String>(result.value.denom).ToLocalChecked();
    Nan::DefineOwnProperty(arg_1_7, Nan::New<String>("denom").ToLocalChecked(), arg_1_7_2);

    Nan::DefineOwnProperty(arg_1, Nan::New<String>("value").ToLocalChecked(), arg_1_7);


    //Return result
    info.GetReturnValue().Set(arg_1);
}
NAN_METHOD(NJSCosmosLikeMessage::wrapMsgEditValidator) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSCosmosLikeMessage::wrapMsgEditValidator needs 1 arguments");
    }

    //Check if parameters have correct types

    auto field_arg_0_1 = Nan::Get(info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("descr").ToLocalChecked()).ToLocalChecked();
    auto arg_0_1 = std::experimental::optional<CosmosLikeValidatorDescription>();
    if(!field_arg_0_1->IsNull() && !field_arg_0_1->IsUndefined())
    {

        auto field_opt_arg_0_1_1 = Nan::Get(field_arg_0_1->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("moniker").ToLocalChecked()).ToLocalChecked();
        Nan::Utf8String string_opt_arg_0_1_1(field_opt_arg_0_1_1->ToString(Nan::GetCurrentContext()).ToLocalChecked());
        auto opt_arg_0_1_1 = std::string(*string_opt_arg_0_1_1);

        auto field_opt_arg_0_1_2 = Nan::Get(field_arg_0_1->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("identity").ToLocalChecked()).ToLocalChecked();
        auto opt_arg_0_1_2 = std::experimental::optional<std::string>();
        if(!field_opt_arg_0_1_2->IsNull() && !field_opt_arg_0_1_2->IsUndefined())
        {
            Nan::Utf8String string_opt_opt_arg_0_1_2(field_opt_arg_0_1_2->ToString(Nan::GetCurrentContext()).ToLocalChecked());
            auto opt_opt_arg_0_1_2 = std::string(*string_opt_opt_arg_0_1_2);
            opt_arg_0_1_2.emplace(opt_opt_arg_0_1_2);
        }


        auto field_opt_arg_0_1_3 = Nan::Get(field_arg_0_1->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("website").ToLocalChecked()).ToLocalChecked();
        auto opt_arg_0_1_3 = std::experimental::optional<std::string>();
        if(!field_opt_arg_0_1_3->IsNull() && !field_opt_arg_0_1_3->IsUndefined())
        {
            Nan::Utf8String string_opt_opt_arg_0_1_3(field_opt_arg_0_1_3->ToString(Nan::GetCurrentContext()).ToLocalChecked());
            auto opt_opt_arg_0_1_3 = std::string(*string_opt_opt_arg_0_1_3);
            opt_arg_0_1_3.emplace(opt_opt_arg_0_1_3);
        }


        auto field_opt_arg_0_1_4 = Nan::Get(field_arg_0_1->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("securityContact").ToLocalChecked()).ToLocalChecked();
        auto opt_arg_0_1_4 = std::experimental::optional<std::string>();
        if(!field_opt_arg_0_1_4->IsNull() && !field_opt_arg_0_1_4->IsUndefined())
        {
            Nan::Utf8String string_opt_opt_arg_0_1_4(field_opt_arg_0_1_4->ToString(Nan::GetCurrentContext()).ToLocalChecked());
            auto opt_opt_arg_0_1_4 = std::string(*string_opt_opt_arg_0_1_4);
            opt_arg_0_1_4.emplace(opt_opt_arg_0_1_4);
        }


        auto field_opt_arg_0_1_5 = Nan::Get(field_arg_0_1->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("details").ToLocalChecked()).ToLocalChecked();
        auto opt_arg_0_1_5 = std::experimental::optional<std::string>();
        if(!field_opt_arg_0_1_5->IsNull() && !field_opt_arg_0_1_5->IsUndefined())
        {
            Nan::Utf8String string_opt_opt_arg_0_1_5(field_opt_arg_0_1_5->ToString(Nan::GetCurrentContext()).ToLocalChecked());
            auto opt_opt_arg_0_1_5 = std::string(*string_opt_opt_arg_0_1_5);
            opt_arg_0_1_5.emplace(opt_opt_arg_0_1_5);
        }

        CosmosLikeValidatorDescription opt_arg_0_1(opt_arg_0_1_1, opt_arg_0_1_2, opt_arg_0_1_3, opt_arg_0_1_4, opt_arg_0_1_5);

        arg_0_1.emplace(opt_arg_0_1);
    }


    auto field_arg_0_2 = Nan::Get(info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("validatorAddress").ToLocalChecked()).ToLocalChecked();
    Nan::Utf8String string_arg_0_2(field_arg_0_2->ToString(Nan::GetCurrentContext()).ToLocalChecked());
    auto arg_0_2 = std::string(*string_arg_0_2);

    auto field_arg_0_3 = Nan::Get(info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("commissionRate").ToLocalChecked()).ToLocalChecked();
    auto arg_0_3 = std::experimental::optional<std::string>();
    if(!field_arg_0_3->IsNull() && !field_arg_0_3->IsUndefined())
    {
        Nan::Utf8String string_opt_arg_0_3(field_arg_0_3->ToString(Nan::GetCurrentContext()).ToLocalChecked());
        auto opt_arg_0_3 = std::string(*string_opt_arg_0_3);
        arg_0_3.emplace(opt_arg_0_3);
    }


    auto field_arg_0_4 = Nan::Get(info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("minSelfDelegation").ToLocalChecked()).ToLocalChecked();
    auto arg_0_4 = std::experimental::optional<std::string>();
    if(!field_arg_0_4->IsNull() && !field_arg_0_4->IsUndefined())
    {
        Nan::Utf8String string_opt_arg_0_4(field_arg_0_4->ToString(Nan::GetCurrentContext()).ToLocalChecked());
        auto opt_arg_0_4 = std::string(*string_opt_arg_0_4);
        arg_0_4.emplace(opt_arg_0_4);
    }

    CosmosLikeMsgEditValidator arg_0(arg_0_1, arg_0_2, arg_0_3, arg_0_4);


    auto result = ledger::core::api::CosmosLikeMessage::wrapMsgEditValidator(arg_0);

    //Wrap result in node object
    auto arg_1 = NJSCosmosLikeMessage::wrap(result);


    //Return result
    info.GetReturnValue().Set(arg_1);
}
NAN_METHOD(NJSCosmosLikeMessage::unwrapMsgEditValidator) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSCosmosLikeMessage::unwrapMsgEditValidator needs 1 arguments");
    }

    //Check if parameters have correct types
    Local<Object> njs_arg_0 = info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked();
    auto arg_0 = djinni::js::ObjectWrapper<ledger::core::api::CosmosLikeMessage>::Unwrap(njs_arg_0);
    if(!arg_0)
    {
        return Nan::ThrowError("NodeJs Object to NJSCosmosLikeMessage failed");
    }


    auto result = ledger::core::api::CosmosLikeMessage::unwrapMsgEditValidator(arg_0);

    //Wrap result in node object
    auto arg_1 = Nan::New<Object>();
    Local<Value> arg_1_1;
    if(result.descr)
    {
        auto arg_1_1_optional = (result.descr).value();
        auto arg_1_1_tmp = Nan::New<Object>();
        auto arg_1_1_tmp_1 = Nan::New<String>(arg_1_1_optional.moniker).ToLocalChecked();
        Nan::DefineOwnProperty(arg_1_1_tmp, Nan::New<String>("moniker").ToLocalChecked(), arg_1_1_tmp_1);
        Local<Value> arg_1_1_tmp_2;
        if(arg_1_1_optional.identity)
        {
            auto arg_1_1_tmp_2_optional = (arg_1_1_optional.identity).value();
            auto arg_1_1_tmp_2_tmp = Nan::New<String>(arg_1_1_tmp_2_optional).ToLocalChecked();
            arg_1_1_tmp_2 = arg_1_1_tmp_2_tmp;
        }

        Nan::DefineOwnProperty(arg_1_1_tmp, Nan::New<String>("identity").ToLocalChecked(), arg_1_1_tmp_2);
        Local<Value> arg_1_1_tmp_3;
        if(arg_1_1_optional.website)
        {
            auto arg_1_1_tmp_3_optional = (arg_1_1_optional.website).value();
            auto arg_1_1_tmp_3_tmp = Nan::New<String>(arg_1_1_tmp_3_optional).ToLocalChecked();
            arg_1_1_tmp_3 = arg_1_1_tmp_3_tmp;
        }

        Nan::DefineOwnProperty(arg_1_1_tmp, Nan::New<String>("website").ToLocalChecked(), arg_1_1_tmp_3);
        Local<Value> arg_1_1_tmp_4;
        if(arg_1_1_optional.securityContact)
        {
            auto arg_1_1_tmp_4_optional = (arg_1_1_optional.securityContact).value();
            auto arg_1_1_tmp_4_tmp = Nan::New<String>(arg_1_1_tmp_4_optional).ToLocalChecked();
            arg_1_1_tmp_4 = arg_1_1_tmp_4_tmp;
        }

        Nan::DefineOwnProperty(arg_1_1_tmp, Nan::New<String>("securityContact").ToLocalChecked(), arg_1_1_tmp_4);
        Local<Value> arg_1_1_tmp_5;
        if(arg_1_1_optional.details)
        {
            auto arg_1_1_tmp_5_optional = (arg_1_1_optional.details).value();
            auto arg_1_1_tmp_5_tmp = Nan::New<String>(arg_1_1_tmp_5_optional).ToLocalChecked();
            arg_1_1_tmp_5 = arg_1_1_tmp_5_tmp;
        }

        Nan::DefineOwnProperty(arg_1_1_tmp, Nan::New<String>("details").ToLocalChecked(), arg_1_1_tmp_5);

        arg_1_1 = arg_1_1_tmp;
    }

    Nan::DefineOwnProperty(arg_1, Nan::New<String>("descr").ToLocalChecked(), arg_1_1);
    auto arg_1_2 = Nan::New<String>(result.validatorAddress).ToLocalChecked();
    Nan::DefineOwnProperty(arg_1, Nan::New<String>("validatorAddress").ToLocalChecked(), arg_1_2);
    Local<Value> arg_1_3;
    if(result.commissionRate)
    {
        auto arg_1_3_optional = (result.commissionRate).value();
        auto arg_1_3_tmp = Nan::New<String>(arg_1_3_optional).ToLocalChecked();
        arg_1_3 = arg_1_3_tmp;
    }

    Nan::DefineOwnProperty(arg_1, Nan::New<String>("commissionRate").ToLocalChecked(), arg_1_3);
    Local<Value> arg_1_4;
    if(result.minSelfDelegation)
    {
        auto arg_1_4_optional = (result.minSelfDelegation).value();
        auto arg_1_4_tmp = Nan::New<String>(arg_1_4_optional).ToLocalChecked();
        arg_1_4 = arg_1_4_tmp;
    }

    Nan::DefineOwnProperty(arg_1, Nan::New<String>("minSelfDelegation").ToLocalChecked(), arg_1_4);


    //Return result
    info.GetReturnValue().Set(arg_1);
}
NAN_METHOD(NJSCosmosLikeMessage::wrapMsgSetWithdrawAddress) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSCosmosLikeMessage::wrapMsgSetWithdrawAddress needs 1 arguments");
    }

    //Check if parameters have correct types

    auto field_arg_0_1 = Nan::Get(info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("delegatorAddress").ToLocalChecked()).ToLocalChecked();
    Nan::Utf8String string_arg_0_1(field_arg_0_1->ToString(Nan::GetCurrentContext()).ToLocalChecked());
    auto arg_0_1 = std::string(*string_arg_0_1);

    auto field_arg_0_2 = Nan::Get(info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("withdrawAddress").ToLocalChecked()).ToLocalChecked();
    Nan::Utf8String string_arg_0_2(field_arg_0_2->ToString(Nan::GetCurrentContext()).ToLocalChecked());
    auto arg_0_2 = std::string(*string_arg_0_2);
    CosmosLikeMsgSetWithdrawAddress arg_0(arg_0_1, arg_0_2);


    auto result = ledger::core::api::CosmosLikeMessage::wrapMsgSetWithdrawAddress(arg_0);

    //Wrap result in node object
    auto arg_1 = NJSCosmosLikeMessage::wrap(result);


    //Return result
    info.GetReturnValue().Set(arg_1);
}
NAN_METHOD(NJSCosmosLikeMessage::unwrapMsgSetWithdrawAddress) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSCosmosLikeMessage::unwrapMsgSetWithdrawAddress needs 1 arguments");
    }

    //Check if parameters have correct types
    Local<Object> njs_arg_0 = info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked();
    auto arg_0 = djinni::js::ObjectWrapper<ledger::core::api::CosmosLikeMessage>::Unwrap(njs_arg_0);
    if(!arg_0)
    {
        return Nan::ThrowError("NodeJs Object to NJSCosmosLikeMessage failed");
    }


    auto result = ledger::core::api::CosmosLikeMessage::unwrapMsgSetWithdrawAddress(arg_0);

    //Wrap result in node object
    auto arg_1 = Nan::New<Object>();
    auto arg_1_1 = Nan::New<String>(result.delegatorAddress).ToLocalChecked();
    Nan::DefineOwnProperty(arg_1, Nan::New<String>("delegatorAddress").ToLocalChecked(), arg_1_1);
    auto arg_1_2 = Nan::New<String>(result.withdrawAddress).ToLocalChecked();
    Nan::DefineOwnProperty(arg_1, Nan::New<String>("withdrawAddress").ToLocalChecked(), arg_1_2);


    //Return result
    info.GetReturnValue().Set(arg_1);
}
NAN_METHOD(NJSCosmosLikeMessage::wrapMsgWithdrawDelegatorReward) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSCosmosLikeMessage::wrapMsgWithdrawDelegatorReward needs 1 arguments");
    }

    //Check if parameters have correct types

    auto field_arg_0_1 = Nan::Get(info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("delegatorAddress").ToLocalChecked()).ToLocalChecked();
    Nan::Utf8String string_arg_0_1(field_arg_0_1->ToString(Nan::GetCurrentContext()).ToLocalChecked());
    auto arg_0_1 = std::string(*string_arg_0_1);

    auto field_arg_0_2 = Nan::Get(info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("validatorAddress").ToLocalChecked()).ToLocalChecked();
    Nan::Utf8String string_arg_0_2(field_arg_0_2->ToString(Nan::GetCurrentContext()).ToLocalChecked());
    auto arg_0_2 = std::string(*string_arg_0_2);
    CosmosLikeMsgWithdrawDelegatorReward arg_0(arg_0_1, arg_0_2);


    auto result = ledger::core::api::CosmosLikeMessage::wrapMsgWithdrawDelegatorReward(arg_0);

    //Wrap result in node object
    auto arg_1 = NJSCosmosLikeMessage::wrap(result);


    //Return result
    info.GetReturnValue().Set(arg_1);
}
NAN_METHOD(NJSCosmosLikeMessage::unwrapMsgWithdrawDelegatorReward) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSCosmosLikeMessage::unwrapMsgWithdrawDelegatorReward needs 1 arguments");
    }

    //Check if parameters have correct types
    Local<Object> njs_arg_0 = info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked();
    auto arg_0 = djinni::js::ObjectWrapper<ledger::core::api::CosmosLikeMessage>::Unwrap(njs_arg_0);
    if(!arg_0)
    {
        return Nan::ThrowError("NodeJs Object to NJSCosmosLikeMessage failed");
    }


    auto result = ledger::core::api::CosmosLikeMessage::unwrapMsgWithdrawDelegatorReward(arg_0);

    //Wrap result in node object
    auto arg_1 = Nan::New<Object>();
    auto arg_1_1 = Nan::New<String>(result.delegatorAddress).ToLocalChecked();
    Nan::DefineOwnProperty(arg_1, Nan::New<String>("delegatorAddress").ToLocalChecked(), arg_1_1);
    auto arg_1_2 = Nan::New<String>(result.validatorAddress).ToLocalChecked();
    Nan::DefineOwnProperty(arg_1, Nan::New<String>("validatorAddress").ToLocalChecked(), arg_1_2);


    //Return result
    info.GetReturnValue().Set(arg_1);
}
NAN_METHOD(NJSCosmosLikeMessage::wrapMsgWithdrawValidatorCommission) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSCosmosLikeMessage::wrapMsgWithdrawValidatorCommission needs 1 arguments");
    }

    //Check if parameters have correct types

    auto field_arg_0_1 = Nan::Get(info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("validatorAddress").ToLocalChecked()).ToLocalChecked();
    Nan::Utf8String string_arg_0_1(field_arg_0_1->ToString(Nan::GetCurrentContext()).ToLocalChecked());
    auto arg_0_1 = std::string(*string_arg_0_1);
    CosmosLikeMsgWithdrawValidatorCommission arg_0(arg_0_1);


    auto result = ledger::core::api::CosmosLikeMessage::wrapMsgWithdrawValidatorCommission(arg_0);

    //Wrap result in node object
    auto arg_1 = NJSCosmosLikeMessage::wrap(result);


    //Return result
    info.GetReturnValue().Set(arg_1);
}
NAN_METHOD(NJSCosmosLikeMessage::unwrapMsgWithdrawValidatorCommission) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSCosmosLikeMessage::unwrapMsgWithdrawValidatorCommission needs 1 arguments");
    }

    //Check if parameters have correct types
    Local<Object> njs_arg_0 = info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked();
    auto arg_0 = djinni::js::ObjectWrapper<ledger::core::api::CosmosLikeMessage>::Unwrap(njs_arg_0);
    if(!arg_0)
    {
        return Nan::ThrowError("NodeJs Object to NJSCosmosLikeMessage failed");
    }


    auto result = ledger::core::api::CosmosLikeMessage::unwrapMsgWithdrawValidatorCommission(arg_0);

    //Wrap result in node object
    auto arg_1 = Nan::New<Object>();
    auto arg_1_1 = Nan::New<String>(result.validatorAddress).ToLocalChecked();
    Nan::DefineOwnProperty(arg_1, Nan::New<String>("validatorAddress").ToLocalChecked(), arg_1_1);


    //Return result
    info.GetReturnValue().Set(arg_1);
}
NAN_METHOD(NJSCosmosLikeMessage::wrapMsgUnjail) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSCosmosLikeMessage::wrapMsgUnjail needs 1 arguments");
    }

    //Check if parameters have correct types

    auto field_arg_0_1 = Nan::Get(info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("validatorAddress").ToLocalChecked()).ToLocalChecked();
    Nan::Utf8String string_arg_0_1(field_arg_0_1->ToString(Nan::GetCurrentContext()).ToLocalChecked());
    auto arg_0_1 = std::string(*string_arg_0_1);
    CosmosLikeMsgUnjail arg_0(arg_0_1);


    auto result = ledger::core::api::CosmosLikeMessage::wrapMsgUnjail(arg_0);

    //Wrap result in node object
    auto arg_1 = NJSCosmosLikeMessage::wrap(result);


    //Return result
    info.GetReturnValue().Set(arg_1);
}
NAN_METHOD(NJSCosmosLikeMessage::unwrapMsgUnjail) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSCosmosLikeMessage::unwrapMsgUnjail needs 1 arguments");
    }

    //Check if parameters have correct types
    Local<Object> njs_arg_0 = info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked();
    auto arg_0 = djinni::js::ObjectWrapper<ledger::core::api::CosmosLikeMessage>::Unwrap(njs_arg_0);
    if(!arg_0)
    {
        return Nan::ThrowError("NodeJs Object to NJSCosmosLikeMessage failed");
    }


    auto result = ledger::core::api::CosmosLikeMessage::unwrapMsgUnjail(arg_0);

    //Wrap result in node object
    auto arg_1 = Nan::New<Object>();
    auto arg_1_1 = Nan::New<String>(result.validatorAddress).ToLocalChecked();
    Nan::DefineOwnProperty(arg_1, Nan::New<String>("validatorAddress").ToLocalChecked(), arg_1_1);


    //Return result
    info.GetReturnValue().Set(arg_1);
}

NAN_METHOD(NJSCosmosLikeMessage::New) {
    //Only new allowed
    if(!info.IsConstructCall())
    {
        return Nan::ThrowError("NJSCosmosLikeMessage function can only be called as constructor (use New)");
    }

    //Check if NJSCosmosLikeMessage::New called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSCosmosLikeMessage::New needs same number of arguments as ledger::core::api::CosmosLikeMessage::wrapMsgSend method");
    }

    //Unwrap objects to get C++ classes

    auto field_arg_0_1 = Nan::Get(info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("fromAddress").ToLocalChecked()).ToLocalChecked();
    Nan::Utf8String string_arg_0_1(field_arg_0_1->ToString(Nan::GetCurrentContext()).ToLocalChecked());
    auto arg_0_1 = std::string(*string_arg_0_1);

    auto field_arg_0_2 = Nan::Get(info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("toAddress").ToLocalChecked()).ToLocalChecked();
    Nan::Utf8String string_arg_0_2(field_arg_0_2->ToString(Nan::GetCurrentContext()).ToLocalChecked());
    auto arg_0_2 = std::string(*string_arg_0_2);

    auto field_arg_0_3 = Nan::Get(info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("amount").ToLocalChecked()).ToLocalChecked();
    vector<CosmosLikeAmount> arg_0_3;
    Local<Array> arg_0_3_container = Local<Array>::Cast(field_arg_0_3);
    for(uint32_t arg_0_3_id = 0; arg_0_3_id < arg_0_3_container->Length(); arg_0_3_id++)
    {
        if(arg_0_3_container->Get(Nan::GetCurrentContext(), arg_0_3_id).ToLocalChecked()->IsObject())
        {

            auto field_arg_0_3_elem_1 = Nan::Get(arg_0_3_container->Get(Nan::GetCurrentContext(), arg_0_3_id).ToLocalChecked()->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("amount").ToLocalChecked()).ToLocalChecked();
            Nan::Utf8String string_arg_0_3_elem_1(field_arg_0_3_elem_1->ToString(Nan::GetCurrentContext()).ToLocalChecked());
            auto arg_0_3_elem_1 = std::string(*string_arg_0_3_elem_1);

            auto field_arg_0_3_elem_2 = Nan::Get(arg_0_3_container->Get(Nan::GetCurrentContext(), arg_0_3_id).ToLocalChecked()->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("denom").ToLocalChecked()).ToLocalChecked();
            Nan::Utf8String string_arg_0_3_elem_2(field_arg_0_3_elem_2->ToString(Nan::GetCurrentContext()).ToLocalChecked());
            auto arg_0_3_elem_2 = std::string(*string_arg_0_3_elem_2);
            CosmosLikeAmount arg_0_3_elem(arg_0_3_elem_1, arg_0_3_elem_2);

            arg_0_3.emplace_back(arg_0_3_elem);
        }
    }

    CosmosLikeMsgSend arg_0(arg_0_1, arg_0_2, arg_0_3);


    //Call factory
    auto cpp_instance = ledger::core::api::CosmosLikeMessage::wrapMsgSend(arg_0);
    djinni::js::ObjectWrapper<ledger::core::api::CosmosLikeMessage>::Wrap(cpp_instance, info.This());
    info.GetReturnValue().Set(info.This());
}


Nan::Persistent<ObjectTemplate> NJSCosmosLikeMessage::CosmosLikeMessage_prototype;

Local<Object> NJSCosmosLikeMessage::wrap(const std::shared_ptr<ledger::core::api::CosmosLikeMessage> &object) {
    Nan::EscapableHandleScope scope;
    Local<ObjectTemplate> local_prototype = Nan::New(CosmosLikeMessage_prototype);

    Local<Object> obj;
    if(!local_prototype.IsEmpty())
    {
        obj = local_prototype->NewInstance(Nan::GetCurrentContext()).ToLocalChecked();
        djinni::js::ObjectWrapper<ledger::core::api::CosmosLikeMessage>::Wrap(object, obj);
    }
    else
    {
        Nan::ThrowError("NJSCosmosLikeMessage::wrap: object template not valid");
    }
    return scope.Escape(obj);
}

NAN_METHOD(NJSCosmosLikeMessage::isNull) {
    auto cpp_implementation = djinni::js::ObjectWrapper<ledger::core::api::CosmosLikeMessage>::Unwrap(info.This());
    auto isNull = !cpp_implementation ? true : false;
    return info.GetReturnValue().Set(Nan::New<Boolean>(isNull));
}

void NJSCosmosLikeMessage::Initialize(Local<Object> target) {
    Nan::HandleScope scope;

    Local<FunctionTemplate> func_template = Nan::New<FunctionTemplate>(NJSCosmosLikeMessage::New);
    Local<ObjectTemplate> objectTemplate = func_template->InstanceTemplate();
    objectTemplate->SetInternalFieldCount(1);

    func_template->SetClassName(Nan::New<String>("NJSCosmosLikeMessage").ToLocalChecked());

    //SetPrototypeMethod all methods
    Nan::SetPrototypeMethod(func_template,"getMessageType", getMessageType);
    Nan::SetPrototypeMethod(func_template,"getRawMessageType", getRawMessageType);
    Nan::SetPrototypeMethod(func_template,"getSuccess", getSuccess);
    Nan::SetPrototypeMethod(func_template,"getLog", getLog);
    Nan::SetPrototypeMethod(func_template,"getIndex", getIndex);
    Nan::SetPrototypeMethod(func_template,"wrapMsgSend", wrapMsgSend);
    Nan::SetPrototypeMethod(func_template,"unwrapMsgSend", unwrapMsgSend);
    Nan::SetPrototypeMethod(func_template,"wrapMsgDelegate", wrapMsgDelegate);
    Nan::SetPrototypeMethod(func_template,"unwrapMsgDelegate", unwrapMsgDelegate);
    Nan::SetPrototypeMethod(func_template,"wrapMsgUndelegate", wrapMsgUndelegate);
    Nan::SetPrototypeMethod(func_template,"unwrapMsgUndelegate", unwrapMsgUndelegate);
    Nan::SetPrototypeMethod(func_template,"wrapMsgBeginRedelegate", wrapMsgBeginRedelegate);
    Nan::SetPrototypeMethod(func_template,"unwrapMsgBeginRedelegate", unwrapMsgBeginRedelegate);
    Nan::SetPrototypeMethod(func_template,"wrapMsgSubmitProposal", wrapMsgSubmitProposal);
    Nan::SetPrototypeMethod(func_template,"unwrapMsgSubmitProposal", unwrapMsgSubmitProposal);
    Nan::SetPrototypeMethod(func_template,"wrapMsgVote", wrapMsgVote);
    Nan::SetPrototypeMethod(func_template,"unwrapMsgVote", unwrapMsgVote);
    Nan::SetPrototypeMethod(func_template,"wrapMsgDeposit", wrapMsgDeposit);
    Nan::SetPrototypeMethod(func_template,"unwrapMsgDeposit", unwrapMsgDeposit);
    Nan::SetPrototypeMethod(func_template,"wrapMsgWithdrawDelegationReward", wrapMsgWithdrawDelegationReward);
    Nan::SetPrototypeMethod(func_template,"unwrapMsgWithdrawDelegationReward", unwrapMsgWithdrawDelegationReward);
    Nan::SetPrototypeMethod(func_template,"wrapMsgMultiSend", wrapMsgMultiSend);
    Nan::SetPrototypeMethod(func_template,"unwrapMsgMultiSend", unwrapMsgMultiSend);
    Nan::SetPrototypeMethod(func_template,"wrapMsgCreateValidator", wrapMsgCreateValidator);
    Nan::SetPrototypeMethod(func_template,"unwrapMsgCreateValidator", unwrapMsgCreateValidator);
    Nan::SetPrototypeMethod(func_template,"wrapMsgEditValidator", wrapMsgEditValidator);
    Nan::SetPrototypeMethod(func_template,"unwrapMsgEditValidator", unwrapMsgEditValidator);
    Nan::SetPrototypeMethod(func_template,"wrapMsgSetWithdrawAddress", wrapMsgSetWithdrawAddress);
    Nan::SetPrototypeMethod(func_template,"unwrapMsgSetWithdrawAddress", unwrapMsgSetWithdrawAddress);
    Nan::SetPrototypeMethod(func_template,"wrapMsgWithdrawDelegatorReward", wrapMsgWithdrawDelegatorReward);
    Nan::SetPrototypeMethod(func_template,"unwrapMsgWithdrawDelegatorReward", unwrapMsgWithdrawDelegatorReward);
    Nan::SetPrototypeMethod(func_template,"wrapMsgWithdrawValidatorCommission", wrapMsgWithdrawValidatorCommission);
    Nan::SetPrototypeMethod(func_template,"unwrapMsgWithdrawValidatorCommission", unwrapMsgWithdrawValidatorCommission);
    Nan::SetPrototypeMethod(func_template,"wrapMsgUnjail", wrapMsgUnjail);
    Nan::SetPrototypeMethod(func_template,"unwrapMsgUnjail", unwrapMsgUnjail);
    Nan::SetPrototypeMethod(func_template,"isNull", isNull);
    //Set object prototype
    CosmosLikeMessage_prototype.Reset(objectTemplate);

    //Add template to target
    Nan::Set(target, Nan::New<String>("NJSCosmosLikeMessage").ToLocalChecked(), Nan::GetFunction(func_template).ToLocalChecked());
}
