// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from ethereum_public_key_provider.djinni

#include "NJSEthereumPublicKeyProvider.hpp"
#include "NJSObjectWrapper.hpp"

using namespace v8;
using namespace node;
using namespace std;

NAN_METHOD(NJSEthereumPublicKeyProvider::New) {
    //Only new allowed
    if(!info.IsConstructCall())
    {
        return Nan::ThrowError("NJSEthereumPublicKeyProvider function can only be called as constructor (use New)");
    }

    if(!info[0]->IsObject())
    {
        return Nan::ThrowError("NJSEthereumPublicKeyProvider::New requires an implementation from node");
    }
    auto node_instance = std::make_shared<NJSEthereumPublicKeyProvider>(info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked());
    djinni::js::ObjectWrapper<NJSEthereumPublicKeyProvider>::Wrap(node_instance, info.This());
    info.GetReturnValue().Set(info.This());
}


Nan::Persistent<ObjectTemplate> NJSEthereumPublicKeyProvider::EthereumPublicKeyProvider_prototype;

Local<Object> NJSEthereumPublicKeyProvider::wrap(const std::shared_ptr<ledger::core::api::EthereumPublicKeyProvider> &object) {
    Nan::EscapableHandleScope scope;
    Local<ObjectTemplate> local_prototype = Nan::New(EthereumPublicKeyProvider_prototype);

    Local<Object> obj;
    if(!local_prototype.IsEmpty())
    {
        obj = local_prototype->NewInstance(Nan::GetCurrentContext()).ToLocalChecked();
        djinni::js::ObjectWrapper<ledger::core::api::EthereumPublicKeyProvider>::Wrap(object, obj);
    }
    else
    {
        Nan::ThrowError("NJSEthereumPublicKeyProvider::wrap: object template not valid");
    }
    return scope.Escape(obj);
}

void NJSEthereumPublicKeyProvider::Initialize(Local<Object> target) {
    Nan::HandleScope scope;

    Local<FunctionTemplate> func_template = Nan::New<FunctionTemplate>(NJSEthereumPublicKeyProvider::New);
    Local<ObjectTemplate> objectTemplate = func_template->InstanceTemplate();
    objectTemplate->SetInternalFieldCount(1);

    func_template->SetClassName(Nan::New<String>("NJSEthereumPublicKeyProvider").ToLocalChecked());
    Nan::SetPrototypeMethod(func_template,"New", New);
    //Set object prototype
    EthereumPublicKeyProvider_prototype.Reset(objectTemplate);

    //Add template to target
    target->Set(Nan::New<String>("NJSEthereumPublicKeyProvider").ToLocalChecked(), func_template->GetFunction(Nan::GetCurrentContext()).ToLocalChecked());
}
