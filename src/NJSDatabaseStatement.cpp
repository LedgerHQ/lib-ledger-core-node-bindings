// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from database.djinni

#include "NJSDatabaseStatement.hpp"
#include "NJSObjectWrapper.hpp"

using namespace v8;
using namespace node;
using namespace std;

void NJSDatabaseStatement::bindShort(int32_t pos, int16_t value)
{
    Nan::HandleScope scope;
    //Wrap parameters
    auto arg_0 = Nan::New<Int32>(pos);
    auto arg_1 = Nan::New<Int32>(value);
    Local<Value> args[2] = {arg_0,arg_1};
    Local<Object> local_njs_impl = Nan::New<Object>(njs_impl);
    if(!local_njs_impl->IsObject())
    {
        Nan::ThrowError("NJSDatabaseStatement::bindShort fail to retrieve node implementation");
    }
    auto calling_funtion = Nan::Get(local_njs_impl,Nan::New<String>("bindShort").ToLocalChecked()).ToLocalChecked();
    auto result_bindShort = Nan::CallAsFunction(calling_funtion->ToObject(Nan::GetCurrentContext()).ToLocalChecked(),local_njs_impl,2,args);
    if(result_bindShort.IsEmpty())
    {
        Nan::ThrowError("NJSDatabaseStatement::bindShort call failed");
    }
}

void NJSDatabaseStatement::bindInt(int32_t pos, int32_t value)
{
    Nan::HandleScope scope;
    //Wrap parameters
    auto arg_0 = Nan::New<Int32>(pos);
    auto arg_1 = Nan::New<Int32>(value);
    Local<Value> args[2] = {arg_0,arg_1};
    Local<Object> local_njs_impl = Nan::New<Object>(njs_impl);
    if(!local_njs_impl->IsObject())
    {
        Nan::ThrowError("NJSDatabaseStatement::bindInt fail to retrieve node implementation");
    }
    auto calling_funtion = Nan::Get(local_njs_impl,Nan::New<String>("bindInt").ToLocalChecked()).ToLocalChecked();
    auto result_bindInt = Nan::CallAsFunction(calling_funtion->ToObject(Nan::GetCurrentContext()).ToLocalChecked(),local_njs_impl,2,args);
    if(result_bindInt.IsEmpty())
    {
        Nan::ThrowError("NJSDatabaseStatement::bindInt call failed");
    }
}

void NJSDatabaseStatement::bindLong(int32_t pos, int64_t value)
{
    Nan::HandleScope scope;
    //Wrap parameters
    auto arg_0 = Nan::New<Int32>(pos);
    auto arg_1 = Nan::New<Number>(value);
    Local<Value> args[2] = {arg_0,arg_1};
    Local<Object> local_njs_impl = Nan::New<Object>(njs_impl);
    if(!local_njs_impl->IsObject())
    {
        Nan::ThrowError("NJSDatabaseStatement::bindLong fail to retrieve node implementation");
    }
    auto calling_funtion = Nan::Get(local_njs_impl,Nan::New<String>("bindLong").ToLocalChecked()).ToLocalChecked();
    auto result_bindLong = Nan::CallAsFunction(calling_funtion->ToObject(Nan::GetCurrentContext()).ToLocalChecked(),local_njs_impl,2,args);
    if(result_bindLong.IsEmpty())
    {
        Nan::ThrowError("NJSDatabaseStatement::bindLong call failed");
    }
}

void NJSDatabaseStatement::bindFloat(int32_t pos, float value)
{
    Nan::HandleScope scope;
    //Wrap parameters
    auto arg_0 = Nan::New<Int32>(pos);
    auto arg_1 = Nan::New<Number>(value);
    Local<Value> args[2] = {arg_0,arg_1};
    Local<Object> local_njs_impl = Nan::New<Object>(njs_impl);
    if(!local_njs_impl->IsObject())
    {
        Nan::ThrowError("NJSDatabaseStatement::bindFloat fail to retrieve node implementation");
    }
    auto calling_funtion = Nan::Get(local_njs_impl,Nan::New<String>("bindFloat").ToLocalChecked()).ToLocalChecked();
    auto result_bindFloat = Nan::CallAsFunction(calling_funtion->ToObject(Nan::GetCurrentContext()).ToLocalChecked(),local_njs_impl,2,args);
    if(result_bindFloat.IsEmpty())
    {
        Nan::ThrowError("NJSDatabaseStatement::bindFloat call failed");
    }
}

void NJSDatabaseStatement::bindDouble(int32_t pos, double value)
{
    Nan::HandleScope scope;
    //Wrap parameters
    auto arg_0 = Nan::New<Int32>(pos);
    auto arg_1 = Nan::New<Number>(value);
    Local<Value> args[2] = {arg_0,arg_1};
    Local<Object> local_njs_impl = Nan::New<Object>(njs_impl);
    if(!local_njs_impl->IsObject())
    {
        Nan::ThrowError("NJSDatabaseStatement::bindDouble fail to retrieve node implementation");
    }
    auto calling_funtion = Nan::Get(local_njs_impl,Nan::New<String>("bindDouble").ToLocalChecked()).ToLocalChecked();
    auto result_bindDouble = Nan::CallAsFunction(calling_funtion->ToObject(Nan::GetCurrentContext()).ToLocalChecked(),local_njs_impl,2,args);
    if(result_bindDouble.IsEmpty())
    {
        Nan::ThrowError("NJSDatabaseStatement::bindDouble call failed");
    }
}

void NJSDatabaseStatement::bindString(int32_t pos, const std::string & value)
{
    Nan::HandleScope scope;
    //Wrap parameters
    auto arg_0 = Nan::New<Int32>(pos);
    auto arg_1 = Nan::New<String>(value).ToLocalChecked();
    Local<Value> args[2] = {arg_0,arg_1};
    Local<Object> local_njs_impl = Nan::New<Object>(njs_impl);
    if(!local_njs_impl->IsObject())
    {
        Nan::ThrowError("NJSDatabaseStatement::bindString fail to retrieve node implementation");
    }
    auto calling_funtion = Nan::Get(local_njs_impl,Nan::New<String>("bindString").ToLocalChecked()).ToLocalChecked();
    auto result_bindString = Nan::CallAsFunction(calling_funtion->ToObject(Nan::GetCurrentContext()).ToLocalChecked(),local_njs_impl,2,args);
    if(result_bindString.IsEmpty())
    {
        Nan::ThrowError("NJSDatabaseStatement::bindString call failed");
    }
}

void NJSDatabaseStatement::bindBlob(int32_t pos, const std::shared_ptr<::ledger::core::api::DatabaseBlob> & value)
{
    Nan::HandleScope scope;
    //Wrap parameters
    auto arg_0 = Nan::New<Int32>(pos);
    auto arg_1 = NJSDatabaseBlob::wrap(value);

    Local<Value> args[2] = {arg_0,arg_1};
    Local<Object> local_njs_impl = Nan::New<Object>(njs_impl);
    if(!local_njs_impl->IsObject())
    {
        Nan::ThrowError("NJSDatabaseStatement::bindBlob fail to retrieve node implementation");
    }
    auto calling_funtion = Nan::Get(local_njs_impl,Nan::New<String>("bindBlob").ToLocalChecked()).ToLocalChecked();
    auto result_bindBlob = Nan::CallAsFunction(calling_funtion->ToObject(Nan::GetCurrentContext()).ToLocalChecked(),local_njs_impl,2,args);
    if(result_bindBlob.IsEmpty())
    {
        Nan::ThrowError("NJSDatabaseStatement::bindBlob call failed");
    }
}

void NJSDatabaseStatement::bindNull(int32_t pos)
{
    Nan::HandleScope scope;
    //Wrap parameters
    auto arg_0 = Nan::New<Int32>(pos);
    Local<Value> args[1] = {arg_0};
    Local<Object> local_njs_impl = Nan::New<Object>(njs_impl);
    if(!local_njs_impl->IsObject())
    {
        Nan::ThrowError("NJSDatabaseStatement::bindNull fail to retrieve node implementation");
    }
    auto calling_funtion = Nan::Get(local_njs_impl,Nan::New<String>("bindNull").ToLocalChecked()).ToLocalChecked();
    auto result_bindNull = Nan::CallAsFunction(calling_funtion->ToObject(Nan::GetCurrentContext()).ToLocalChecked(),local_njs_impl,1,args);
    if(result_bindNull.IsEmpty())
    {
        Nan::ThrowError("NJSDatabaseStatement::bindNull call failed");
    }
}

std::shared_ptr<DatabaseColumn> NJSDatabaseStatement::describeColumn(int32_t colNum)
{
    Nan::HandleScope scope;
    //Wrap parameters
    auto arg_0 = Nan::New<Int32>(colNum);
    Local<Value> args[1] = {arg_0};
    Local<Object> local_njs_impl = Nan::New<Object>(njs_impl);
    if(!local_njs_impl->IsObject())
    {
        Nan::ThrowError("NJSDatabaseStatement::describeColumn fail to retrieve node implementation");
    }
    auto calling_funtion = Nan::Get(local_njs_impl,Nan::New<String>("describeColumn").ToLocalChecked()).ToLocalChecked();
    auto result_describeColumn = Nan::CallAsFunction(calling_funtion->ToObject(Nan::GetCurrentContext()).ToLocalChecked(),local_njs_impl,1,args);
    if(result_describeColumn.IsEmpty())
    {
        Nan::ThrowError("NJSDatabaseStatement::describeColumn call failed");
    }
    auto checkedResult_describeColumn = result_describeColumn.ToLocalChecked();
    Local<Object> njs_fResult_describeColumn = checkedResult_describeColumn->ToObject(Nan::GetCurrentContext()).ToLocalChecked();
    auto fResult_describeColumn = djinni::js::ObjectWrapper<ledger::core::api::DatabaseColumn>::Unwrap(njs_fResult_describeColumn);

    return fResult_describeColumn;
}

int32_t NJSDatabaseStatement::getColumnCount()
{
    Nan::HandleScope scope;
    //Wrap parameters
    Local<Value> args[1];
    Local<Object> local_njs_impl = Nan::New<Object>(njs_impl);
    if(!local_njs_impl->IsObject())
    {
        Nan::ThrowError("NJSDatabaseStatement::getColumnCount fail to retrieve node implementation");
    }
    auto calling_funtion = Nan::Get(local_njs_impl,Nan::New<String>("getColumnCount").ToLocalChecked()).ToLocalChecked();
    auto result_getColumnCount = Nan::CallAsFunction(calling_funtion->ToObject(Nan::GetCurrentContext()).ToLocalChecked(),local_njs_impl,0,args);
    if(result_getColumnCount.IsEmpty())
    {
        Nan::ThrowError("NJSDatabaseStatement::getColumnCount call failed");
    }
    auto checkedResult_getColumnCount = result_getColumnCount.ToLocalChecked();
    auto fResult_getColumnCount = Nan::To<int32_t>(checkedResult_getColumnCount).FromJust();
    return fResult_getColumnCount;
}

std::shared_ptr<DatabaseResultSet> NJSDatabaseStatement::execute()
{
    Nan::HandleScope scope;
    //Wrap parameters
    Local<Value> args[1];
    Local<Object> local_njs_impl = Nan::New<Object>(njs_impl);
    if(!local_njs_impl->IsObject())
    {
        Nan::ThrowError("NJSDatabaseStatement::execute fail to retrieve node implementation");
    }
    auto calling_funtion = Nan::Get(local_njs_impl,Nan::New<String>("execute").ToLocalChecked()).ToLocalChecked();
    auto result_execute = Nan::CallAsFunction(calling_funtion->ToObject(Nan::GetCurrentContext()).ToLocalChecked(),local_njs_impl,0,args);
    if(result_execute.IsEmpty())
    {
        Nan::ThrowError("NJSDatabaseStatement::execute call failed");
    }
    auto checkedResult_execute = result_execute.ToLocalChecked();
    Local<Object> njs_fResult_execute = checkedResult_execute->ToObject(Nan::GetCurrentContext()).ToLocalChecked();
    auto fResult_execute = djinni::js::ObjectWrapper<ledger::core::api::DatabaseResultSet>::Unwrap(njs_fResult_execute);

    return fResult_execute;
}

void NJSDatabaseStatement::reset()
{
    Nan::HandleScope scope;
    //Wrap parameters
    Local<Value> args[1];
    Local<Object> local_njs_impl = Nan::New<Object>(njs_impl);
    if(!local_njs_impl->IsObject())
    {
        Nan::ThrowError("NJSDatabaseStatement::reset fail to retrieve node implementation");
    }
    auto calling_funtion = Nan::Get(local_njs_impl,Nan::New<String>("reset").ToLocalChecked()).ToLocalChecked();
    auto result_reset = Nan::CallAsFunction(calling_funtion->ToObject(Nan::GetCurrentContext()).ToLocalChecked(),local_njs_impl,0,args);
    if(result_reset.IsEmpty())
    {
        Nan::ThrowError("NJSDatabaseStatement::reset call failed");
    }
}

void NJSDatabaseStatement::close()
{
    Nan::HandleScope scope;
    //Wrap parameters
    Local<Value> args[1];
    Local<Object> local_njs_impl = Nan::New<Object>(njs_impl);
    if(!local_njs_impl->IsObject())
    {
        Nan::ThrowError("NJSDatabaseStatement::close fail to retrieve node implementation");
    }
    auto calling_funtion = Nan::Get(local_njs_impl,Nan::New<String>("close").ToLocalChecked()).ToLocalChecked();
    auto result_close = Nan::CallAsFunction(calling_funtion->ToObject(Nan::GetCurrentContext()).ToLocalChecked(),local_njs_impl,0,args);
    if(result_close.IsEmpty())
    {
        Nan::ThrowError("NJSDatabaseStatement::close call failed");
    }
}

NAN_METHOD(NJSDatabaseStatement::New) {
    //Only new allowed
    if(!info.IsConstructCall())
    {
        return Nan::ThrowError("NJSDatabaseStatement function can only be called as constructor (use New)");
    }

    if(!info[0]->IsObject())
    {
        return Nan::ThrowError("NJSDatabaseStatement::New requires an implementation from node");
    }
    auto node_instance = std::make_shared<NJSDatabaseStatement>(info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked());
    djinni::js::ObjectWrapper<NJSDatabaseStatement>::Wrap(node_instance, info.This());
    info.GetReturnValue().Set(info.This());
}


Nan::Persistent<ObjectTemplate> NJSDatabaseStatement::DatabaseStatement_prototype;

Local<Object> NJSDatabaseStatement::wrap(const std::shared_ptr<ledger::core::api::DatabaseStatement> &object) {
    Nan::EscapableHandleScope scope;
    Local<ObjectTemplate> local_prototype = Nan::New(DatabaseStatement_prototype);

    Local<Object> obj;
    if(!local_prototype.IsEmpty())
    {
        obj = local_prototype->NewInstance(Nan::GetCurrentContext()).ToLocalChecked();
        djinni::js::ObjectWrapper<ledger::core::api::DatabaseStatement>::Wrap(object, obj);
    }
    else
    {
        Nan::ThrowError("NJSDatabaseStatement::wrap: object template not valid");
    }
    return scope.Escape(obj);
}

void NJSDatabaseStatement::Initialize(Local<Object> target) {
    Nan::HandleScope scope;

    Local<FunctionTemplate> func_template = Nan::New<FunctionTemplate>(NJSDatabaseStatement::New);
    Local<ObjectTemplate> objectTemplate = func_template->InstanceTemplate();
    objectTemplate->SetInternalFieldCount(1);

    func_template->SetClassName(Nan::New<String>("NJSDatabaseStatement").ToLocalChecked());
    Nan::SetPrototypeMethod(func_template,"New", New);
    //Set object prototype
    DatabaseStatement_prototype.Reset(objectTemplate);

    //Add template to target
    target->Set(Nan::New<String>("NJSDatabaseStatement").ToLocalChecked(), func_template->GetFunction(Nan::GetCurrentContext()).ToLocalChecked());
}
