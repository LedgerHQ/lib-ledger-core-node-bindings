// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from bitcoin_like_wallet.djinni

#ifndef DJINNI_GENERATED_NJSBITCOINLIKETRANSACTIONBUILDER_HPP
#define DJINNI_GENERATED_NJSBITCOINLIKETRANSACTIONBUILDER_HPP


#include "../include/../utils/optional.hpp"
#include "../include/AlgorandNetworkParameters.hpp"
#include "../include/BitcoinLikeNetworkParameters.hpp"
#include "../include/BitcoinLikePickingStrategy.hpp"
#include "../include/CosmosLikeNetworkParameters.hpp"
#include "../include/Currency.hpp"
#include "../include/CurrencyUnit.hpp"
#include "../include/EthereumLikeNetworkParameters.hpp"
#include "../include/RippleLikeNetworkParameters.hpp"
#include "../include/StellarLikeNetworkParameters.hpp"
#include "../include/TezosLikeNetworkParameters.hpp"
#include "NJSAmountCpp.hpp"
#include "NJSBitcoinLikeScriptCpp.hpp"
#include "NJSBitcoinLikeTransactionCallback.hpp"
#include "NJSBitcoinLikeTransactionCpp.hpp"
#include <cstdint>
#include <memory>
#include <string>
#include <vector>

#include <nan.h>
#include <node.h>
#include "../include/BitcoinLikeTransactionBuilder.hpp"

using namespace v8;
using namespace node;
using namespace std;
using namespace ledger::core::api;

class NJSBitcoinLikeTransactionBuilder final {
public:

    static void Initialize(Local<Object> target);
    NJSBitcoinLikeTransactionBuilder() = delete;

    static Local<Object> wrap(const std::shared_ptr<ledger::core::api::BitcoinLikeTransactionBuilder> &object);
    static Nan::Persistent<ObjectTemplate> BitcoinLikeTransactionBuilder_prototype;

private:
    /**
     * Add the given input to the final transaction.
     * @param transactionhash The hash of the transaction in where the UTXO can be located.
     * @params index Index of the UTXO in the previous transaction
     * @params sequence Sequence number to add at the end of the input serialization. This can be used for RBF transaction
     * @return A reference on the same builder in order to chain calls.
     */
    static NAN_METHOD(addInput);

    /**
     * Add the given output to the final transaction.
     * @return A reference on the same builder in order to chain calls.
     */
    static NAN_METHOD(addOutput);

    /**
     * If needed the transaction will send its change to the given path. It is possible to add multiple change path.
     * @return A reference on the same builder in order to chain calls.
     */
    static NAN_METHOD(addChangePath);

    /**
     * Exclude UTXO from the coin selection (alias UTXO picking). You can call this method multiple times to exclude multiple
     * UTXO.
     * @param transactionHash The hash of the transaction in which this UTXO can be found.
     * @param outputIndex The position of the output in the previous transaction,
     * @return A reference on the same builder in order to chain calls.
     */
    static NAN_METHOD(excludeUtxo);

    /**
     * Set the the number of change addresses in the transaction builder.
     * @return A reference on the same builder in order to chain calls.
     */
    static NAN_METHOD(setNumberOfChangeAddresses);

    /**
     * Set the maximum amount per change output. By default there is no max amount.
     * @return A reference on the same builder in order to chain calls.
     */
    static NAN_METHOD(setMaxAmountOnChange);

    /**
     * Set the minimum amount per change output. By default this value is the dust value of the currency.
     * @return A reference on the same builder in order to chain calls.
     */
    static NAN_METHOD(setMinAmountOnChange);

    /**
     * Set the UTXO picking strategy (see [[BitcoinLikePickingStrategy]]).
     * @param strategy The strategy to adopt in order to select which input to use in the transaction.
     * @param sequence The sequence value serialized at the end of the raw transaction. If you don't know what to put here
     * just use 0xFFFFFF
     * @param maxUtxo The maximum number of utxos to pick (It applies only for HIGHEST_FIRST_LIMIT_UTXO and LIMIT_UTXO)
     * @return A reference on the same builder in order to chain calls.
     */
    static NAN_METHOD(pickInputs);

    /**
     * Send funds to the given address. This method can be called multiple times to send to multiple addresses.
     * @param amount The value to send
     * @param address Address of the recipient
     * @return A reference on the same builder in order to chain calls.
     */
    static NAN_METHOD(sendToAddress);

    /**
     * Send all available funds to the given address.
     * @param address Address of the recipient
     * @return A reference on the same builder in order to chain calls.
     */
    static NAN_METHOD(wipeToAddress);

    /**
     * Set the amount of fees per byte (of the raw transaction).
     * @return A reference on the same builder in order to chain calls.
     */
    static NAN_METHOD(setFeesPerByte);

    /** Build a transaction from the given builder parameters. */
    static NAN_METHOD(build);

    /**
     * Creates a clone of this builder.
     * @return A copy of the current builder instance.
     */
    static NAN_METHOD(clone);

    /** Reset the current instance to its initial state. */
    static NAN_METHOD(reset);

    /**
     * Parsing unsigned transaction.
     * parsing a tx might change depending on block height we are on (if an update is effective starting from a given hight)
     */
    static NAN_METHOD(parseRawUnsignedTransaction);

    static NAN_METHOD(New);

    static NAN_METHOD(isNull);
};
#endif //DJINNI_GENERATED_NJSBITCOINLIKETRANSACTIONBUILDER_HPP
