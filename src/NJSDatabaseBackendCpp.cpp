// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from database.djinni

#include "NJSDatabaseBackendCpp.hpp"
#include "NJSObjectWrapper.hpp"
#include "NJSHexUtils.hpp"

using namespace v8;
using namespace node;
using namespace std;

NAN_METHOD(NJSDatabaseBackend::getConnectionPoolSize) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSDatabaseBackend::getConnectionPoolSize needs 0 arguments");
    }

    //Check if parameters have correct types

    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::DatabaseBackend>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSDatabaseBackend::getConnectionPoolSize : implementation of DatabaseBackend is not valid");
    }

    auto result = cpp_impl->getConnectionPoolSize();

    //Wrap result in node object
    auto arg_0 = Nan::New<Int32>(result);

    //Return result
    info.GetReturnValue().Set(arg_0);
}
NAN_METHOD(NJSDatabaseBackend::getReadonlyConnectionPoolSize) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSDatabaseBackend::getReadonlyConnectionPoolSize needs 0 arguments");
    }

    //Check if parameters have correct types

    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::DatabaseBackend>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSDatabaseBackend::getReadonlyConnectionPoolSize : implementation of DatabaseBackend is not valid");
    }

    auto result = cpp_impl->getReadonlyConnectionPoolSize();

    //Wrap result in node object
    auto arg_0 = Nan::New<Int32>(result);

    //Return result
    info.GetReturnValue().Set(arg_0);
}
NAN_METHOD(NJSDatabaseBackend::enableQueryLogging) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSDatabaseBackend::enableQueryLogging needs 1 arguments");
    }

    //Check if parameters have correct types
    auto arg_0 = Nan::To<bool>(info[0]).FromJust();

    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::DatabaseBackend>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSDatabaseBackend::enableQueryLogging : implementation of DatabaseBackend is not valid");
    }

    auto result = cpp_impl->enableQueryLogging(arg_0);

    //Wrap result in node object
    auto arg_1 = NJSDatabaseBackend::wrap(result);


    //Return result
    info.GetReturnValue().Set(arg_1);
}
NAN_METHOD(NJSDatabaseBackend::isLoggingEnabled) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSDatabaseBackend::isLoggingEnabled needs 0 arguments");
    }

    //Check if parameters have correct types

    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::DatabaseBackend>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSDatabaseBackend::isLoggingEnabled : implementation of DatabaseBackend is not valid");
    }

    auto result = cpp_impl->isLoggingEnabled();

    //Wrap result in node object
    auto arg_0 = Nan::New<Boolean>(result);

    //Return result
    info.GetReturnValue().Set(arg_0);
}
NAN_METHOD(NJSDatabaseBackend::getSqlite3Backend) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSDatabaseBackend::getSqlite3Backend needs 0 arguments");
    }

    //Check if parameters have correct types

    auto result = ledger::core::api::DatabaseBackend::getSqlite3Backend();

    //Wrap result in node object
    auto arg_0 = NJSDatabaseBackend::wrap(result);


    //Return result
    info.GetReturnValue().Set(arg_0);
}
NAN_METHOD(NJSDatabaseBackend::getPostgreSQLBackend) {

    //Check if method called with right number of arguments
    if(info.Length() != 2)
    {
        return Nan::ThrowError("NJSDatabaseBackend::getPostgreSQLBackend needs 2 arguments");
    }

    //Check if parameters have correct types
    auto arg_0 = Nan::To<int32_t>(info[0]).FromJust();
    auto arg_1 = Nan::To<int32_t>(info[1]).FromJust();

    auto result = ledger::core::api::DatabaseBackend::getPostgreSQLBackend(arg_0,arg_1);

    //Wrap result in node object
    auto arg_2 = NJSDatabaseBackend::wrap(result);


    //Return result
    info.GetReturnValue().Set(arg_2);
}
NAN_METHOD(NJSDatabaseBackend::createBackendFromEngine) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSDatabaseBackend::createBackendFromEngine needs 1 arguments");
    }

    //Check if parameters have correct types
    Local<Object> njs_arg_0 = info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked();
    auto arg_0 = djinni::js::ObjectWrapper<ledger::core::api::DatabaseEngine>::Unwrap(njs_arg_0);


    auto result = ledger::core::api::DatabaseBackend::createBackendFromEngine(arg_0);

    //Wrap result in node object
    auto arg_1 = NJSDatabaseBackend::wrap(result);


    //Return result
    info.GetReturnValue().Set(arg_1);
}

NAN_METHOD(NJSDatabaseBackend::New) {
    //Only new allowed
    if(!info.IsConstructCall())
    {
        return Nan::ThrowError("NJSDatabaseBackend function can only be called as constructor (use New)");
    }

    //Check if NJSDatabaseBackend::New called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSDatabaseBackend::New needs same number of arguments as ledger::core::api::DatabaseBackend::getSqlite3Backend method");
    }

    //Unwrap objects to get C++ classes

    //Call factory
    auto cpp_instance = ledger::core::api::DatabaseBackend::getSqlite3Backend();
    djinni::js::ObjectWrapper<ledger::core::api::DatabaseBackend>::Wrap(cpp_instance, info.This());
    info.GetReturnValue().Set(info.This());
}


Nan::Persistent<ObjectTemplate> NJSDatabaseBackend::DatabaseBackend_prototype;

Local<Object> NJSDatabaseBackend::wrap(const std::shared_ptr<ledger::core::api::DatabaseBackend> &object) {
    Nan::EscapableHandleScope scope;
    Local<ObjectTemplate> local_prototype = Nan::New(DatabaseBackend_prototype);

    Local<Object> obj;
    if(!local_prototype.IsEmpty())
    {
        obj = local_prototype->NewInstance(Nan::GetCurrentContext()).ToLocalChecked();
        djinni::js::ObjectWrapper<ledger::core::api::DatabaseBackend>::Wrap(object, obj);
    }
    else
    {
        Nan::ThrowError("NJSDatabaseBackend::wrap: object template not valid");
    }
    return scope.Escape(obj);
}

NAN_METHOD(NJSDatabaseBackend::isNull) {
    auto cpp_implementation = djinni::js::ObjectWrapper<ledger::core::api::DatabaseBackend>::Unwrap(info.This());
    auto isNull = !cpp_implementation ? true : false;
    return info.GetReturnValue().Set(Nan::New<Boolean>(isNull));
}

void NJSDatabaseBackend::Initialize(Local<Object> target) {
    Nan::HandleScope scope;

    Local<FunctionTemplate> func_template = Nan::New<FunctionTemplate>(NJSDatabaseBackend::New);
    Local<ObjectTemplate> objectTemplate = func_template->InstanceTemplate();
    objectTemplate->SetInternalFieldCount(1);

    func_template->SetClassName(Nan::New<String>("NJSDatabaseBackend").ToLocalChecked());

    //SetPrototypeMethod all methods
    Nan::SetPrototypeMethod(func_template,"getConnectionPoolSize", getConnectionPoolSize);
    Nan::SetPrototypeMethod(func_template,"getReadonlyConnectionPoolSize", getReadonlyConnectionPoolSize);
    Nan::SetPrototypeMethod(func_template,"enableQueryLogging", enableQueryLogging);
    Nan::SetPrototypeMethod(func_template,"isLoggingEnabled", isLoggingEnabled);
    Nan::SetPrototypeMethod(func_template,"getSqlite3Backend", getSqlite3Backend);
    Nan::SetPrototypeMethod(func_template,"getPostgreSQLBackend", getPostgreSQLBackend);
    Nan::SetPrototypeMethod(func_template,"createBackendFromEngine", createBackendFromEngine);
    Nan::SetPrototypeMethod(func_template,"isNull", isNull);
    //Set object prototype
    DatabaseBackend_prototype.Reset(objectTemplate);

    //Add template to target
    Nan::Set(target, Nan::New<String>("NJSDatabaseBackend").ToLocalChecked(), Nan::GetFunction(func_template).ToLocalChecked());
}
