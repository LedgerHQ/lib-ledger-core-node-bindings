// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from erc20.djinni

#ifndef DJINNI_GENERATED_NJSERC20LIKEACCOUNT_HPP
#define DJINNI_GENERATED_NJSERC20LIKEACCOUNT_HPP


#include "../include/ERC20Token.hpp"
#include "../include/TimePeriod.hpp"
#include "NJSBigIntCallback.hpp"
#include "NJSBigIntCpp.hpp"
#include "NJSBinaryCallback.hpp"
#include "NJSERC20LikeOperationCallback.hpp"
#include "NJSERC20LikeOperationCpp.hpp"
#include "NJSERC20LikeOperationListCallback.hpp"
#include "NJSOperationQueryCpp.hpp"
#include <chrono>
#include <cstdint>
#include <memory>
#include <string>
#include <vector>

#include <nan.h>
#include <node.h>
#include "../include/ERC20LikeAccount.hpp"

using namespace v8;
using namespace node;
using namespace std;
using namespace ledger::core::api;

class NJSERC20LikeAccount final {
public:

    static void Initialize(Local<Object> target);
    NJSERC20LikeAccount() = delete;

    static Local<Object> wrap(const std::shared_ptr<ledger::core::api::ERC20LikeAccount> &object);
    static Nan::Persistent<ObjectTemplate> ERC20LikeAccount_prototype;

private:
    /** Get uid */
    static NAN_METHOD(getUid);

    /** Get an ERC20 token. */
    static NAN_METHOD(getToken);

    /** Get the address of this ERC20 account. */
    static NAN_METHOD(getAddress);

    /** Get the current balance of this ERC20 account. */
    static NAN_METHOD(getBalance);

    /**
     * Get the balance history of this ERC20 account from a starting date (included) to an ending
     * date (included).
     */
    static NAN_METHOD(getBalanceHistoryFor);

    /** Get the list of operations performed on this ERC20 account. */
    static NAN_METHOD(getOperations);

    /** Get ERC20 operation by uid */
    static NAN_METHOD(getOperation);

    /** Get all ERC20 operations */
    static NAN_METHOD(getAllOperations);

    /** Get ERC20 operations from a given block height (included), it also returns mempool operations */
    static NAN_METHOD(getOperationsFromBlockHeight);

    /** Retrieve raw data concerning a transaction of a given amount to a given address. */
    static NAN_METHOD(getTransferToAddressData);

    static NAN_METHOD(queryOperations);

    static NAN_METHOD(New);

    static NAN_METHOD(isNull);
};
#endif //DJINNI_GENERATED_NJSERC20LIKEACCOUNT_HPP
