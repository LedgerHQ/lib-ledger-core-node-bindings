// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from websocket_client.djinni

#include "NJSWebSocketClient.hpp"
#include "NJSObjectWrapper.hpp"

using namespace v8;
using namespace node;
using namespace std;

void NJSWebSocketClient::connect(const std::string & url, const std::shared_ptr<::ledger::core::api::WebSocketConnection> & connection)
{
    Nan::HandleScope scope;
    //Wrap parameters
    auto arg_0 = Nan::New<String>(url).ToLocalChecked();
    auto arg_1 = NJSWebSocketConnection::wrap(connection);

    Local<Value> args[2] = {arg_0,arg_1};
    Local<Object> local_njs_impl = Nan::New<Object>(njs_impl);
    if(!local_njs_impl->IsObject())
    {
        Nan::ThrowError("NJSWebSocketClient::connect fail to retrieve node implementation");
    }
    auto calling_funtion = Nan::Get(local_njs_impl,Nan::New<String>("connect").ToLocalChecked()).ToLocalChecked();
    auto result_connect = Nan::CallAsFunction(calling_funtion->ToObject(Nan::GetCurrentContext()).ToLocalChecked(),local_njs_impl,2,args);
    if(result_connect.IsEmpty())
    {
        Nan::ThrowError("NJSWebSocketClient::connect call failed");
    }
}

void NJSWebSocketClient::send(const std::shared_ptr<::ledger::core::api::WebSocketConnection> & connection, const std::string & data)
{
    Nan::HandleScope scope;
    //Wrap parameters
    auto arg_0 = NJSWebSocketConnection::wrap(connection);

    auto arg_1 = Nan::New<String>(data).ToLocalChecked();
    Local<Value> args[2] = {arg_0,arg_1};
    Local<Object> local_njs_impl = Nan::New<Object>(njs_impl);
    if(!local_njs_impl->IsObject())
    {
        Nan::ThrowError("NJSWebSocketClient::send fail to retrieve node implementation");
    }
    auto calling_funtion = Nan::Get(local_njs_impl,Nan::New<String>("send").ToLocalChecked()).ToLocalChecked();
    auto result_send = Nan::CallAsFunction(calling_funtion->ToObject(Nan::GetCurrentContext()).ToLocalChecked(),local_njs_impl,2,args);
    if(result_send.IsEmpty())
    {
        Nan::ThrowError("NJSWebSocketClient::send call failed");
    }
}

void NJSWebSocketClient::disconnect(const std::shared_ptr<::ledger::core::api::WebSocketConnection> & connection)
{
    Nan::HandleScope scope;
    //Wrap parameters
    auto arg_0 = NJSWebSocketConnection::wrap(connection);

    Local<Value> args[1] = {arg_0};
    Local<Object> local_njs_impl = Nan::New<Object>(njs_impl);
    if(!local_njs_impl->IsObject())
    {
        Nan::ThrowError("NJSWebSocketClient::disconnect fail to retrieve node implementation");
    }
    auto calling_funtion = Nan::Get(local_njs_impl,Nan::New<String>("disconnect").ToLocalChecked()).ToLocalChecked();
    auto result_disconnect = Nan::CallAsFunction(calling_funtion->ToObject(Nan::GetCurrentContext()).ToLocalChecked(),local_njs_impl,1,args);
    if(result_disconnect.IsEmpty())
    {
        Nan::ThrowError("NJSWebSocketClient::disconnect call failed");
    }
}

NAN_METHOD(NJSWebSocketClient::New) {
    //Only new allowed
    if(!info.IsConstructCall())
    {
        return Nan::ThrowError("NJSWebSocketClient function can only be called as constructor (use New)");
    }

    if(!info[0]->IsObject())
    {
        return Nan::ThrowError("NJSWebSocketClient::New requires an implementation from node");
    }
    auto node_instance = std::make_shared<NJSWebSocketClient>(info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked());
    djinni::js::ObjectWrapper<NJSWebSocketClient>::Wrap(node_instance, info.This());
    info.GetReturnValue().Set(info.This());
}


Nan::Persistent<ObjectTemplate> NJSWebSocketClient::WebSocketClient_prototype;

Local<Object> NJSWebSocketClient::wrap(const std::shared_ptr<ledger::core::api::WebSocketClient> &object) {
    Nan::EscapableHandleScope scope;
    Local<ObjectTemplate> local_prototype = Nan::New(WebSocketClient_prototype);

    Local<Object> obj;
    if(!local_prototype.IsEmpty())
    {
        obj = local_prototype->NewInstance(Nan::GetCurrentContext()).ToLocalChecked();
        djinni::js::ObjectWrapper<ledger::core::api::WebSocketClient>::Wrap(object, obj);
    }
    else
    {
        Nan::ThrowError("NJSWebSocketClient::wrap: object template not valid");
    }
    return scope.Escape(obj);
}

void NJSWebSocketClient::Initialize(Local<Object> target) {
    Nan::HandleScope scope;

    Local<FunctionTemplate> func_template = Nan::New<FunctionTemplate>(NJSWebSocketClient::New);
    Local<ObjectTemplate> objectTemplate = func_template->InstanceTemplate();
    objectTemplate->SetInternalFieldCount(1);

    func_template->SetClassName(Nan::New<String>("NJSWebSocketClient").ToLocalChecked());
    Nan::SetPrototypeMethod(func_template,"New", New);
    //Set object prototype
    WebSocketClient_prototype.Reset(objectTemplate);

    //Add template to target
    target->Set(Nan::New<String>("NJSWebSocketClient").ToLocalChecked(), func_template->GetFunction(Nan::GetCurrentContext()).ToLocalChecked());
}
