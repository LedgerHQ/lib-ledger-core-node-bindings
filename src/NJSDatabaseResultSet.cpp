// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from database.djinni

#include "NJSDatabaseResultSet.hpp"
#include "NJSObjectWrapper.hpp"

using namespace v8;
using namespace node;
using namespace std;

std::shared_ptr<DatabaseResultRow> NJSDatabaseResultSet::getRow()
{
    Nan::HandleScope scope;
    //Wrap parameters
    Local<Value> args[1];
    Local<Object> local_njs_impl = Nan::New<Object>(njs_impl);
    if(!local_njs_impl->IsObject())
    {
        Nan::ThrowError("NJSDatabaseResultSet::getRow fail to retrieve node implementation");
    }
    auto calling_funtion = Nan::Get(local_njs_impl,Nan::New<String>("getRow").ToLocalChecked()).ToLocalChecked();
    auto result_getRow = Nan::CallAsFunction(calling_funtion->ToObject(Nan::GetCurrentContext()).ToLocalChecked(),local_njs_impl,0,args);
    if(result_getRow.IsEmpty())
    {
        Nan::ThrowError("NJSDatabaseResultSet::getRow call failed");
    }
    auto checkedResult_getRow = result_getRow.ToLocalChecked();
    Local<Object> njs_fResult_getRow = checkedResult_getRow->ToObject(Nan::GetCurrentContext()).ToLocalChecked();
    auto fResult_getRow = djinni::js::ObjectWrapper<ledger::core::api::DatabaseResultRow>::Unwrap(njs_fResult_getRow);

    return fResult_getRow;
}

int32_t NJSDatabaseResultSet::getUpdateCount()
{
    Nan::HandleScope scope;
    //Wrap parameters
    Local<Value> args[1];
    Local<Object> local_njs_impl = Nan::New<Object>(njs_impl);
    if(!local_njs_impl->IsObject())
    {
        Nan::ThrowError("NJSDatabaseResultSet::getUpdateCount fail to retrieve node implementation");
    }
    auto calling_funtion = Nan::Get(local_njs_impl,Nan::New<String>("getUpdateCount").ToLocalChecked()).ToLocalChecked();
    auto result_getUpdateCount = Nan::CallAsFunction(calling_funtion->ToObject(Nan::GetCurrentContext()).ToLocalChecked(),local_njs_impl,0,args);
    if(result_getUpdateCount.IsEmpty())
    {
        Nan::ThrowError("NJSDatabaseResultSet::getUpdateCount call failed");
    }
    auto checkedResult_getUpdateCount = result_getUpdateCount.ToLocalChecked();
    auto fResult_getUpdateCount = Nan::To<int32_t>(checkedResult_getUpdateCount).FromJust();
    return fResult_getUpdateCount;
}

bool NJSDatabaseResultSet::hasNext()
{
    Nan::HandleScope scope;
    //Wrap parameters
    Local<Value> args[1];
    Local<Object> local_njs_impl = Nan::New<Object>(njs_impl);
    if(!local_njs_impl->IsObject())
    {
        Nan::ThrowError("NJSDatabaseResultSet::hasNext fail to retrieve node implementation");
    }
    auto calling_funtion = Nan::Get(local_njs_impl,Nan::New<String>("hasNext").ToLocalChecked()).ToLocalChecked();
    auto result_hasNext = Nan::CallAsFunction(calling_funtion->ToObject(Nan::GetCurrentContext()).ToLocalChecked(),local_njs_impl,0,args);
    if(result_hasNext.IsEmpty())
    {
        Nan::ThrowError("NJSDatabaseResultSet::hasNext call failed");
    }
    auto checkedResult_hasNext = result_hasNext.ToLocalChecked();
    auto fResult_hasNext = Nan::To<bool>(checkedResult_hasNext).FromJust();
    return fResult_hasNext;
}

int32_t NJSDatabaseResultSet::available()
{
    Nan::HandleScope scope;
    //Wrap parameters
    Local<Value> args[1];
    Local<Object> local_njs_impl = Nan::New<Object>(njs_impl);
    if(!local_njs_impl->IsObject())
    {
        Nan::ThrowError("NJSDatabaseResultSet::available fail to retrieve node implementation");
    }
    auto calling_funtion = Nan::Get(local_njs_impl,Nan::New<String>("available").ToLocalChecked()).ToLocalChecked();
    auto result_available = Nan::CallAsFunction(calling_funtion->ToObject(Nan::GetCurrentContext()).ToLocalChecked(),local_njs_impl,0,args);
    if(result_available.IsEmpty())
    {
        Nan::ThrowError("NJSDatabaseResultSet::available call failed");
    }
    auto checkedResult_available = result_available.ToLocalChecked();
    auto fResult_available = Nan::To<int32_t>(checkedResult_available).FromJust();
    return fResult_available;
}

void NJSDatabaseResultSet::next()
{
    Nan::HandleScope scope;
    //Wrap parameters
    Local<Value> args[1];
    Local<Object> local_njs_impl = Nan::New<Object>(njs_impl);
    if(!local_njs_impl->IsObject())
    {
        Nan::ThrowError("NJSDatabaseResultSet::next fail to retrieve node implementation");
    }
    auto calling_funtion = Nan::Get(local_njs_impl,Nan::New<String>("next").ToLocalChecked()).ToLocalChecked();
    auto result_next = Nan::CallAsFunction(calling_funtion->ToObject(Nan::GetCurrentContext()).ToLocalChecked(),local_njs_impl,0,args);
    if(result_next.IsEmpty())
    {
        Nan::ThrowError("NJSDatabaseResultSet::next call failed");
    }
}

void NJSDatabaseResultSet::close()
{
    Nan::HandleScope scope;
    //Wrap parameters
    Local<Value> args[1];
    Local<Object> local_njs_impl = Nan::New<Object>(njs_impl);
    if(!local_njs_impl->IsObject())
    {
        Nan::ThrowError("NJSDatabaseResultSet::close fail to retrieve node implementation");
    }
    auto calling_funtion = Nan::Get(local_njs_impl,Nan::New<String>("close").ToLocalChecked()).ToLocalChecked();
    auto result_close = Nan::CallAsFunction(calling_funtion->ToObject(Nan::GetCurrentContext()).ToLocalChecked(),local_njs_impl,0,args);
    if(result_close.IsEmpty())
    {
        Nan::ThrowError("NJSDatabaseResultSet::close call failed");
    }
}

std::shared_ptr<DatabaseError> NJSDatabaseResultSet::getError()
{
    Nan::HandleScope scope;
    //Wrap parameters
    Local<Value> args[1];
    Local<Object> local_njs_impl = Nan::New<Object>(njs_impl);
    if(!local_njs_impl->IsObject())
    {
        Nan::ThrowError("NJSDatabaseResultSet::getError fail to retrieve node implementation");
    }
    auto calling_funtion = Nan::Get(local_njs_impl,Nan::New<String>("getError").ToLocalChecked()).ToLocalChecked();
    auto result_getError = Nan::CallAsFunction(calling_funtion->ToObject(Nan::GetCurrentContext()).ToLocalChecked(),local_njs_impl,0,args);
    if(result_getError.IsEmpty())
    {
        Nan::ThrowError("NJSDatabaseResultSet::getError call failed");
    }
    auto checkedResult_getError = result_getError.ToLocalChecked();
    Local<Object> njs_fResult_getError = checkedResult_getError->ToObject(Nan::GetCurrentContext()).ToLocalChecked();
    auto fResult_getError = djinni::js::ObjectWrapper<ledger::core::api::DatabaseError>::Unwrap(njs_fResult_getError);

    return fResult_getError;
}

NAN_METHOD(NJSDatabaseResultSet::New) {
    //Only new allowed
    if(!info.IsConstructCall())
    {
        return Nan::ThrowError("NJSDatabaseResultSet function can only be called as constructor (use New)");
    }

    if(!info[0]->IsObject())
    {
        return Nan::ThrowError("NJSDatabaseResultSet::New requires an implementation from node");
    }
    auto node_instance = std::make_shared<NJSDatabaseResultSet>(info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked());
    djinni::js::ObjectWrapper<NJSDatabaseResultSet>::Wrap(node_instance, info.This());
    info.GetReturnValue().Set(info.This());
}


Nan::Persistent<ObjectTemplate> NJSDatabaseResultSet::DatabaseResultSet_prototype;

Local<Object> NJSDatabaseResultSet::wrap(const std::shared_ptr<ledger::core::api::DatabaseResultSet> &object) {
    Nan::EscapableHandleScope scope;
    Local<ObjectTemplate> local_prototype = Nan::New(DatabaseResultSet_prototype);

    Local<Object> obj;
    if(!local_prototype.IsEmpty())
    {
        obj = local_prototype->NewInstance(Nan::GetCurrentContext()).ToLocalChecked();
        djinni::js::ObjectWrapper<ledger::core::api::DatabaseResultSet>::Wrap(object, obj);
    }
    else
    {
        Nan::ThrowError("NJSDatabaseResultSet::wrap: object template not valid");
    }
    return scope.Escape(obj);
}

void NJSDatabaseResultSet::Initialize(Local<Object> target) {
    Nan::HandleScope scope;

    Local<FunctionTemplate> func_template = Nan::New<FunctionTemplate>(NJSDatabaseResultSet::New);
    Local<ObjectTemplate> objectTemplate = func_template->InstanceTemplate();
    objectTemplate->SetInternalFieldCount(1);

    func_template->SetClassName(Nan::New<String>("NJSDatabaseResultSet").ToLocalChecked());
    Nan::SetPrototypeMethod(func_template,"New", New);
    //Set object prototype
    DatabaseResultSet_prototype.Reset(objectTemplate);

    //Add template to target
    target->Set(Nan::New<String>("NJSDatabaseResultSet").ToLocalChecked(), func_template->GetFunction(Nan::GetCurrentContext()).ToLocalChecked());
}
