// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from wallet.djinni

#include "NJSAddressCpp.hpp"
#include "NJSObjectWrapper.hpp"

using namespace v8;
using namespace node;
using namespace std;

NAN_METHOD(NJSAddress::getDerivationPath) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSAddress::getDerivationPath needs 0 arguments");
    }

    //Check if parameters have correct types

    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::Address>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSAddress::getDerivationPath : implementation of Address is not valid");
    }

    auto result = cpp_impl->getDerivationPath();

    //Wrap result in node object
    Local<Value> arg_0;
    if(result)
    {
        auto arg_0_optional = (result).value();
        auto arg_0_tmp = Nan::New<String>(arg_0_optional).ToLocalChecked();
        arg_0 = arg_0_tmp;
    }


    //Return result
    info.GetReturnValue().Set(arg_0);
}
NAN_METHOD(NJSAddress::toString) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSAddress::toString needs 0 arguments");
    }

    //Check if parameters have correct types

    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::Address>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSAddress::toString : implementation of Address is not valid");
    }

    auto result = cpp_impl->toString();

    //Wrap result in node object
    auto arg_0 = Nan::New<String>(result).ToLocalChecked();

    //Return result
    info.GetReturnValue().Set(arg_0);
}
NAN_METHOD(NJSAddress::asBitcoinLikeAddress) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSAddress::asBitcoinLikeAddress needs 0 arguments");
    }

    //Check if parameters have correct types

    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::Address>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSAddress::asBitcoinLikeAddress : implementation of Address is not valid");
    }

    auto result = cpp_impl->asBitcoinLikeAddress();

    //Wrap result in node object
    auto arg_0 = NJSBitcoinLikeAddress::wrap(result);



    //Return result
    info.GetReturnValue().Set(arg_0);
}
NAN_METHOD(NJSAddress::isInstanceOfBitcoinLikeAddress) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSAddress::isInstanceOfBitcoinLikeAddress needs 0 arguments");
    }

    //Check if parameters have correct types

    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::Address>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSAddress::isInstanceOfBitcoinLikeAddress : implementation of Address is not valid");
    }

    auto result = cpp_impl->isInstanceOfBitcoinLikeAddress();

    //Wrap result in node object
    auto arg_0 = Nan::New<Boolean>(result);

    //Return result
    info.GetReturnValue().Set(arg_0);
}
NAN_METHOD(NJSAddress::getCurrency) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSAddress::getCurrency needs 0 arguments");
    }

    //Check if parameters have correct types

    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::Address>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSAddress::getCurrency : implementation of Address is not valid");
    }

    auto result = cpp_impl->getCurrency();

    //Wrap result in node object
    auto arg_0 = Nan::New<Object>();
    auto arg_0_1 = Nan::New<Integer>((int)result.walletType);
    Nan::DefineOwnProperty(arg_0, Nan::New<String>("walletType").ToLocalChecked(), arg_0_1);
    auto arg_0_2 = Nan::New<String>(result.name).ToLocalChecked();
    Nan::DefineOwnProperty(arg_0, Nan::New<String>("name").ToLocalChecked(), arg_0_2);
    auto arg_0_3 = Nan::New<Int32>(result.bip44CoinType);
    Nan::DefineOwnProperty(arg_0, Nan::New<String>("bip44CoinType").ToLocalChecked(), arg_0_3);
    auto arg_0_4 = Nan::New<String>(result.paymentUriScheme).ToLocalChecked();
    Nan::DefineOwnProperty(arg_0, Nan::New<String>("paymentUriScheme").ToLocalChecked(), arg_0_4);
    Local<Array> arg_0_5 = Nan::New<Array>();
    for(size_t arg_0_5_id = 0; arg_0_5_id < result.units.size(); arg_0_5_id++)
    {
        auto arg_0_5_elem = Nan::New<Object>();
        auto arg_0_5_elem_1 = Nan::New<String>(result.units[arg_0_5_id].name).ToLocalChecked();
        Nan::DefineOwnProperty(arg_0_5_elem, Nan::New<String>("name").ToLocalChecked(), arg_0_5_elem_1);
        auto arg_0_5_elem_2 = Nan::New<String>(result.units[arg_0_5_id].symbol).ToLocalChecked();
        Nan::DefineOwnProperty(arg_0_5_elem, Nan::New<String>("symbol").ToLocalChecked(), arg_0_5_elem_2);
        auto arg_0_5_elem_3 = Nan::New<String>(result.units[arg_0_5_id].code).ToLocalChecked();
        Nan::DefineOwnProperty(arg_0_5_elem, Nan::New<String>("code").ToLocalChecked(), arg_0_5_elem_3);
        auto arg_0_5_elem_4 = Nan::New<Int32>(result.units[arg_0_5_id].numberOfDecimal);
        Nan::DefineOwnProperty(arg_0_5_elem, Nan::New<String>("numberOfDecimal").ToLocalChecked(), arg_0_5_elem_4);

        arg_0_5->Set((int)arg_0_5_id,arg_0_5_elem);
    }

    Nan::DefineOwnProperty(arg_0, Nan::New<String>("units").ToLocalChecked(), arg_0_5);
    Local<Value> arg_0_6;
    if(result.bitcoinLikeNetworkParameters)
    {
        auto arg_0_6_optional = (result.bitcoinLikeNetworkParameters).value();
        auto arg_0_6_tmp = Nan::New<Object>();
        auto arg_0_6_tmp_1 = Nan::New<String>(arg_0_6_optional.Identifier).ToLocalChecked();
        Nan::DefineOwnProperty(arg_0_6_tmp, Nan::New<String>("Identifier").ToLocalChecked(), arg_0_6_tmp_1);
        Local<Array> arg_0_6_tmp_2 = Nan::New<Array>();
        for(size_t arg_0_6_tmp_2_id = 0; arg_0_6_tmp_2_id < arg_0_6_optional.P2PKHVersion.size(); arg_0_6_tmp_2_id++)
        {
            auto arg_0_6_tmp_2_elem = Nan::New<Uint32>(arg_0_6_optional.P2PKHVersion[arg_0_6_tmp_2_id]);
            arg_0_6_tmp_2->Set((int)arg_0_6_tmp_2_id,arg_0_6_tmp_2_elem);
        }

        Nan::DefineOwnProperty(arg_0_6_tmp, Nan::New<String>("P2PKHVersion").ToLocalChecked(), arg_0_6_tmp_2);
        Local<Array> arg_0_6_tmp_3 = Nan::New<Array>();
        for(size_t arg_0_6_tmp_3_id = 0; arg_0_6_tmp_3_id < arg_0_6_optional.P2SHVersion.size(); arg_0_6_tmp_3_id++)
        {
            auto arg_0_6_tmp_3_elem = Nan::New<Uint32>(arg_0_6_optional.P2SHVersion[arg_0_6_tmp_3_id]);
            arg_0_6_tmp_3->Set((int)arg_0_6_tmp_3_id,arg_0_6_tmp_3_elem);
        }

        Nan::DefineOwnProperty(arg_0_6_tmp, Nan::New<String>("P2SHVersion").ToLocalChecked(), arg_0_6_tmp_3);
        Local<Array> arg_0_6_tmp_4 = Nan::New<Array>();
        for(size_t arg_0_6_tmp_4_id = 0; arg_0_6_tmp_4_id < arg_0_6_optional.XPUBVersion.size(); arg_0_6_tmp_4_id++)
        {
            auto arg_0_6_tmp_4_elem = Nan::New<Uint32>(arg_0_6_optional.XPUBVersion[arg_0_6_tmp_4_id]);
            arg_0_6_tmp_4->Set((int)arg_0_6_tmp_4_id,arg_0_6_tmp_4_elem);
        }

        Nan::DefineOwnProperty(arg_0_6_tmp, Nan::New<String>("XPUBVersion").ToLocalChecked(), arg_0_6_tmp_4);
        auto arg_0_6_tmp_5 = Nan::New<Integer>((int)arg_0_6_optional.FeePolicy);
        Nan::DefineOwnProperty(arg_0_6_tmp, Nan::New<String>("FeePolicy").ToLocalChecked(), arg_0_6_tmp_5);
        auto arg_0_6_tmp_6 = Nan::New<Number>(arg_0_6_optional.DustAmount);
        Nan::DefineOwnProperty(arg_0_6_tmp, Nan::New<String>("DustAmount").ToLocalChecked(), arg_0_6_tmp_6);
        auto arg_0_6_tmp_7 = Nan::New<String>(arg_0_6_optional.MessagePrefix).ToLocalChecked();
        Nan::DefineOwnProperty(arg_0_6_tmp, Nan::New<String>("MessagePrefix").ToLocalChecked(), arg_0_6_tmp_7);
        auto arg_0_6_tmp_8 = Nan::New<Boolean>(arg_0_6_optional.UsesTimestampedTransaction);
        Nan::DefineOwnProperty(arg_0_6_tmp, Nan::New<String>("UsesTimestampedTransaction").ToLocalChecked(), arg_0_6_tmp_8);
        auto arg_0_6_tmp_9 = Nan::New<Number>(arg_0_6_optional.TimestampDelay);
        Nan::DefineOwnProperty(arg_0_6_tmp, Nan::New<String>("TimestampDelay").ToLocalChecked(), arg_0_6_tmp_9);
        Local<Array> arg_0_6_tmp_10 = Nan::New<Array>();
        for(size_t arg_0_6_tmp_10_id = 0; arg_0_6_tmp_10_id < arg_0_6_optional.SigHash.size(); arg_0_6_tmp_10_id++)
        {
            auto arg_0_6_tmp_10_elem = Nan::New<Uint32>(arg_0_6_optional.SigHash[arg_0_6_tmp_10_id]);
            arg_0_6_tmp_10->Set((int)arg_0_6_tmp_10_id,arg_0_6_tmp_10_elem);
        }

        Nan::DefineOwnProperty(arg_0_6_tmp, Nan::New<String>("SigHash").ToLocalChecked(), arg_0_6_tmp_10);
        Local<Array> arg_0_6_tmp_11 = Nan::New<Array>();
        for(size_t arg_0_6_tmp_11_id = 0; arg_0_6_tmp_11_id < arg_0_6_optional.AdditionalBIPs.size(); arg_0_6_tmp_11_id++)
        {
            auto arg_0_6_tmp_11_elem = Nan::New<String>(arg_0_6_optional.AdditionalBIPs[arg_0_6_tmp_11_id]).ToLocalChecked();
            arg_0_6_tmp_11->Set((int)arg_0_6_tmp_11_id,arg_0_6_tmp_11_elem);
        }

        Nan::DefineOwnProperty(arg_0_6_tmp, Nan::New<String>("AdditionalBIPs").ToLocalChecked(), arg_0_6_tmp_11);

        arg_0_6 = arg_0_6_tmp;
    }

    Nan::DefineOwnProperty(arg_0, Nan::New<String>("bitcoinLikeNetworkParameters").ToLocalChecked(), arg_0_6);
    Local<Value> arg_0_7;
    if(result.ethereumLikeNetworkParameters)
    {
        auto arg_0_7_optional = (result.ethereumLikeNetworkParameters).value();
        auto arg_0_7_tmp = Nan::New<Object>();
        auto arg_0_7_tmp_1 = Nan::New<String>(arg_0_7_optional.Identifier).ToLocalChecked();
        Nan::DefineOwnProperty(arg_0_7_tmp, Nan::New<String>("Identifier").ToLocalChecked(), arg_0_7_tmp_1);
        auto arg_0_7_tmp_2 = Nan::New<String>(arg_0_7_optional.MessagePrefix).ToLocalChecked();
        Nan::DefineOwnProperty(arg_0_7_tmp, Nan::New<String>("MessagePrefix").ToLocalChecked(), arg_0_7_tmp_2);
        auto arg_0_7_tmp_3 = Nan::New<String>(arg_0_7_optional.ChainID).ToLocalChecked();
        Nan::DefineOwnProperty(arg_0_7_tmp, Nan::New<String>("ChainID").ToLocalChecked(), arg_0_7_tmp_3);
        Local<Array> arg_0_7_tmp_4 = Nan::New<Array>();
        for(size_t arg_0_7_tmp_4_id = 0; arg_0_7_tmp_4_id < arg_0_7_optional.XPUBVersion.size(); arg_0_7_tmp_4_id++)
        {
            auto arg_0_7_tmp_4_elem = Nan::New<Uint32>(arg_0_7_optional.XPUBVersion[arg_0_7_tmp_4_id]);
            arg_0_7_tmp_4->Set((int)arg_0_7_tmp_4_id,arg_0_7_tmp_4_elem);
        }

        Nan::DefineOwnProperty(arg_0_7_tmp, Nan::New<String>("XPUBVersion").ToLocalChecked(), arg_0_7_tmp_4);
        Local<Array> arg_0_7_tmp_5 = Nan::New<Array>();
        for(size_t arg_0_7_tmp_5_id = 0; arg_0_7_tmp_5_id < arg_0_7_optional.AdditionalEIPs.size(); arg_0_7_tmp_5_id++)
        {
            auto arg_0_7_tmp_5_elem = Nan::New<String>(arg_0_7_optional.AdditionalEIPs[arg_0_7_tmp_5_id]).ToLocalChecked();
            arg_0_7_tmp_5->Set((int)arg_0_7_tmp_5_id,arg_0_7_tmp_5_elem);
        }

        Nan::DefineOwnProperty(arg_0_7_tmp, Nan::New<String>("AdditionalEIPs").ToLocalChecked(), arg_0_7_tmp_5);
        auto arg_0_7_tmp_6 = Nan::New<Number>(arg_0_7_optional.TimestampDelay);
        Nan::DefineOwnProperty(arg_0_7_tmp, Nan::New<String>("TimestampDelay").ToLocalChecked(), arg_0_7_tmp_6);

        arg_0_7 = arg_0_7_tmp;
    }

    Nan::DefineOwnProperty(arg_0, Nan::New<String>("ethereumLikeNetworkParameters").ToLocalChecked(), arg_0_7);
    Local<Value> arg_0_8;
    if(result.rippleLikeNetworkParameters)
    {
        auto arg_0_8_optional = (result.rippleLikeNetworkParameters).value();
        auto arg_0_8_tmp = Nan::New<Object>();
        auto arg_0_8_tmp_1 = Nan::New<String>(arg_0_8_optional.Identifier).ToLocalChecked();
        Nan::DefineOwnProperty(arg_0_8_tmp, Nan::New<String>("Identifier").ToLocalChecked(), arg_0_8_tmp_1);
        auto arg_0_8_tmp_2 = Nan::New<String>(arg_0_8_optional.MessagePrefix).ToLocalChecked();
        Nan::DefineOwnProperty(arg_0_8_tmp, Nan::New<String>("MessagePrefix").ToLocalChecked(), arg_0_8_tmp_2);
        Local<Array> arg_0_8_tmp_3 = Nan::New<Array>();
        for(size_t arg_0_8_tmp_3_id = 0; arg_0_8_tmp_3_id < arg_0_8_optional.XPUBVersion.size(); arg_0_8_tmp_3_id++)
        {
            auto arg_0_8_tmp_3_elem = Nan::New<Uint32>(arg_0_8_optional.XPUBVersion[arg_0_8_tmp_3_id]);
            arg_0_8_tmp_3->Set((int)arg_0_8_tmp_3_id,arg_0_8_tmp_3_elem);
        }

        Nan::DefineOwnProperty(arg_0_8_tmp, Nan::New<String>("XPUBVersion").ToLocalChecked(), arg_0_8_tmp_3);
        Local<Array> arg_0_8_tmp_4 = Nan::New<Array>();
        for(size_t arg_0_8_tmp_4_id = 0; arg_0_8_tmp_4_id < arg_0_8_optional.AdditionalRIPs.size(); arg_0_8_tmp_4_id++)
        {
            auto arg_0_8_tmp_4_elem = Nan::New<String>(arg_0_8_optional.AdditionalRIPs[arg_0_8_tmp_4_id]).ToLocalChecked();
            arg_0_8_tmp_4->Set((int)arg_0_8_tmp_4_id,arg_0_8_tmp_4_elem);
        }

        Nan::DefineOwnProperty(arg_0_8_tmp, Nan::New<String>("AdditionalRIPs").ToLocalChecked(), arg_0_8_tmp_4);
        auto arg_0_8_tmp_5 = Nan::New<Number>(arg_0_8_optional.TimestampDelay);
        Nan::DefineOwnProperty(arg_0_8_tmp, Nan::New<String>("TimestampDelay").ToLocalChecked(), arg_0_8_tmp_5);

        arg_0_8 = arg_0_8_tmp;
    }

    Nan::DefineOwnProperty(arg_0, Nan::New<String>("rippleLikeNetworkParameters").ToLocalChecked(), arg_0_8);
    Local<Value> arg_0_9;
    if(result.tezosLikeNetworkParameters)
    {
        auto arg_0_9_optional = (result.tezosLikeNetworkParameters).value();
        auto arg_0_9_tmp = Nan::New<Object>();
        auto arg_0_9_tmp_1 = Nan::New<String>(arg_0_9_optional.Identifier).ToLocalChecked();
        Nan::DefineOwnProperty(arg_0_9_tmp, Nan::New<String>("Identifier").ToLocalChecked(), arg_0_9_tmp_1);
        auto arg_0_9_tmp_2 = Nan::New<String>(arg_0_9_optional.MessagePrefix).ToLocalChecked();
        Nan::DefineOwnProperty(arg_0_9_tmp, Nan::New<String>("MessagePrefix").ToLocalChecked(), arg_0_9_tmp_2);
        Local<Array> arg_0_9_tmp_3 = Nan::New<Array>();
        for(size_t arg_0_9_tmp_3_id = 0; arg_0_9_tmp_3_id < arg_0_9_optional.XPUBVersion.size(); arg_0_9_tmp_3_id++)
        {
            auto arg_0_9_tmp_3_elem = Nan::New<Uint32>(arg_0_9_optional.XPUBVersion[arg_0_9_tmp_3_id]);
            arg_0_9_tmp_3->Set((int)arg_0_9_tmp_3_id,arg_0_9_tmp_3_elem);
        }

        Nan::DefineOwnProperty(arg_0_9_tmp, Nan::New<String>("XPUBVersion").ToLocalChecked(), arg_0_9_tmp_3);
        Local<Array> arg_0_9_tmp_4 = Nan::New<Array>();
        for(size_t arg_0_9_tmp_4_id = 0; arg_0_9_tmp_4_id < arg_0_9_optional.ImplicitPrefix.size(); arg_0_9_tmp_4_id++)
        {
            auto arg_0_9_tmp_4_elem = Nan::New<Uint32>(arg_0_9_optional.ImplicitPrefix[arg_0_9_tmp_4_id]);
            arg_0_9_tmp_4->Set((int)arg_0_9_tmp_4_id,arg_0_9_tmp_4_elem);
        }

        Nan::DefineOwnProperty(arg_0_9_tmp, Nan::New<String>("ImplicitPrefix").ToLocalChecked(), arg_0_9_tmp_4);
        Local<Array> arg_0_9_tmp_5 = Nan::New<Array>();
        for(size_t arg_0_9_tmp_5_id = 0; arg_0_9_tmp_5_id < arg_0_9_optional.OriginatedPrefix.size(); arg_0_9_tmp_5_id++)
        {
            auto arg_0_9_tmp_5_elem = Nan::New<Uint32>(arg_0_9_optional.OriginatedPrefix[arg_0_9_tmp_5_id]);
            arg_0_9_tmp_5->Set((int)arg_0_9_tmp_5_id,arg_0_9_tmp_5_elem);
        }

        Nan::DefineOwnProperty(arg_0_9_tmp, Nan::New<String>("OriginatedPrefix").ToLocalChecked(), arg_0_9_tmp_5);
        Local<Array> arg_0_9_tmp_6 = Nan::New<Array>();
        for(size_t arg_0_9_tmp_6_id = 0; arg_0_9_tmp_6_id < arg_0_9_optional.AdditionalTIPs.size(); arg_0_9_tmp_6_id++)
        {
            auto arg_0_9_tmp_6_elem = Nan::New<String>(arg_0_9_optional.AdditionalTIPs[arg_0_9_tmp_6_id]).ToLocalChecked();
            arg_0_9_tmp_6->Set((int)arg_0_9_tmp_6_id,arg_0_9_tmp_6_elem);
        }

        Nan::DefineOwnProperty(arg_0_9_tmp, Nan::New<String>("AdditionalTIPs").ToLocalChecked(), arg_0_9_tmp_6);
        auto arg_0_9_tmp_7 = Nan::New<Number>(arg_0_9_optional.TimestampDelay);
        Nan::DefineOwnProperty(arg_0_9_tmp, Nan::New<String>("TimestampDelay").ToLocalChecked(), arg_0_9_tmp_7);

        arg_0_9 = arg_0_9_tmp;
    }

    Nan::DefineOwnProperty(arg_0, Nan::New<String>("tezosLikeNetworkParameters").ToLocalChecked(), arg_0_9);


    //Return result
    info.GetReturnValue().Set(arg_0);
}
NAN_METHOD(NJSAddress::parse) {

    //Check if method called with right number of arguments
    if(info.Length() != 2)
    {
        return Nan::ThrowError("NJSAddress::parse needs 2 arguments");
    }

    //Check if parameters have correct types
    Nan::Utf8String string_arg_0(info[0]->ToString(Nan::GetCurrentContext()).ToLocalChecked());
    auto arg_0 = std::string(*string_arg_0);

    auto field_arg_1_1 = Nan::Get(info[1]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("walletType").ToLocalChecked()).ToLocalChecked();
    auto arg_1_1 = (ledger::core::api::WalletType)Nan::To<int>(field_arg_1_1).FromJust();

    auto field_arg_1_2 = Nan::Get(info[1]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("name").ToLocalChecked()).ToLocalChecked();
    Nan::Utf8String string_arg_1_2(field_arg_1_2->ToString(Nan::GetCurrentContext()).ToLocalChecked());
    auto arg_1_2 = std::string(*string_arg_1_2);

    auto field_arg_1_3 = Nan::Get(info[1]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("bip44CoinType").ToLocalChecked()).ToLocalChecked();
    auto arg_1_3 = Nan::To<int32_t>(field_arg_1_3).FromJust();

    auto field_arg_1_4 = Nan::Get(info[1]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("paymentUriScheme").ToLocalChecked()).ToLocalChecked();
    Nan::Utf8String string_arg_1_4(field_arg_1_4->ToString(Nan::GetCurrentContext()).ToLocalChecked());
    auto arg_1_4 = std::string(*string_arg_1_4);

    auto field_arg_1_5 = Nan::Get(info[1]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("units").ToLocalChecked()).ToLocalChecked();
    vector<CurrencyUnit> arg_1_5;
    Local<Array> arg_1_5_container = Local<Array>::Cast(field_arg_1_5);
    for(uint32_t arg_1_5_id = 0; arg_1_5_id < arg_1_5_container->Length(); arg_1_5_id++)
    {
        if(arg_1_5_container->Get(arg_1_5_id)->IsObject())
        {

            auto field_arg_1_5_elem_1 = Nan::Get(arg_1_5_container->Get(arg_1_5_id)->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("name").ToLocalChecked()).ToLocalChecked();
            Nan::Utf8String string_arg_1_5_elem_1(field_arg_1_5_elem_1->ToString(Nan::GetCurrentContext()).ToLocalChecked());
            auto arg_1_5_elem_1 = std::string(*string_arg_1_5_elem_1);

            auto field_arg_1_5_elem_2 = Nan::Get(arg_1_5_container->Get(arg_1_5_id)->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("symbol").ToLocalChecked()).ToLocalChecked();
            Nan::Utf8String string_arg_1_5_elem_2(field_arg_1_5_elem_2->ToString(Nan::GetCurrentContext()).ToLocalChecked());
            auto arg_1_5_elem_2 = std::string(*string_arg_1_5_elem_2);

            auto field_arg_1_5_elem_3 = Nan::Get(arg_1_5_container->Get(arg_1_5_id)->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("code").ToLocalChecked()).ToLocalChecked();
            Nan::Utf8String string_arg_1_5_elem_3(field_arg_1_5_elem_3->ToString(Nan::GetCurrentContext()).ToLocalChecked());
            auto arg_1_5_elem_3 = std::string(*string_arg_1_5_elem_3);

            auto field_arg_1_5_elem_4 = Nan::Get(arg_1_5_container->Get(arg_1_5_id)->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("numberOfDecimal").ToLocalChecked()).ToLocalChecked();
            auto arg_1_5_elem_4 = Nan::To<int32_t>(field_arg_1_5_elem_4).FromJust();
            CurrencyUnit arg_1_5_elem(arg_1_5_elem_1, arg_1_5_elem_2, arg_1_5_elem_3, arg_1_5_elem_4);

            arg_1_5.emplace_back(arg_1_5_elem);
        }
    }


    auto field_arg_1_6 = Nan::Get(info[1]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("bitcoinLikeNetworkParameters").ToLocalChecked()).ToLocalChecked();
    auto arg_1_6 = std::experimental::optional<BitcoinLikeNetworkParameters>();
    if(!field_arg_1_6->IsNull() && !field_arg_1_6->IsUndefined())
    {

        auto field_opt_arg_1_6_1 = Nan::Get(field_arg_1_6->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("Identifier").ToLocalChecked()).ToLocalChecked();
        Nan::Utf8String string_opt_arg_1_6_1(field_opt_arg_1_6_1->ToString(Nan::GetCurrentContext()).ToLocalChecked());
        auto opt_arg_1_6_1 = std::string(*string_opt_arg_1_6_1);

        auto field_opt_arg_1_6_2 = Nan::Get(field_arg_1_6->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("P2PKHVersion").ToLocalChecked()).ToLocalChecked();
        vector<uint8_t> opt_arg_1_6_2;
        Local<Array> opt_arg_1_6_2_container = Local<Array>::Cast(field_opt_arg_1_6_2);
        for(uint32_t opt_arg_1_6_2_id = 0; opt_arg_1_6_2_id < opt_arg_1_6_2_container->Length(); opt_arg_1_6_2_id++)
        {
            if(opt_arg_1_6_2_container->Get(opt_arg_1_6_2_id)->IsUint32())
            {
                auto opt_arg_1_6_2_elem = Nan::To<uint32_t>(opt_arg_1_6_2_container->Get(opt_arg_1_6_2_id)).FromJust();
                opt_arg_1_6_2.emplace_back(opt_arg_1_6_2_elem);
            }
        }


        auto field_opt_arg_1_6_3 = Nan::Get(field_arg_1_6->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("P2SHVersion").ToLocalChecked()).ToLocalChecked();
        vector<uint8_t> opt_arg_1_6_3;
        Local<Array> opt_arg_1_6_3_container = Local<Array>::Cast(field_opt_arg_1_6_3);
        for(uint32_t opt_arg_1_6_3_id = 0; opt_arg_1_6_3_id < opt_arg_1_6_3_container->Length(); opt_arg_1_6_3_id++)
        {
            if(opt_arg_1_6_3_container->Get(opt_arg_1_6_3_id)->IsUint32())
            {
                auto opt_arg_1_6_3_elem = Nan::To<uint32_t>(opt_arg_1_6_3_container->Get(opt_arg_1_6_3_id)).FromJust();
                opt_arg_1_6_3.emplace_back(opt_arg_1_6_3_elem);
            }
        }


        auto field_opt_arg_1_6_4 = Nan::Get(field_arg_1_6->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("XPUBVersion").ToLocalChecked()).ToLocalChecked();
        vector<uint8_t> opt_arg_1_6_4;
        Local<Array> opt_arg_1_6_4_container = Local<Array>::Cast(field_opt_arg_1_6_4);
        for(uint32_t opt_arg_1_6_4_id = 0; opt_arg_1_6_4_id < opt_arg_1_6_4_container->Length(); opt_arg_1_6_4_id++)
        {
            if(opt_arg_1_6_4_container->Get(opt_arg_1_6_4_id)->IsUint32())
            {
                auto opt_arg_1_6_4_elem = Nan::To<uint32_t>(opt_arg_1_6_4_container->Get(opt_arg_1_6_4_id)).FromJust();
                opt_arg_1_6_4.emplace_back(opt_arg_1_6_4_elem);
            }
        }


        auto field_opt_arg_1_6_5 = Nan::Get(field_arg_1_6->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("FeePolicy").ToLocalChecked()).ToLocalChecked();
        auto opt_arg_1_6_5 = (ledger::core::api::BitcoinLikeFeePolicy)Nan::To<int>(field_opt_arg_1_6_5).FromJust();

        auto field_opt_arg_1_6_6 = Nan::Get(field_arg_1_6->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("DustAmount").ToLocalChecked()).ToLocalChecked();
        auto opt_arg_1_6_6 = Nan::To<int64_t>(field_opt_arg_1_6_6).FromJust();

        auto field_opt_arg_1_6_7 = Nan::Get(field_arg_1_6->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("MessagePrefix").ToLocalChecked()).ToLocalChecked();
        Nan::Utf8String string_opt_arg_1_6_7(field_opt_arg_1_6_7->ToString(Nan::GetCurrentContext()).ToLocalChecked());
        auto opt_arg_1_6_7 = std::string(*string_opt_arg_1_6_7);

        auto field_opt_arg_1_6_8 = Nan::Get(field_arg_1_6->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("UsesTimestampedTransaction").ToLocalChecked()).ToLocalChecked();
        auto opt_arg_1_6_8 = Nan::To<bool>(field_opt_arg_1_6_8).FromJust();

        auto field_opt_arg_1_6_9 = Nan::Get(field_arg_1_6->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("TimestampDelay").ToLocalChecked()).ToLocalChecked();
        auto opt_arg_1_6_9 = Nan::To<int64_t>(field_opt_arg_1_6_9).FromJust();

        auto field_opt_arg_1_6_10 = Nan::Get(field_arg_1_6->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("SigHash").ToLocalChecked()).ToLocalChecked();
        vector<uint8_t> opt_arg_1_6_10;
        Local<Array> opt_arg_1_6_10_container = Local<Array>::Cast(field_opt_arg_1_6_10);
        for(uint32_t opt_arg_1_6_10_id = 0; opt_arg_1_6_10_id < opt_arg_1_6_10_container->Length(); opt_arg_1_6_10_id++)
        {
            if(opt_arg_1_6_10_container->Get(opt_arg_1_6_10_id)->IsUint32())
            {
                auto opt_arg_1_6_10_elem = Nan::To<uint32_t>(opt_arg_1_6_10_container->Get(opt_arg_1_6_10_id)).FromJust();
                opt_arg_1_6_10.emplace_back(opt_arg_1_6_10_elem);
            }
        }


        auto field_opt_arg_1_6_11 = Nan::Get(field_arg_1_6->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("AdditionalBIPs").ToLocalChecked()).ToLocalChecked();
        vector<std::string> opt_arg_1_6_11;
        Local<Array> opt_arg_1_6_11_container = Local<Array>::Cast(field_opt_arg_1_6_11);
        for(uint32_t opt_arg_1_6_11_id = 0; opt_arg_1_6_11_id < opt_arg_1_6_11_container->Length(); opt_arg_1_6_11_id++)
        {
            if(opt_arg_1_6_11_container->Get(opt_arg_1_6_11_id)->IsString())
            {
                Nan::Utf8String string_opt_arg_1_6_11_elem(opt_arg_1_6_11_container->Get(opt_arg_1_6_11_id)->ToString(Nan::GetCurrentContext()).ToLocalChecked());
                auto opt_arg_1_6_11_elem = std::string(*string_opt_arg_1_6_11_elem);
                opt_arg_1_6_11.emplace_back(opt_arg_1_6_11_elem);
            }
        }

        BitcoinLikeNetworkParameters opt_arg_1_6(opt_arg_1_6_1, opt_arg_1_6_2, opt_arg_1_6_3, opt_arg_1_6_4, opt_arg_1_6_5, opt_arg_1_6_6, opt_arg_1_6_7, opt_arg_1_6_8, opt_arg_1_6_9, opt_arg_1_6_10, opt_arg_1_6_11);

        arg_1_6.emplace(opt_arg_1_6);
    }


    auto field_arg_1_7 = Nan::Get(info[1]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("ethereumLikeNetworkParameters").ToLocalChecked()).ToLocalChecked();
    auto arg_1_7 = std::experimental::optional<EthereumLikeNetworkParameters>();
    if(!field_arg_1_7->IsNull() && !field_arg_1_7->IsUndefined())
    {

        auto field_opt_arg_1_7_1 = Nan::Get(field_arg_1_7->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("Identifier").ToLocalChecked()).ToLocalChecked();
        Nan::Utf8String string_opt_arg_1_7_1(field_opt_arg_1_7_1->ToString(Nan::GetCurrentContext()).ToLocalChecked());
        auto opt_arg_1_7_1 = std::string(*string_opt_arg_1_7_1);

        auto field_opt_arg_1_7_2 = Nan::Get(field_arg_1_7->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("MessagePrefix").ToLocalChecked()).ToLocalChecked();
        Nan::Utf8String string_opt_arg_1_7_2(field_opt_arg_1_7_2->ToString(Nan::GetCurrentContext()).ToLocalChecked());
        auto opt_arg_1_7_2 = std::string(*string_opt_arg_1_7_2);

        auto field_opt_arg_1_7_3 = Nan::Get(field_arg_1_7->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("ChainID").ToLocalChecked()).ToLocalChecked();
        Nan::Utf8String string_opt_arg_1_7_3(field_opt_arg_1_7_3->ToString(Nan::GetCurrentContext()).ToLocalChecked());
        auto opt_arg_1_7_3 = std::string(*string_opt_arg_1_7_3);

        auto field_opt_arg_1_7_4 = Nan::Get(field_arg_1_7->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("XPUBVersion").ToLocalChecked()).ToLocalChecked();
        vector<uint8_t> opt_arg_1_7_4;
        Local<Array> opt_arg_1_7_4_container = Local<Array>::Cast(field_opt_arg_1_7_4);
        for(uint32_t opt_arg_1_7_4_id = 0; opt_arg_1_7_4_id < opt_arg_1_7_4_container->Length(); opt_arg_1_7_4_id++)
        {
            if(opt_arg_1_7_4_container->Get(opt_arg_1_7_4_id)->IsUint32())
            {
                auto opt_arg_1_7_4_elem = Nan::To<uint32_t>(opt_arg_1_7_4_container->Get(opt_arg_1_7_4_id)).FromJust();
                opt_arg_1_7_4.emplace_back(opt_arg_1_7_4_elem);
            }
        }


        auto field_opt_arg_1_7_5 = Nan::Get(field_arg_1_7->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("AdditionalEIPs").ToLocalChecked()).ToLocalChecked();
        vector<std::string> opt_arg_1_7_5;
        Local<Array> opt_arg_1_7_5_container = Local<Array>::Cast(field_opt_arg_1_7_5);
        for(uint32_t opt_arg_1_7_5_id = 0; opt_arg_1_7_5_id < opt_arg_1_7_5_container->Length(); opt_arg_1_7_5_id++)
        {
            if(opt_arg_1_7_5_container->Get(opt_arg_1_7_5_id)->IsString())
            {
                Nan::Utf8String string_opt_arg_1_7_5_elem(opt_arg_1_7_5_container->Get(opt_arg_1_7_5_id)->ToString(Nan::GetCurrentContext()).ToLocalChecked());
                auto opt_arg_1_7_5_elem = std::string(*string_opt_arg_1_7_5_elem);
                opt_arg_1_7_5.emplace_back(opt_arg_1_7_5_elem);
            }
        }


        auto field_opt_arg_1_7_6 = Nan::Get(field_arg_1_7->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("TimestampDelay").ToLocalChecked()).ToLocalChecked();
        auto opt_arg_1_7_6 = Nan::To<int64_t>(field_opt_arg_1_7_6).FromJust();
        EthereumLikeNetworkParameters opt_arg_1_7(opt_arg_1_7_1, opt_arg_1_7_2, opt_arg_1_7_3, opt_arg_1_7_4, opt_arg_1_7_5, opt_arg_1_7_6);

        arg_1_7.emplace(opt_arg_1_7);
    }


    auto field_arg_1_8 = Nan::Get(info[1]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("rippleLikeNetworkParameters").ToLocalChecked()).ToLocalChecked();
    auto arg_1_8 = std::experimental::optional<RippleLikeNetworkParameters>();
    if(!field_arg_1_8->IsNull() && !field_arg_1_8->IsUndefined())
    {

        auto field_opt_arg_1_8_1 = Nan::Get(field_arg_1_8->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("Identifier").ToLocalChecked()).ToLocalChecked();
        Nan::Utf8String string_opt_arg_1_8_1(field_opt_arg_1_8_1->ToString(Nan::GetCurrentContext()).ToLocalChecked());
        auto opt_arg_1_8_1 = std::string(*string_opt_arg_1_8_1);

        auto field_opt_arg_1_8_2 = Nan::Get(field_arg_1_8->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("MessagePrefix").ToLocalChecked()).ToLocalChecked();
        Nan::Utf8String string_opt_arg_1_8_2(field_opt_arg_1_8_2->ToString(Nan::GetCurrentContext()).ToLocalChecked());
        auto opt_arg_1_8_2 = std::string(*string_opt_arg_1_8_2);

        auto field_opt_arg_1_8_3 = Nan::Get(field_arg_1_8->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("XPUBVersion").ToLocalChecked()).ToLocalChecked();
        vector<uint8_t> opt_arg_1_8_3;
        Local<Array> opt_arg_1_8_3_container = Local<Array>::Cast(field_opt_arg_1_8_3);
        for(uint32_t opt_arg_1_8_3_id = 0; opt_arg_1_8_3_id < opt_arg_1_8_3_container->Length(); opt_arg_1_8_3_id++)
        {
            if(opt_arg_1_8_3_container->Get(opt_arg_1_8_3_id)->IsUint32())
            {
                auto opt_arg_1_8_3_elem = Nan::To<uint32_t>(opt_arg_1_8_3_container->Get(opt_arg_1_8_3_id)).FromJust();
                opt_arg_1_8_3.emplace_back(opt_arg_1_8_3_elem);
            }
        }


        auto field_opt_arg_1_8_4 = Nan::Get(field_arg_1_8->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("AdditionalRIPs").ToLocalChecked()).ToLocalChecked();
        vector<std::string> opt_arg_1_8_4;
        Local<Array> opt_arg_1_8_4_container = Local<Array>::Cast(field_opt_arg_1_8_4);
        for(uint32_t opt_arg_1_8_4_id = 0; opt_arg_1_8_4_id < opt_arg_1_8_4_container->Length(); opt_arg_1_8_4_id++)
        {
            if(opt_arg_1_8_4_container->Get(opt_arg_1_8_4_id)->IsString())
            {
                Nan::Utf8String string_opt_arg_1_8_4_elem(opt_arg_1_8_4_container->Get(opt_arg_1_8_4_id)->ToString(Nan::GetCurrentContext()).ToLocalChecked());
                auto opt_arg_1_8_4_elem = std::string(*string_opt_arg_1_8_4_elem);
                opt_arg_1_8_4.emplace_back(opt_arg_1_8_4_elem);
            }
        }


        auto field_opt_arg_1_8_5 = Nan::Get(field_arg_1_8->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("TimestampDelay").ToLocalChecked()).ToLocalChecked();
        auto opt_arg_1_8_5 = Nan::To<int64_t>(field_opt_arg_1_8_5).FromJust();
        RippleLikeNetworkParameters opt_arg_1_8(opt_arg_1_8_1, opt_arg_1_8_2, opt_arg_1_8_3, opt_arg_1_8_4, opt_arg_1_8_5);

        arg_1_8.emplace(opt_arg_1_8);
    }


    auto field_arg_1_9 = Nan::Get(info[1]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("tezosLikeNetworkParameters").ToLocalChecked()).ToLocalChecked();
    auto arg_1_9 = std::experimental::optional<TezosLikeNetworkParameters>();
    if(!field_arg_1_9->IsNull() && !field_arg_1_9->IsUndefined())
    {

        auto field_opt_arg_1_9_1 = Nan::Get(field_arg_1_9->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("Identifier").ToLocalChecked()).ToLocalChecked();
        Nan::Utf8String string_opt_arg_1_9_1(field_opt_arg_1_9_1->ToString(Nan::GetCurrentContext()).ToLocalChecked());
        auto opt_arg_1_9_1 = std::string(*string_opt_arg_1_9_1);

        auto field_opt_arg_1_9_2 = Nan::Get(field_arg_1_9->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("MessagePrefix").ToLocalChecked()).ToLocalChecked();
        Nan::Utf8String string_opt_arg_1_9_2(field_opt_arg_1_9_2->ToString(Nan::GetCurrentContext()).ToLocalChecked());
        auto opt_arg_1_9_2 = std::string(*string_opt_arg_1_9_2);

        auto field_opt_arg_1_9_3 = Nan::Get(field_arg_1_9->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("XPUBVersion").ToLocalChecked()).ToLocalChecked();
        vector<uint8_t> opt_arg_1_9_3;
        Local<Array> opt_arg_1_9_3_container = Local<Array>::Cast(field_opt_arg_1_9_3);
        for(uint32_t opt_arg_1_9_3_id = 0; opt_arg_1_9_3_id < opt_arg_1_9_3_container->Length(); opt_arg_1_9_3_id++)
        {
            if(opt_arg_1_9_3_container->Get(opt_arg_1_9_3_id)->IsUint32())
            {
                auto opt_arg_1_9_3_elem = Nan::To<uint32_t>(opt_arg_1_9_3_container->Get(opt_arg_1_9_3_id)).FromJust();
                opt_arg_1_9_3.emplace_back(opt_arg_1_9_3_elem);
            }
        }


        auto field_opt_arg_1_9_4 = Nan::Get(field_arg_1_9->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("ImplicitPrefix").ToLocalChecked()).ToLocalChecked();
        vector<uint8_t> opt_arg_1_9_4;
        Local<Array> opt_arg_1_9_4_container = Local<Array>::Cast(field_opt_arg_1_9_4);
        for(uint32_t opt_arg_1_9_4_id = 0; opt_arg_1_9_4_id < opt_arg_1_9_4_container->Length(); opt_arg_1_9_4_id++)
        {
            if(opt_arg_1_9_4_container->Get(opt_arg_1_9_4_id)->IsUint32())
            {
                auto opt_arg_1_9_4_elem = Nan::To<uint32_t>(opt_arg_1_9_4_container->Get(opt_arg_1_9_4_id)).FromJust();
                opt_arg_1_9_4.emplace_back(opt_arg_1_9_4_elem);
            }
        }


        auto field_opt_arg_1_9_5 = Nan::Get(field_arg_1_9->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("OriginatedPrefix").ToLocalChecked()).ToLocalChecked();
        vector<uint8_t> opt_arg_1_9_5;
        Local<Array> opt_arg_1_9_5_container = Local<Array>::Cast(field_opt_arg_1_9_5);
        for(uint32_t opt_arg_1_9_5_id = 0; opt_arg_1_9_5_id < opt_arg_1_9_5_container->Length(); opt_arg_1_9_5_id++)
        {
            if(opt_arg_1_9_5_container->Get(opt_arg_1_9_5_id)->IsUint32())
            {
                auto opt_arg_1_9_5_elem = Nan::To<uint32_t>(opt_arg_1_9_5_container->Get(opt_arg_1_9_5_id)).FromJust();
                opt_arg_1_9_5.emplace_back(opt_arg_1_9_5_elem);
            }
        }


        auto field_opt_arg_1_9_6 = Nan::Get(field_arg_1_9->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("AdditionalTIPs").ToLocalChecked()).ToLocalChecked();
        vector<std::string> opt_arg_1_9_6;
        Local<Array> opt_arg_1_9_6_container = Local<Array>::Cast(field_opt_arg_1_9_6);
        for(uint32_t opt_arg_1_9_6_id = 0; opt_arg_1_9_6_id < opt_arg_1_9_6_container->Length(); opt_arg_1_9_6_id++)
        {
            if(opt_arg_1_9_6_container->Get(opt_arg_1_9_6_id)->IsString())
            {
                Nan::Utf8String string_opt_arg_1_9_6_elem(opt_arg_1_9_6_container->Get(opt_arg_1_9_6_id)->ToString(Nan::GetCurrentContext()).ToLocalChecked());
                auto opt_arg_1_9_6_elem = std::string(*string_opt_arg_1_9_6_elem);
                opt_arg_1_9_6.emplace_back(opt_arg_1_9_6_elem);
            }
        }


        auto field_opt_arg_1_9_7 = Nan::Get(field_arg_1_9->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("TimestampDelay").ToLocalChecked()).ToLocalChecked();
        auto opt_arg_1_9_7 = Nan::To<int64_t>(field_opt_arg_1_9_7).FromJust();
        TezosLikeNetworkParameters opt_arg_1_9(opt_arg_1_9_1, opt_arg_1_9_2, opt_arg_1_9_3, opt_arg_1_9_4, opt_arg_1_9_5, opt_arg_1_9_6, opt_arg_1_9_7);

        arg_1_9.emplace(opt_arg_1_9);
    }

    Currency arg_1(arg_1_1, arg_1_2, arg_1_3, arg_1_4, arg_1_5, arg_1_6, arg_1_7, arg_1_8, arg_1_9);


    auto result = ledger::core::api::Address::parse(arg_0,arg_1);

    //Wrap result in node object
    auto arg_2 = NJSAddress::wrap(result);



    //Return result
    info.GetReturnValue().Set(arg_2);
}
NAN_METHOD(NJSAddress::isValid) {

    //Check if method called with right number of arguments
    if(info.Length() != 2)
    {
        return Nan::ThrowError("NJSAddress::isValid needs 2 arguments");
    }

    //Check if parameters have correct types
    Nan::Utf8String string_arg_0(info[0]->ToString(Nan::GetCurrentContext()).ToLocalChecked());
    auto arg_0 = std::string(*string_arg_0);

    auto field_arg_1_1 = Nan::Get(info[1]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("walletType").ToLocalChecked()).ToLocalChecked();
    auto arg_1_1 = (ledger::core::api::WalletType)Nan::To<int>(field_arg_1_1).FromJust();

    auto field_arg_1_2 = Nan::Get(info[1]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("name").ToLocalChecked()).ToLocalChecked();
    Nan::Utf8String string_arg_1_2(field_arg_1_2->ToString(Nan::GetCurrentContext()).ToLocalChecked());
    auto arg_1_2 = std::string(*string_arg_1_2);

    auto field_arg_1_3 = Nan::Get(info[1]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("bip44CoinType").ToLocalChecked()).ToLocalChecked();
    auto arg_1_3 = Nan::To<int32_t>(field_arg_1_3).FromJust();

    auto field_arg_1_4 = Nan::Get(info[1]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("paymentUriScheme").ToLocalChecked()).ToLocalChecked();
    Nan::Utf8String string_arg_1_4(field_arg_1_4->ToString(Nan::GetCurrentContext()).ToLocalChecked());
    auto arg_1_4 = std::string(*string_arg_1_4);

    auto field_arg_1_5 = Nan::Get(info[1]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("units").ToLocalChecked()).ToLocalChecked();
    vector<CurrencyUnit> arg_1_5;
    Local<Array> arg_1_5_container = Local<Array>::Cast(field_arg_1_5);
    for(uint32_t arg_1_5_id = 0; arg_1_5_id < arg_1_5_container->Length(); arg_1_5_id++)
    {
        if(arg_1_5_container->Get(arg_1_5_id)->IsObject())
        {

            auto field_arg_1_5_elem_1 = Nan::Get(arg_1_5_container->Get(arg_1_5_id)->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("name").ToLocalChecked()).ToLocalChecked();
            Nan::Utf8String string_arg_1_5_elem_1(field_arg_1_5_elem_1->ToString(Nan::GetCurrentContext()).ToLocalChecked());
            auto arg_1_5_elem_1 = std::string(*string_arg_1_5_elem_1);

            auto field_arg_1_5_elem_2 = Nan::Get(arg_1_5_container->Get(arg_1_5_id)->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("symbol").ToLocalChecked()).ToLocalChecked();
            Nan::Utf8String string_arg_1_5_elem_2(field_arg_1_5_elem_2->ToString(Nan::GetCurrentContext()).ToLocalChecked());
            auto arg_1_5_elem_2 = std::string(*string_arg_1_5_elem_2);

            auto field_arg_1_5_elem_3 = Nan::Get(arg_1_5_container->Get(arg_1_5_id)->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("code").ToLocalChecked()).ToLocalChecked();
            Nan::Utf8String string_arg_1_5_elem_3(field_arg_1_5_elem_3->ToString(Nan::GetCurrentContext()).ToLocalChecked());
            auto arg_1_5_elem_3 = std::string(*string_arg_1_5_elem_3);

            auto field_arg_1_5_elem_4 = Nan::Get(arg_1_5_container->Get(arg_1_5_id)->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("numberOfDecimal").ToLocalChecked()).ToLocalChecked();
            auto arg_1_5_elem_4 = Nan::To<int32_t>(field_arg_1_5_elem_4).FromJust();
            CurrencyUnit arg_1_5_elem(arg_1_5_elem_1, arg_1_5_elem_2, arg_1_5_elem_3, arg_1_5_elem_4);

            arg_1_5.emplace_back(arg_1_5_elem);
        }
    }


    auto field_arg_1_6 = Nan::Get(info[1]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("bitcoinLikeNetworkParameters").ToLocalChecked()).ToLocalChecked();
    auto arg_1_6 = std::experimental::optional<BitcoinLikeNetworkParameters>();
    if(!field_arg_1_6->IsNull() && !field_arg_1_6->IsUndefined())
    {

        auto field_opt_arg_1_6_1 = Nan::Get(field_arg_1_6->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("Identifier").ToLocalChecked()).ToLocalChecked();
        Nan::Utf8String string_opt_arg_1_6_1(field_opt_arg_1_6_1->ToString(Nan::GetCurrentContext()).ToLocalChecked());
        auto opt_arg_1_6_1 = std::string(*string_opt_arg_1_6_1);

        auto field_opt_arg_1_6_2 = Nan::Get(field_arg_1_6->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("P2PKHVersion").ToLocalChecked()).ToLocalChecked();
        vector<uint8_t> opt_arg_1_6_2;
        Local<Array> opt_arg_1_6_2_container = Local<Array>::Cast(field_opt_arg_1_6_2);
        for(uint32_t opt_arg_1_6_2_id = 0; opt_arg_1_6_2_id < opt_arg_1_6_2_container->Length(); opt_arg_1_6_2_id++)
        {
            if(opt_arg_1_6_2_container->Get(opt_arg_1_6_2_id)->IsUint32())
            {
                auto opt_arg_1_6_2_elem = Nan::To<uint32_t>(opt_arg_1_6_2_container->Get(opt_arg_1_6_2_id)).FromJust();
                opt_arg_1_6_2.emplace_back(opt_arg_1_6_2_elem);
            }
        }


        auto field_opt_arg_1_6_3 = Nan::Get(field_arg_1_6->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("P2SHVersion").ToLocalChecked()).ToLocalChecked();
        vector<uint8_t> opt_arg_1_6_3;
        Local<Array> opt_arg_1_6_3_container = Local<Array>::Cast(field_opt_arg_1_6_3);
        for(uint32_t opt_arg_1_6_3_id = 0; opt_arg_1_6_3_id < opt_arg_1_6_3_container->Length(); opt_arg_1_6_3_id++)
        {
            if(opt_arg_1_6_3_container->Get(opt_arg_1_6_3_id)->IsUint32())
            {
                auto opt_arg_1_6_3_elem = Nan::To<uint32_t>(opt_arg_1_6_3_container->Get(opt_arg_1_6_3_id)).FromJust();
                opt_arg_1_6_3.emplace_back(opt_arg_1_6_3_elem);
            }
        }


        auto field_opt_arg_1_6_4 = Nan::Get(field_arg_1_6->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("XPUBVersion").ToLocalChecked()).ToLocalChecked();
        vector<uint8_t> opt_arg_1_6_4;
        Local<Array> opt_arg_1_6_4_container = Local<Array>::Cast(field_opt_arg_1_6_4);
        for(uint32_t opt_arg_1_6_4_id = 0; opt_arg_1_6_4_id < opt_arg_1_6_4_container->Length(); opt_arg_1_6_4_id++)
        {
            if(opt_arg_1_6_4_container->Get(opt_arg_1_6_4_id)->IsUint32())
            {
                auto opt_arg_1_6_4_elem = Nan::To<uint32_t>(opt_arg_1_6_4_container->Get(opt_arg_1_6_4_id)).FromJust();
                opt_arg_1_6_4.emplace_back(opt_arg_1_6_4_elem);
            }
        }


        auto field_opt_arg_1_6_5 = Nan::Get(field_arg_1_6->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("FeePolicy").ToLocalChecked()).ToLocalChecked();
        auto opt_arg_1_6_5 = (ledger::core::api::BitcoinLikeFeePolicy)Nan::To<int>(field_opt_arg_1_6_5).FromJust();

        auto field_opt_arg_1_6_6 = Nan::Get(field_arg_1_6->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("DustAmount").ToLocalChecked()).ToLocalChecked();
        auto opt_arg_1_6_6 = Nan::To<int64_t>(field_opt_arg_1_6_6).FromJust();

        auto field_opt_arg_1_6_7 = Nan::Get(field_arg_1_6->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("MessagePrefix").ToLocalChecked()).ToLocalChecked();
        Nan::Utf8String string_opt_arg_1_6_7(field_opt_arg_1_6_7->ToString(Nan::GetCurrentContext()).ToLocalChecked());
        auto opt_arg_1_6_7 = std::string(*string_opt_arg_1_6_7);

        auto field_opt_arg_1_6_8 = Nan::Get(field_arg_1_6->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("UsesTimestampedTransaction").ToLocalChecked()).ToLocalChecked();
        auto opt_arg_1_6_8 = Nan::To<bool>(field_opt_arg_1_6_8).FromJust();

        auto field_opt_arg_1_6_9 = Nan::Get(field_arg_1_6->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("TimestampDelay").ToLocalChecked()).ToLocalChecked();
        auto opt_arg_1_6_9 = Nan::To<int64_t>(field_opt_arg_1_6_9).FromJust();

        auto field_opt_arg_1_6_10 = Nan::Get(field_arg_1_6->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("SigHash").ToLocalChecked()).ToLocalChecked();
        vector<uint8_t> opt_arg_1_6_10;
        Local<Array> opt_arg_1_6_10_container = Local<Array>::Cast(field_opt_arg_1_6_10);
        for(uint32_t opt_arg_1_6_10_id = 0; opt_arg_1_6_10_id < opt_arg_1_6_10_container->Length(); opt_arg_1_6_10_id++)
        {
            if(opt_arg_1_6_10_container->Get(opt_arg_1_6_10_id)->IsUint32())
            {
                auto opt_arg_1_6_10_elem = Nan::To<uint32_t>(opt_arg_1_6_10_container->Get(opt_arg_1_6_10_id)).FromJust();
                opt_arg_1_6_10.emplace_back(opt_arg_1_6_10_elem);
            }
        }


        auto field_opt_arg_1_6_11 = Nan::Get(field_arg_1_6->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("AdditionalBIPs").ToLocalChecked()).ToLocalChecked();
        vector<std::string> opt_arg_1_6_11;
        Local<Array> opt_arg_1_6_11_container = Local<Array>::Cast(field_opt_arg_1_6_11);
        for(uint32_t opt_arg_1_6_11_id = 0; opt_arg_1_6_11_id < opt_arg_1_6_11_container->Length(); opt_arg_1_6_11_id++)
        {
            if(opt_arg_1_6_11_container->Get(opt_arg_1_6_11_id)->IsString())
            {
                Nan::Utf8String string_opt_arg_1_6_11_elem(opt_arg_1_6_11_container->Get(opt_arg_1_6_11_id)->ToString(Nan::GetCurrentContext()).ToLocalChecked());
                auto opt_arg_1_6_11_elem = std::string(*string_opt_arg_1_6_11_elem);
                opt_arg_1_6_11.emplace_back(opt_arg_1_6_11_elem);
            }
        }

        BitcoinLikeNetworkParameters opt_arg_1_6(opt_arg_1_6_1, opt_arg_1_6_2, opt_arg_1_6_3, opt_arg_1_6_4, opt_arg_1_6_5, opt_arg_1_6_6, opt_arg_1_6_7, opt_arg_1_6_8, opt_arg_1_6_9, opt_arg_1_6_10, opt_arg_1_6_11);

        arg_1_6.emplace(opt_arg_1_6);
    }


    auto field_arg_1_7 = Nan::Get(info[1]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("ethereumLikeNetworkParameters").ToLocalChecked()).ToLocalChecked();
    auto arg_1_7 = std::experimental::optional<EthereumLikeNetworkParameters>();
    if(!field_arg_1_7->IsNull() && !field_arg_1_7->IsUndefined())
    {

        auto field_opt_arg_1_7_1 = Nan::Get(field_arg_1_7->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("Identifier").ToLocalChecked()).ToLocalChecked();
        Nan::Utf8String string_opt_arg_1_7_1(field_opt_arg_1_7_1->ToString(Nan::GetCurrentContext()).ToLocalChecked());
        auto opt_arg_1_7_1 = std::string(*string_opt_arg_1_7_1);

        auto field_opt_arg_1_7_2 = Nan::Get(field_arg_1_7->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("MessagePrefix").ToLocalChecked()).ToLocalChecked();
        Nan::Utf8String string_opt_arg_1_7_2(field_opt_arg_1_7_2->ToString(Nan::GetCurrentContext()).ToLocalChecked());
        auto opt_arg_1_7_2 = std::string(*string_opt_arg_1_7_2);

        auto field_opt_arg_1_7_3 = Nan::Get(field_arg_1_7->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("ChainID").ToLocalChecked()).ToLocalChecked();
        Nan::Utf8String string_opt_arg_1_7_3(field_opt_arg_1_7_3->ToString(Nan::GetCurrentContext()).ToLocalChecked());
        auto opt_arg_1_7_3 = std::string(*string_opt_arg_1_7_3);

        auto field_opt_arg_1_7_4 = Nan::Get(field_arg_1_7->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("XPUBVersion").ToLocalChecked()).ToLocalChecked();
        vector<uint8_t> opt_arg_1_7_4;
        Local<Array> opt_arg_1_7_4_container = Local<Array>::Cast(field_opt_arg_1_7_4);
        for(uint32_t opt_arg_1_7_4_id = 0; opt_arg_1_7_4_id < opt_arg_1_7_4_container->Length(); opt_arg_1_7_4_id++)
        {
            if(opt_arg_1_7_4_container->Get(opt_arg_1_7_4_id)->IsUint32())
            {
                auto opt_arg_1_7_4_elem = Nan::To<uint32_t>(opt_arg_1_7_4_container->Get(opt_arg_1_7_4_id)).FromJust();
                opt_arg_1_7_4.emplace_back(opt_arg_1_7_4_elem);
            }
        }


        auto field_opt_arg_1_7_5 = Nan::Get(field_arg_1_7->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("AdditionalEIPs").ToLocalChecked()).ToLocalChecked();
        vector<std::string> opt_arg_1_7_5;
        Local<Array> opt_arg_1_7_5_container = Local<Array>::Cast(field_opt_arg_1_7_5);
        for(uint32_t opt_arg_1_7_5_id = 0; opt_arg_1_7_5_id < opt_arg_1_7_5_container->Length(); opt_arg_1_7_5_id++)
        {
            if(opt_arg_1_7_5_container->Get(opt_arg_1_7_5_id)->IsString())
            {
                Nan::Utf8String string_opt_arg_1_7_5_elem(opt_arg_1_7_5_container->Get(opt_arg_1_7_5_id)->ToString(Nan::GetCurrentContext()).ToLocalChecked());
                auto opt_arg_1_7_5_elem = std::string(*string_opt_arg_1_7_5_elem);
                opt_arg_1_7_5.emplace_back(opt_arg_1_7_5_elem);
            }
        }


        auto field_opt_arg_1_7_6 = Nan::Get(field_arg_1_7->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("TimestampDelay").ToLocalChecked()).ToLocalChecked();
        auto opt_arg_1_7_6 = Nan::To<int64_t>(field_opt_arg_1_7_6).FromJust();
        EthereumLikeNetworkParameters opt_arg_1_7(opt_arg_1_7_1, opt_arg_1_7_2, opt_arg_1_7_3, opt_arg_1_7_4, opt_arg_1_7_5, opt_arg_1_7_6);

        arg_1_7.emplace(opt_arg_1_7);
    }


    auto field_arg_1_8 = Nan::Get(info[1]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("rippleLikeNetworkParameters").ToLocalChecked()).ToLocalChecked();
    auto arg_1_8 = std::experimental::optional<RippleLikeNetworkParameters>();
    if(!field_arg_1_8->IsNull() && !field_arg_1_8->IsUndefined())
    {

        auto field_opt_arg_1_8_1 = Nan::Get(field_arg_1_8->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("Identifier").ToLocalChecked()).ToLocalChecked();
        Nan::Utf8String string_opt_arg_1_8_1(field_opt_arg_1_8_1->ToString(Nan::GetCurrentContext()).ToLocalChecked());
        auto opt_arg_1_8_1 = std::string(*string_opt_arg_1_8_1);

        auto field_opt_arg_1_8_2 = Nan::Get(field_arg_1_8->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("MessagePrefix").ToLocalChecked()).ToLocalChecked();
        Nan::Utf8String string_opt_arg_1_8_2(field_opt_arg_1_8_2->ToString(Nan::GetCurrentContext()).ToLocalChecked());
        auto opt_arg_1_8_2 = std::string(*string_opt_arg_1_8_2);

        auto field_opt_arg_1_8_3 = Nan::Get(field_arg_1_8->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("XPUBVersion").ToLocalChecked()).ToLocalChecked();
        vector<uint8_t> opt_arg_1_8_3;
        Local<Array> opt_arg_1_8_3_container = Local<Array>::Cast(field_opt_arg_1_8_3);
        for(uint32_t opt_arg_1_8_3_id = 0; opt_arg_1_8_3_id < opt_arg_1_8_3_container->Length(); opt_arg_1_8_3_id++)
        {
            if(opt_arg_1_8_3_container->Get(opt_arg_1_8_3_id)->IsUint32())
            {
                auto opt_arg_1_8_3_elem = Nan::To<uint32_t>(opt_arg_1_8_3_container->Get(opt_arg_1_8_3_id)).FromJust();
                opt_arg_1_8_3.emplace_back(opt_arg_1_8_3_elem);
            }
        }


        auto field_opt_arg_1_8_4 = Nan::Get(field_arg_1_8->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("AdditionalRIPs").ToLocalChecked()).ToLocalChecked();
        vector<std::string> opt_arg_1_8_4;
        Local<Array> opt_arg_1_8_4_container = Local<Array>::Cast(field_opt_arg_1_8_4);
        for(uint32_t opt_arg_1_8_4_id = 0; opt_arg_1_8_4_id < opt_arg_1_8_4_container->Length(); opt_arg_1_8_4_id++)
        {
            if(opt_arg_1_8_4_container->Get(opt_arg_1_8_4_id)->IsString())
            {
                Nan::Utf8String string_opt_arg_1_8_4_elem(opt_arg_1_8_4_container->Get(opt_arg_1_8_4_id)->ToString(Nan::GetCurrentContext()).ToLocalChecked());
                auto opt_arg_1_8_4_elem = std::string(*string_opt_arg_1_8_4_elem);
                opt_arg_1_8_4.emplace_back(opt_arg_1_8_4_elem);
            }
        }


        auto field_opt_arg_1_8_5 = Nan::Get(field_arg_1_8->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("TimestampDelay").ToLocalChecked()).ToLocalChecked();
        auto opt_arg_1_8_5 = Nan::To<int64_t>(field_opt_arg_1_8_5).FromJust();
        RippleLikeNetworkParameters opt_arg_1_8(opt_arg_1_8_1, opt_arg_1_8_2, opt_arg_1_8_3, opt_arg_1_8_4, opt_arg_1_8_5);

        arg_1_8.emplace(opt_arg_1_8);
    }


    auto field_arg_1_9 = Nan::Get(info[1]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("tezosLikeNetworkParameters").ToLocalChecked()).ToLocalChecked();
    auto arg_1_9 = std::experimental::optional<TezosLikeNetworkParameters>();
    if(!field_arg_1_9->IsNull() && !field_arg_1_9->IsUndefined())
    {

        auto field_opt_arg_1_9_1 = Nan::Get(field_arg_1_9->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("Identifier").ToLocalChecked()).ToLocalChecked();
        Nan::Utf8String string_opt_arg_1_9_1(field_opt_arg_1_9_1->ToString(Nan::GetCurrentContext()).ToLocalChecked());
        auto opt_arg_1_9_1 = std::string(*string_opt_arg_1_9_1);

        auto field_opt_arg_1_9_2 = Nan::Get(field_arg_1_9->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("MessagePrefix").ToLocalChecked()).ToLocalChecked();
        Nan::Utf8String string_opt_arg_1_9_2(field_opt_arg_1_9_2->ToString(Nan::GetCurrentContext()).ToLocalChecked());
        auto opt_arg_1_9_2 = std::string(*string_opt_arg_1_9_2);

        auto field_opt_arg_1_9_3 = Nan::Get(field_arg_1_9->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("XPUBVersion").ToLocalChecked()).ToLocalChecked();
        vector<uint8_t> opt_arg_1_9_3;
        Local<Array> opt_arg_1_9_3_container = Local<Array>::Cast(field_opt_arg_1_9_3);
        for(uint32_t opt_arg_1_9_3_id = 0; opt_arg_1_9_3_id < opt_arg_1_9_3_container->Length(); opt_arg_1_9_3_id++)
        {
            if(opt_arg_1_9_3_container->Get(opt_arg_1_9_3_id)->IsUint32())
            {
                auto opt_arg_1_9_3_elem = Nan::To<uint32_t>(opt_arg_1_9_3_container->Get(opt_arg_1_9_3_id)).FromJust();
                opt_arg_1_9_3.emplace_back(opt_arg_1_9_3_elem);
            }
        }


        auto field_opt_arg_1_9_4 = Nan::Get(field_arg_1_9->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("ImplicitPrefix").ToLocalChecked()).ToLocalChecked();
        vector<uint8_t> opt_arg_1_9_4;
        Local<Array> opt_arg_1_9_4_container = Local<Array>::Cast(field_opt_arg_1_9_4);
        for(uint32_t opt_arg_1_9_4_id = 0; opt_arg_1_9_4_id < opt_arg_1_9_4_container->Length(); opt_arg_1_9_4_id++)
        {
            if(opt_arg_1_9_4_container->Get(opt_arg_1_9_4_id)->IsUint32())
            {
                auto opt_arg_1_9_4_elem = Nan::To<uint32_t>(opt_arg_1_9_4_container->Get(opt_arg_1_9_4_id)).FromJust();
                opt_arg_1_9_4.emplace_back(opt_arg_1_9_4_elem);
            }
        }


        auto field_opt_arg_1_9_5 = Nan::Get(field_arg_1_9->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("OriginatedPrefix").ToLocalChecked()).ToLocalChecked();
        vector<uint8_t> opt_arg_1_9_5;
        Local<Array> opt_arg_1_9_5_container = Local<Array>::Cast(field_opt_arg_1_9_5);
        for(uint32_t opt_arg_1_9_5_id = 0; opt_arg_1_9_5_id < opt_arg_1_9_5_container->Length(); opt_arg_1_9_5_id++)
        {
            if(opt_arg_1_9_5_container->Get(opt_arg_1_9_5_id)->IsUint32())
            {
                auto opt_arg_1_9_5_elem = Nan::To<uint32_t>(opt_arg_1_9_5_container->Get(opt_arg_1_9_5_id)).FromJust();
                opt_arg_1_9_5.emplace_back(opt_arg_1_9_5_elem);
            }
        }


        auto field_opt_arg_1_9_6 = Nan::Get(field_arg_1_9->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("AdditionalTIPs").ToLocalChecked()).ToLocalChecked();
        vector<std::string> opt_arg_1_9_6;
        Local<Array> opt_arg_1_9_6_container = Local<Array>::Cast(field_opt_arg_1_9_6);
        for(uint32_t opt_arg_1_9_6_id = 0; opt_arg_1_9_6_id < opt_arg_1_9_6_container->Length(); opt_arg_1_9_6_id++)
        {
            if(opt_arg_1_9_6_container->Get(opt_arg_1_9_6_id)->IsString())
            {
                Nan::Utf8String string_opt_arg_1_9_6_elem(opt_arg_1_9_6_container->Get(opt_arg_1_9_6_id)->ToString(Nan::GetCurrentContext()).ToLocalChecked());
                auto opt_arg_1_9_6_elem = std::string(*string_opt_arg_1_9_6_elem);
                opt_arg_1_9_6.emplace_back(opt_arg_1_9_6_elem);
            }
        }


        auto field_opt_arg_1_9_7 = Nan::Get(field_arg_1_9->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("TimestampDelay").ToLocalChecked()).ToLocalChecked();
        auto opt_arg_1_9_7 = Nan::To<int64_t>(field_opt_arg_1_9_7).FromJust();
        TezosLikeNetworkParameters opt_arg_1_9(opt_arg_1_9_1, opt_arg_1_9_2, opt_arg_1_9_3, opt_arg_1_9_4, opt_arg_1_9_5, opt_arg_1_9_6, opt_arg_1_9_7);

        arg_1_9.emplace(opt_arg_1_9);
    }

    Currency arg_1(arg_1_1, arg_1_2, arg_1_3, arg_1_4, arg_1_5, arg_1_6, arg_1_7, arg_1_8, arg_1_9);


    auto result = ledger::core::api::Address::isValid(arg_0,arg_1);

    //Wrap result in node object
    auto arg_2 = Nan::New<Boolean>(result);

    //Return result
    info.GetReturnValue().Set(arg_2);
}

NAN_METHOD(NJSAddress::New) {
    //Only new allowed
    if(!info.IsConstructCall())
    {
        return Nan::ThrowError("NJSAddress function can only be called as constructor (use New)");
    }

    //Check if NJSAddress::New called with right number of arguments
    if(info.Length() != 2)
    {
        return Nan::ThrowError("NJSAddress::New needs same number of arguments as ledger::core::api::Address::parse method");
    }

    //Unwrap objects to get C++ classes
    Nan::Utf8String string_arg_0(info[0]->ToString(Nan::GetCurrentContext()).ToLocalChecked());
    auto arg_0 = std::string(*string_arg_0);

    auto field_arg_1_1 = Nan::Get(info[1]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("walletType").ToLocalChecked()).ToLocalChecked();
    auto arg_1_1 = (ledger::core::api::WalletType)Nan::To<int>(field_arg_1_1).FromJust();

    auto field_arg_1_2 = Nan::Get(info[1]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("name").ToLocalChecked()).ToLocalChecked();
    Nan::Utf8String string_arg_1_2(field_arg_1_2->ToString(Nan::GetCurrentContext()).ToLocalChecked());
    auto arg_1_2 = std::string(*string_arg_1_2);

    auto field_arg_1_3 = Nan::Get(info[1]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("bip44CoinType").ToLocalChecked()).ToLocalChecked();
    auto arg_1_3 = Nan::To<int32_t>(field_arg_1_3).FromJust();

    auto field_arg_1_4 = Nan::Get(info[1]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("paymentUriScheme").ToLocalChecked()).ToLocalChecked();
    Nan::Utf8String string_arg_1_4(field_arg_1_4->ToString(Nan::GetCurrentContext()).ToLocalChecked());
    auto arg_1_4 = std::string(*string_arg_1_4);

    auto field_arg_1_5 = Nan::Get(info[1]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("units").ToLocalChecked()).ToLocalChecked();
    vector<CurrencyUnit> arg_1_5;
    Local<Array> arg_1_5_container = Local<Array>::Cast(field_arg_1_5);
    for(uint32_t arg_1_5_id = 0; arg_1_5_id < arg_1_5_container->Length(); arg_1_5_id++)
    {
        if(arg_1_5_container->Get(arg_1_5_id)->IsObject())
        {

            auto field_arg_1_5_elem_1 = Nan::Get(arg_1_5_container->Get(arg_1_5_id)->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("name").ToLocalChecked()).ToLocalChecked();
            Nan::Utf8String string_arg_1_5_elem_1(field_arg_1_5_elem_1->ToString(Nan::GetCurrentContext()).ToLocalChecked());
            auto arg_1_5_elem_1 = std::string(*string_arg_1_5_elem_1);

            auto field_arg_1_5_elem_2 = Nan::Get(arg_1_5_container->Get(arg_1_5_id)->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("symbol").ToLocalChecked()).ToLocalChecked();
            Nan::Utf8String string_arg_1_5_elem_2(field_arg_1_5_elem_2->ToString(Nan::GetCurrentContext()).ToLocalChecked());
            auto arg_1_5_elem_2 = std::string(*string_arg_1_5_elem_2);

            auto field_arg_1_5_elem_3 = Nan::Get(arg_1_5_container->Get(arg_1_5_id)->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("code").ToLocalChecked()).ToLocalChecked();
            Nan::Utf8String string_arg_1_5_elem_3(field_arg_1_5_elem_3->ToString(Nan::GetCurrentContext()).ToLocalChecked());
            auto arg_1_5_elem_3 = std::string(*string_arg_1_5_elem_3);

            auto field_arg_1_5_elem_4 = Nan::Get(arg_1_5_container->Get(arg_1_5_id)->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("numberOfDecimal").ToLocalChecked()).ToLocalChecked();
            auto arg_1_5_elem_4 = Nan::To<int32_t>(field_arg_1_5_elem_4).FromJust();
            CurrencyUnit arg_1_5_elem(arg_1_5_elem_1, arg_1_5_elem_2, arg_1_5_elem_3, arg_1_5_elem_4);

            arg_1_5.emplace_back(arg_1_5_elem);
        }
    }


    auto field_arg_1_6 = Nan::Get(info[1]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("bitcoinLikeNetworkParameters").ToLocalChecked()).ToLocalChecked();
    auto arg_1_6 = std::experimental::optional<BitcoinLikeNetworkParameters>();
    if(!field_arg_1_6->IsNull() && !field_arg_1_6->IsUndefined())
    {

        auto field_opt_arg_1_6_1 = Nan::Get(field_arg_1_6->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("Identifier").ToLocalChecked()).ToLocalChecked();
        Nan::Utf8String string_opt_arg_1_6_1(field_opt_arg_1_6_1->ToString(Nan::GetCurrentContext()).ToLocalChecked());
        auto opt_arg_1_6_1 = std::string(*string_opt_arg_1_6_1);

        auto field_opt_arg_1_6_2 = Nan::Get(field_arg_1_6->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("P2PKHVersion").ToLocalChecked()).ToLocalChecked();
        vector<uint8_t> opt_arg_1_6_2;
        Local<Array> opt_arg_1_6_2_container = Local<Array>::Cast(field_opt_arg_1_6_2);
        for(uint32_t opt_arg_1_6_2_id = 0; opt_arg_1_6_2_id < opt_arg_1_6_2_container->Length(); opt_arg_1_6_2_id++)
        {
            if(opt_arg_1_6_2_container->Get(opt_arg_1_6_2_id)->IsUint32())
            {
                auto opt_arg_1_6_2_elem = Nan::To<uint32_t>(opt_arg_1_6_2_container->Get(opt_arg_1_6_2_id)).FromJust();
                opt_arg_1_6_2.emplace_back(opt_arg_1_6_2_elem);
            }
        }


        auto field_opt_arg_1_6_3 = Nan::Get(field_arg_1_6->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("P2SHVersion").ToLocalChecked()).ToLocalChecked();
        vector<uint8_t> opt_arg_1_6_3;
        Local<Array> opt_arg_1_6_3_container = Local<Array>::Cast(field_opt_arg_1_6_3);
        for(uint32_t opt_arg_1_6_3_id = 0; opt_arg_1_6_3_id < opt_arg_1_6_3_container->Length(); opt_arg_1_6_3_id++)
        {
            if(opt_arg_1_6_3_container->Get(opt_arg_1_6_3_id)->IsUint32())
            {
                auto opt_arg_1_6_3_elem = Nan::To<uint32_t>(opt_arg_1_6_3_container->Get(opt_arg_1_6_3_id)).FromJust();
                opt_arg_1_6_3.emplace_back(opt_arg_1_6_3_elem);
            }
        }


        auto field_opt_arg_1_6_4 = Nan::Get(field_arg_1_6->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("XPUBVersion").ToLocalChecked()).ToLocalChecked();
        vector<uint8_t> opt_arg_1_6_4;
        Local<Array> opt_arg_1_6_4_container = Local<Array>::Cast(field_opt_arg_1_6_4);
        for(uint32_t opt_arg_1_6_4_id = 0; opt_arg_1_6_4_id < opt_arg_1_6_4_container->Length(); opt_arg_1_6_4_id++)
        {
            if(opt_arg_1_6_4_container->Get(opt_arg_1_6_4_id)->IsUint32())
            {
                auto opt_arg_1_6_4_elem = Nan::To<uint32_t>(opt_arg_1_6_4_container->Get(opt_arg_1_6_4_id)).FromJust();
                opt_arg_1_6_4.emplace_back(opt_arg_1_6_4_elem);
            }
        }


        auto field_opt_arg_1_6_5 = Nan::Get(field_arg_1_6->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("FeePolicy").ToLocalChecked()).ToLocalChecked();
        auto opt_arg_1_6_5 = (ledger::core::api::BitcoinLikeFeePolicy)Nan::To<int>(field_opt_arg_1_6_5).FromJust();

        auto field_opt_arg_1_6_6 = Nan::Get(field_arg_1_6->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("DustAmount").ToLocalChecked()).ToLocalChecked();
        auto opt_arg_1_6_6 = Nan::To<int64_t>(field_opt_arg_1_6_6).FromJust();

        auto field_opt_arg_1_6_7 = Nan::Get(field_arg_1_6->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("MessagePrefix").ToLocalChecked()).ToLocalChecked();
        Nan::Utf8String string_opt_arg_1_6_7(field_opt_arg_1_6_7->ToString(Nan::GetCurrentContext()).ToLocalChecked());
        auto opt_arg_1_6_7 = std::string(*string_opt_arg_1_6_7);

        auto field_opt_arg_1_6_8 = Nan::Get(field_arg_1_6->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("UsesTimestampedTransaction").ToLocalChecked()).ToLocalChecked();
        auto opt_arg_1_6_8 = Nan::To<bool>(field_opt_arg_1_6_8).FromJust();

        auto field_opt_arg_1_6_9 = Nan::Get(field_arg_1_6->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("TimestampDelay").ToLocalChecked()).ToLocalChecked();
        auto opt_arg_1_6_9 = Nan::To<int64_t>(field_opt_arg_1_6_9).FromJust();

        auto field_opt_arg_1_6_10 = Nan::Get(field_arg_1_6->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("SigHash").ToLocalChecked()).ToLocalChecked();
        vector<uint8_t> opt_arg_1_6_10;
        Local<Array> opt_arg_1_6_10_container = Local<Array>::Cast(field_opt_arg_1_6_10);
        for(uint32_t opt_arg_1_6_10_id = 0; opt_arg_1_6_10_id < opt_arg_1_6_10_container->Length(); opt_arg_1_6_10_id++)
        {
            if(opt_arg_1_6_10_container->Get(opt_arg_1_6_10_id)->IsUint32())
            {
                auto opt_arg_1_6_10_elem = Nan::To<uint32_t>(opt_arg_1_6_10_container->Get(opt_arg_1_6_10_id)).FromJust();
                opt_arg_1_6_10.emplace_back(opt_arg_1_6_10_elem);
            }
        }


        auto field_opt_arg_1_6_11 = Nan::Get(field_arg_1_6->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("AdditionalBIPs").ToLocalChecked()).ToLocalChecked();
        vector<std::string> opt_arg_1_6_11;
        Local<Array> opt_arg_1_6_11_container = Local<Array>::Cast(field_opt_arg_1_6_11);
        for(uint32_t opt_arg_1_6_11_id = 0; opt_arg_1_6_11_id < opt_arg_1_6_11_container->Length(); opt_arg_1_6_11_id++)
        {
            if(opt_arg_1_6_11_container->Get(opt_arg_1_6_11_id)->IsString())
            {
                Nan::Utf8String string_opt_arg_1_6_11_elem(opt_arg_1_6_11_container->Get(opt_arg_1_6_11_id)->ToString(Nan::GetCurrentContext()).ToLocalChecked());
                auto opt_arg_1_6_11_elem = std::string(*string_opt_arg_1_6_11_elem);
                opt_arg_1_6_11.emplace_back(opt_arg_1_6_11_elem);
            }
        }

        BitcoinLikeNetworkParameters opt_arg_1_6(opt_arg_1_6_1, opt_arg_1_6_2, opt_arg_1_6_3, opt_arg_1_6_4, opt_arg_1_6_5, opt_arg_1_6_6, opt_arg_1_6_7, opt_arg_1_6_8, opt_arg_1_6_9, opt_arg_1_6_10, opt_arg_1_6_11);

        arg_1_6.emplace(opt_arg_1_6);
    }


    auto field_arg_1_7 = Nan::Get(info[1]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("ethereumLikeNetworkParameters").ToLocalChecked()).ToLocalChecked();
    auto arg_1_7 = std::experimental::optional<EthereumLikeNetworkParameters>();
    if(!field_arg_1_7->IsNull() && !field_arg_1_7->IsUndefined())
    {

        auto field_opt_arg_1_7_1 = Nan::Get(field_arg_1_7->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("Identifier").ToLocalChecked()).ToLocalChecked();
        Nan::Utf8String string_opt_arg_1_7_1(field_opt_arg_1_7_1->ToString(Nan::GetCurrentContext()).ToLocalChecked());
        auto opt_arg_1_7_1 = std::string(*string_opt_arg_1_7_1);

        auto field_opt_arg_1_7_2 = Nan::Get(field_arg_1_7->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("MessagePrefix").ToLocalChecked()).ToLocalChecked();
        Nan::Utf8String string_opt_arg_1_7_2(field_opt_arg_1_7_2->ToString(Nan::GetCurrentContext()).ToLocalChecked());
        auto opt_arg_1_7_2 = std::string(*string_opt_arg_1_7_2);

        auto field_opt_arg_1_7_3 = Nan::Get(field_arg_1_7->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("ChainID").ToLocalChecked()).ToLocalChecked();
        Nan::Utf8String string_opt_arg_1_7_3(field_opt_arg_1_7_3->ToString(Nan::GetCurrentContext()).ToLocalChecked());
        auto opt_arg_1_7_3 = std::string(*string_opt_arg_1_7_3);

        auto field_opt_arg_1_7_4 = Nan::Get(field_arg_1_7->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("XPUBVersion").ToLocalChecked()).ToLocalChecked();
        vector<uint8_t> opt_arg_1_7_4;
        Local<Array> opt_arg_1_7_4_container = Local<Array>::Cast(field_opt_arg_1_7_4);
        for(uint32_t opt_arg_1_7_4_id = 0; opt_arg_1_7_4_id < opt_arg_1_7_4_container->Length(); opt_arg_1_7_4_id++)
        {
            if(opt_arg_1_7_4_container->Get(opt_arg_1_7_4_id)->IsUint32())
            {
                auto opt_arg_1_7_4_elem = Nan::To<uint32_t>(opt_arg_1_7_4_container->Get(opt_arg_1_7_4_id)).FromJust();
                opt_arg_1_7_4.emplace_back(opt_arg_1_7_4_elem);
            }
        }


        auto field_opt_arg_1_7_5 = Nan::Get(field_arg_1_7->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("AdditionalEIPs").ToLocalChecked()).ToLocalChecked();
        vector<std::string> opt_arg_1_7_5;
        Local<Array> opt_arg_1_7_5_container = Local<Array>::Cast(field_opt_arg_1_7_5);
        for(uint32_t opt_arg_1_7_5_id = 0; opt_arg_1_7_5_id < opt_arg_1_7_5_container->Length(); opt_arg_1_7_5_id++)
        {
            if(opt_arg_1_7_5_container->Get(opt_arg_1_7_5_id)->IsString())
            {
                Nan::Utf8String string_opt_arg_1_7_5_elem(opt_arg_1_7_5_container->Get(opt_arg_1_7_5_id)->ToString(Nan::GetCurrentContext()).ToLocalChecked());
                auto opt_arg_1_7_5_elem = std::string(*string_opt_arg_1_7_5_elem);
                opt_arg_1_7_5.emplace_back(opt_arg_1_7_5_elem);
            }
        }


        auto field_opt_arg_1_7_6 = Nan::Get(field_arg_1_7->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("TimestampDelay").ToLocalChecked()).ToLocalChecked();
        auto opt_arg_1_7_6 = Nan::To<int64_t>(field_opt_arg_1_7_6).FromJust();
        EthereumLikeNetworkParameters opt_arg_1_7(opt_arg_1_7_1, opt_arg_1_7_2, opt_arg_1_7_3, opt_arg_1_7_4, opt_arg_1_7_5, opt_arg_1_7_6);

        arg_1_7.emplace(opt_arg_1_7);
    }


    auto field_arg_1_8 = Nan::Get(info[1]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("rippleLikeNetworkParameters").ToLocalChecked()).ToLocalChecked();
    auto arg_1_8 = std::experimental::optional<RippleLikeNetworkParameters>();
    if(!field_arg_1_8->IsNull() && !field_arg_1_8->IsUndefined())
    {

        auto field_opt_arg_1_8_1 = Nan::Get(field_arg_1_8->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("Identifier").ToLocalChecked()).ToLocalChecked();
        Nan::Utf8String string_opt_arg_1_8_1(field_opt_arg_1_8_1->ToString(Nan::GetCurrentContext()).ToLocalChecked());
        auto opt_arg_1_8_1 = std::string(*string_opt_arg_1_8_1);

        auto field_opt_arg_1_8_2 = Nan::Get(field_arg_1_8->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("MessagePrefix").ToLocalChecked()).ToLocalChecked();
        Nan::Utf8String string_opt_arg_1_8_2(field_opt_arg_1_8_2->ToString(Nan::GetCurrentContext()).ToLocalChecked());
        auto opt_arg_1_8_2 = std::string(*string_opt_arg_1_8_2);

        auto field_opt_arg_1_8_3 = Nan::Get(field_arg_1_8->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("XPUBVersion").ToLocalChecked()).ToLocalChecked();
        vector<uint8_t> opt_arg_1_8_3;
        Local<Array> opt_arg_1_8_3_container = Local<Array>::Cast(field_opt_arg_1_8_3);
        for(uint32_t opt_arg_1_8_3_id = 0; opt_arg_1_8_3_id < opt_arg_1_8_3_container->Length(); opt_arg_1_8_3_id++)
        {
            if(opt_arg_1_8_3_container->Get(opt_arg_1_8_3_id)->IsUint32())
            {
                auto opt_arg_1_8_3_elem = Nan::To<uint32_t>(opt_arg_1_8_3_container->Get(opt_arg_1_8_3_id)).FromJust();
                opt_arg_1_8_3.emplace_back(opt_arg_1_8_3_elem);
            }
        }


        auto field_opt_arg_1_8_4 = Nan::Get(field_arg_1_8->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("AdditionalRIPs").ToLocalChecked()).ToLocalChecked();
        vector<std::string> opt_arg_1_8_4;
        Local<Array> opt_arg_1_8_4_container = Local<Array>::Cast(field_opt_arg_1_8_4);
        for(uint32_t opt_arg_1_8_4_id = 0; opt_arg_1_8_4_id < opt_arg_1_8_4_container->Length(); opt_arg_1_8_4_id++)
        {
            if(opt_arg_1_8_4_container->Get(opt_arg_1_8_4_id)->IsString())
            {
                Nan::Utf8String string_opt_arg_1_8_4_elem(opt_arg_1_8_4_container->Get(opt_arg_1_8_4_id)->ToString(Nan::GetCurrentContext()).ToLocalChecked());
                auto opt_arg_1_8_4_elem = std::string(*string_opt_arg_1_8_4_elem);
                opt_arg_1_8_4.emplace_back(opt_arg_1_8_4_elem);
            }
        }


        auto field_opt_arg_1_8_5 = Nan::Get(field_arg_1_8->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("TimestampDelay").ToLocalChecked()).ToLocalChecked();
        auto opt_arg_1_8_5 = Nan::To<int64_t>(field_opt_arg_1_8_5).FromJust();
        RippleLikeNetworkParameters opt_arg_1_8(opt_arg_1_8_1, opt_arg_1_8_2, opt_arg_1_8_3, opt_arg_1_8_4, opt_arg_1_8_5);

        arg_1_8.emplace(opt_arg_1_8);
    }


    auto field_arg_1_9 = Nan::Get(info[1]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("tezosLikeNetworkParameters").ToLocalChecked()).ToLocalChecked();
    auto arg_1_9 = std::experimental::optional<TezosLikeNetworkParameters>();
    if(!field_arg_1_9->IsNull() && !field_arg_1_9->IsUndefined())
    {

        auto field_opt_arg_1_9_1 = Nan::Get(field_arg_1_9->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("Identifier").ToLocalChecked()).ToLocalChecked();
        Nan::Utf8String string_opt_arg_1_9_1(field_opt_arg_1_9_1->ToString(Nan::GetCurrentContext()).ToLocalChecked());
        auto opt_arg_1_9_1 = std::string(*string_opt_arg_1_9_1);

        auto field_opt_arg_1_9_2 = Nan::Get(field_arg_1_9->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("MessagePrefix").ToLocalChecked()).ToLocalChecked();
        Nan::Utf8String string_opt_arg_1_9_2(field_opt_arg_1_9_2->ToString(Nan::GetCurrentContext()).ToLocalChecked());
        auto opt_arg_1_9_2 = std::string(*string_opt_arg_1_9_2);

        auto field_opt_arg_1_9_3 = Nan::Get(field_arg_1_9->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("XPUBVersion").ToLocalChecked()).ToLocalChecked();
        vector<uint8_t> opt_arg_1_9_3;
        Local<Array> opt_arg_1_9_3_container = Local<Array>::Cast(field_opt_arg_1_9_3);
        for(uint32_t opt_arg_1_9_3_id = 0; opt_arg_1_9_3_id < opt_arg_1_9_3_container->Length(); opt_arg_1_9_3_id++)
        {
            if(opt_arg_1_9_3_container->Get(opt_arg_1_9_3_id)->IsUint32())
            {
                auto opt_arg_1_9_3_elem = Nan::To<uint32_t>(opt_arg_1_9_3_container->Get(opt_arg_1_9_3_id)).FromJust();
                opt_arg_1_9_3.emplace_back(opt_arg_1_9_3_elem);
            }
        }


        auto field_opt_arg_1_9_4 = Nan::Get(field_arg_1_9->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("ImplicitPrefix").ToLocalChecked()).ToLocalChecked();
        vector<uint8_t> opt_arg_1_9_4;
        Local<Array> opt_arg_1_9_4_container = Local<Array>::Cast(field_opt_arg_1_9_4);
        for(uint32_t opt_arg_1_9_4_id = 0; opt_arg_1_9_4_id < opt_arg_1_9_4_container->Length(); opt_arg_1_9_4_id++)
        {
            if(opt_arg_1_9_4_container->Get(opt_arg_1_9_4_id)->IsUint32())
            {
                auto opt_arg_1_9_4_elem = Nan::To<uint32_t>(opt_arg_1_9_4_container->Get(opt_arg_1_9_4_id)).FromJust();
                opt_arg_1_9_4.emplace_back(opt_arg_1_9_4_elem);
            }
        }


        auto field_opt_arg_1_9_5 = Nan::Get(field_arg_1_9->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("OriginatedPrefix").ToLocalChecked()).ToLocalChecked();
        vector<uint8_t> opt_arg_1_9_5;
        Local<Array> opt_arg_1_9_5_container = Local<Array>::Cast(field_opt_arg_1_9_5);
        for(uint32_t opt_arg_1_9_5_id = 0; opt_arg_1_9_5_id < opt_arg_1_9_5_container->Length(); opt_arg_1_9_5_id++)
        {
            if(opt_arg_1_9_5_container->Get(opt_arg_1_9_5_id)->IsUint32())
            {
                auto opt_arg_1_9_5_elem = Nan::To<uint32_t>(opt_arg_1_9_5_container->Get(opt_arg_1_9_5_id)).FromJust();
                opt_arg_1_9_5.emplace_back(opt_arg_1_9_5_elem);
            }
        }


        auto field_opt_arg_1_9_6 = Nan::Get(field_arg_1_9->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("AdditionalTIPs").ToLocalChecked()).ToLocalChecked();
        vector<std::string> opt_arg_1_9_6;
        Local<Array> opt_arg_1_9_6_container = Local<Array>::Cast(field_opt_arg_1_9_6);
        for(uint32_t opt_arg_1_9_6_id = 0; opt_arg_1_9_6_id < opt_arg_1_9_6_container->Length(); opt_arg_1_9_6_id++)
        {
            if(opt_arg_1_9_6_container->Get(opt_arg_1_9_6_id)->IsString())
            {
                Nan::Utf8String string_opt_arg_1_9_6_elem(opt_arg_1_9_6_container->Get(opt_arg_1_9_6_id)->ToString(Nan::GetCurrentContext()).ToLocalChecked());
                auto opt_arg_1_9_6_elem = std::string(*string_opt_arg_1_9_6_elem);
                opt_arg_1_9_6.emplace_back(opt_arg_1_9_6_elem);
            }
        }


        auto field_opt_arg_1_9_7 = Nan::Get(field_arg_1_9->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("TimestampDelay").ToLocalChecked()).ToLocalChecked();
        auto opt_arg_1_9_7 = Nan::To<int64_t>(field_opt_arg_1_9_7).FromJust();
        TezosLikeNetworkParameters opt_arg_1_9(opt_arg_1_9_1, opt_arg_1_9_2, opt_arg_1_9_3, opt_arg_1_9_4, opt_arg_1_9_5, opt_arg_1_9_6, opt_arg_1_9_7);

        arg_1_9.emplace(opt_arg_1_9);
    }

    Currency arg_1(arg_1_1, arg_1_2, arg_1_3, arg_1_4, arg_1_5, arg_1_6, arg_1_7, arg_1_8, arg_1_9);


    //Call factory
    auto cpp_instance = ledger::core::api::Address::parse(arg_0,arg_1);
    djinni::js::ObjectWrapper<ledger::core::api::Address>::Wrap(cpp_instance, info.This());
    info.GetReturnValue().Set(info.This());
}


Nan::Persistent<ObjectTemplate> NJSAddress::Address_prototype;

Local<Object> NJSAddress::wrap(const std::shared_ptr<ledger::core::api::Address> &object) {
    Nan::EscapableHandleScope scope;
    Local<ObjectTemplate> local_prototype = Nan::New(Address_prototype);

    Local<Object> obj;
    if(!local_prototype.IsEmpty())
    {
        obj = local_prototype->NewInstance(Nan::GetCurrentContext()).ToLocalChecked();
        djinni::js::ObjectWrapper<ledger::core::api::Address>::Wrap(object, obj);
    }
    else
    {
        Nan::ThrowError("NJSAddress::wrap: object template not valid");
    }
    return scope.Escape(obj);
}

NAN_METHOD(NJSAddress::isNull) {
    auto cpp_implementation = djinni::js::ObjectWrapper<ledger::core::api::Address>::Unwrap(info.This());
    auto isNull = !cpp_implementation ? true : false;
    return info.GetReturnValue().Set(Nan::New<Boolean>(isNull));
}

void NJSAddress::Initialize(Local<Object> target) {
    Nan::HandleScope scope;

    Local<FunctionTemplate> func_template = Nan::New<FunctionTemplate>(NJSAddress::New);
    Local<ObjectTemplate> objectTemplate = func_template->InstanceTemplate();
    objectTemplate->SetInternalFieldCount(1);

    func_template->SetClassName(Nan::New<String>("NJSAddress").ToLocalChecked());

    //SetPrototypeMethod all methods
    Nan::SetPrototypeMethod(func_template,"getDerivationPath", getDerivationPath);
    Nan::SetPrototypeMethod(func_template,"toString", toString);
    Nan::SetPrototypeMethod(func_template,"asBitcoinLikeAddress", asBitcoinLikeAddress);
    Nan::SetPrototypeMethod(func_template,"isInstanceOfBitcoinLikeAddress", isInstanceOfBitcoinLikeAddress);
    Nan::SetPrototypeMethod(func_template,"getCurrency", getCurrency);
    Nan::SetPrototypeMethod(func_template,"parse", parse);
    Nan::SetPrototypeMethod(func_template,"isValid", isValid);
    Nan::SetPrototypeMethod(func_template,"isNull", isNull);
    //Set object prototype
    Address_prototype.Reset(objectTemplate);

    //Add template to target
    target->Set(Nan::New<String>("NJSAddress").ToLocalChecked(), func_template->GetFunction(Nan::GetCurrentContext()).ToLocalChecked());
}
