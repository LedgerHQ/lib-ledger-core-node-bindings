// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from addresses.djinni

#include "NJSCosmosLikeAddressCpp.hpp"
#include "NJSObjectWrapper.hpp"
#include "NJSHexUtils.hpp"

using namespace v8;
using namespace node;
using namespace std;

NAN_METHOD(NJSCosmosLikeAddress::getVersion) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSCosmosLikeAddress::getVersion needs 0 arguments");
    }

    //Check if parameters have correct types

    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::CosmosLikeAddress>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSCosmosLikeAddress::getVersion : implementation of CosmosLikeAddress is not valid");
    }

    auto result = cpp_impl->getVersion();

    //Wrap result in node object
    auto arg_0 = Nan::New<String>("0x" + djinni::js::hex::toString(result)).ToLocalChecked();


    //Return result
    info.GetReturnValue().Set(arg_0);
}
NAN_METHOD(NJSCosmosLikeAddress::getHash160) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSCosmosLikeAddress::getHash160 needs 0 arguments");
    }

    //Check if parameters have correct types

    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::CosmosLikeAddress>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSCosmosLikeAddress::getHash160 : implementation of CosmosLikeAddress is not valid");
    }

    auto result = cpp_impl->getHash160();

    //Wrap result in node object
    auto arg_0 = Nan::New<String>("0x" + djinni::js::hex::toString(result)).ToLocalChecked();


    //Return result
    info.GetReturnValue().Set(arg_0);
}
NAN_METHOD(NJSCosmosLikeAddress::getNetworkParameters) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSCosmosLikeAddress::getNetworkParameters needs 0 arguments");
    }

    //Check if parameters have correct types

    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::CosmosLikeAddress>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSCosmosLikeAddress::getNetworkParameters : implementation of CosmosLikeAddress is not valid");
    }

    auto result = cpp_impl->getNetworkParameters();

    //Wrap result in node object
    auto arg_0 = Nan::New<Object>();
    auto arg_0_1 = Nan::New<String>(result.Identifier).ToLocalChecked();
    Nan::DefineOwnProperty(arg_0, Nan::New<String>("Identifier").ToLocalChecked(), arg_0_1);
    auto arg_0_2 = Nan::New<String>(result.MessagePrefix).ToLocalChecked();
    Nan::DefineOwnProperty(arg_0, Nan::New<String>("MessagePrefix").ToLocalChecked(), arg_0_2);
    auto arg_0_3 = Nan::New<String>("0x" + djinni::js::hex::toString(result.XPUBVersion)).ToLocalChecked();

    Nan::DefineOwnProperty(arg_0, Nan::New<String>("XPUBVersion").ToLocalChecked(), arg_0_3);
    auto arg_0_4 = Nan::New<String>("0x" + djinni::js::hex::toString(result.PubKeyPrefix)).ToLocalChecked();

    Nan::DefineOwnProperty(arg_0, Nan::New<String>("PubKeyPrefix").ToLocalChecked(), arg_0_4);
    auto arg_0_5 = Nan::New<String>("0x" + djinni::js::hex::toString(result.Ed25519PubKeyPrefix)).ToLocalChecked();

    Nan::DefineOwnProperty(arg_0, Nan::New<String>("Ed25519PubKeyPrefix").ToLocalChecked(), arg_0_5);
    auto arg_0_6 = Nan::New<String>("0x" + djinni::js::hex::toString(result.AddressPrefix)).ToLocalChecked();

    Nan::DefineOwnProperty(arg_0, Nan::New<String>("AddressPrefix").ToLocalChecked(), arg_0_6);
    auto arg_0_7 = Nan::New<String>(result.ChainId).ToLocalChecked();
    Nan::DefineOwnProperty(arg_0, Nan::New<String>("ChainId").ToLocalChecked(), arg_0_7);
    Local<Array> arg_0_8 = Nan::New<Array>();
    for(size_t arg_0_8_id = 0; arg_0_8_id < result.AdditionalCIPs.size(); arg_0_8_id++)
    {
        auto arg_0_8_elem = Nan::New<String>(result.AdditionalCIPs[arg_0_8_id]).ToLocalChecked();
        Nan::Set(arg_0_8, (int)arg_0_8_id,arg_0_8_elem);
    }

    Nan::DefineOwnProperty(arg_0, Nan::New<String>("AdditionalCIPs").ToLocalChecked(), arg_0_8);


    //Return result
    info.GetReturnValue().Set(arg_0);
}
NAN_METHOD(NJSCosmosLikeAddress::toBech32) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSCosmosLikeAddress::toBech32 needs 0 arguments");
    }

    //Check if parameters have correct types

    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::CosmosLikeAddress>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSCosmosLikeAddress::toBech32 : implementation of CosmosLikeAddress is not valid");
    }

    auto result = cpp_impl->toBech32();

    //Wrap result in node object
    auto arg_0 = Nan::New<String>(result).ToLocalChecked();

    //Return result
    info.GetReturnValue().Set(arg_0);
}

NAN_METHOD(NJSCosmosLikeAddress::New) {
    //Only new allowed
    if(!info.IsConstructCall())
    {
        return Nan::ThrowError("NJSCosmosLikeAddress function can only be called as constructor (use New)");
    }
    info.GetReturnValue().Set(info.This());
}


Nan::Persistent<ObjectTemplate> NJSCosmosLikeAddress::CosmosLikeAddress_prototype;

Local<Object> NJSCosmosLikeAddress::wrap(const std::shared_ptr<ledger::core::api::CosmosLikeAddress> &object) {
    Nan::EscapableHandleScope scope;
    Local<ObjectTemplate> local_prototype = Nan::New(CosmosLikeAddress_prototype);

    Local<Object> obj;
    if(!local_prototype.IsEmpty())
    {
        obj = local_prototype->NewInstance(Nan::GetCurrentContext()).ToLocalChecked();
        djinni::js::ObjectWrapper<ledger::core::api::CosmosLikeAddress>::Wrap(object, obj);
    }
    else
    {
        Nan::ThrowError("NJSCosmosLikeAddress::wrap: object template not valid");
    }
    return scope.Escape(obj);
}

NAN_METHOD(NJSCosmosLikeAddress::isNull) {
    auto cpp_implementation = djinni::js::ObjectWrapper<ledger::core::api::CosmosLikeAddress>::Unwrap(info.This());
    auto isNull = !cpp_implementation ? true : false;
    return info.GetReturnValue().Set(Nan::New<Boolean>(isNull));
}

void NJSCosmosLikeAddress::Initialize(Local<Object> target) {
    Nan::HandleScope scope;

    Local<FunctionTemplate> func_template = Nan::New<FunctionTemplate>(NJSCosmosLikeAddress::New);
    Local<ObjectTemplate> objectTemplate = func_template->InstanceTemplate();
    objectTemplate->SetInternalFieldCount(1);

    func_template->SetClassName(Nan::New<String>("NJSCosmosLikeAddress").ToLocalChecked());

    //SetPrototypeMethod all methods
    Nan::SetPrototypeMethod(func_template,"getVersion", getVersion);
    Nan::SetPrototypeMethod(func_template,"getHash160", getHash160);
    Nan::SetPrototypeMethod(func_template,"getNetworkParameters", getNetworkParameters);
    Nan::SetPrototypeMethod(func_template,"toBech32", toBech32);
    Nan::SetPrototypeMethod(func_template,"isNull", isNull);
    //Set object prototype
    CosmosLikeAddress_prototype.Reset(objectTemplate);

    //Add template to target
    Nan::Set(target, Nan::New<String>("NJSCosmosLikeAddress").ToLocalChecked(), Nan::GetFunction(func_template).ToLocalChecked());
}
