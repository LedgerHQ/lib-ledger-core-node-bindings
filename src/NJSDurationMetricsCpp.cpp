// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from core.djinni

#include "NJSDurationMetricsCpp.hpp"
#include "NJSObjectWrapper.hpp"
#include "NJSHexUtils.hpp"

using namespace v8;
using namespace node;
using namespace std;

NAN_METHOD(NJSDurationMetrics::getAllDurationMetrics) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSDurationMetrics::getAllDurationMetrics needs 0 arguments");
    }

    //Check if parameters have correct types

    auto result = ledger::core::api::DurationMetrics::getAllDurationMetrics();

    //Wrap result in node object
    Local<Map> arg_0 = Map::New((Nan::GetCurrentContext())->GetIsolate());
    for(auto const& arg_0_elem : result)
    {
        auto arg_0_first = Nan::New<String>(arg_0_elem.first).ToLocalChecked();
        auto arg_0_second = Nan::New<Object>();
        auto arg_0_second_1 = Nan::New<Number>(arg_0_elem.second.total_ms);
        Nan::DefineOwnProperty(arg_0_second, Nan::New<String>("total_ms").ToLocalChecked(), arg_0_second_1);
        auto arg_0_second_2 = Nan::New<Int32>(arg_0_elem.second.count);
        Nan::DefineOwnProperty(arg_0_second, Nan::New<String>("count").ToLocalChecked(), arg_0_second_2);

        arg_0->Set(Nan::GetCurrentContext(), arg_0_first, arg_0_second);
    }


    //Return result
    info.GetReturnValue().Set(arg_0);
}

NAN_METHOD(NJSDurationMetrics::New) {
    //Only new allowed
    if(!info.IsConstructCall())
    {
        return Nan::ThrowError("NJSDurationMetrics function can only be called as constructor (use New)");
    }
    info.GetReturnValue().Set(info.This());
}


Nan::Persistent<ObjectTemplate> NJSDurationMetrics::DurationMetrics_prototype;

Local<Object> NJSDurationMetrics::wrap(const std::shared_ptr<ledger::core::api::DurationMetrics> &object) {
    Nan::EscapableHandleScope scope;
    Local<ObjectTemplate> local_prototype = Nan::New(DurationMetrics_prototype);

    Local<Object> obj;
    if(!local_prototype.IsEmpty())
    {
        obj = local_prototype->NewInstance(Nan::GetCurrentContext()).ToLocalChecked();
        djinni::js::ObjectWrapper<ledger::core::api::DurationMetrics>::Wrap(object, obj);
    }
    else
    {
        Nan::ThrowError("NJSDurationMetrics::wrap: object template not valid");
    }
    return scope.Escape(obj);
}

NAN_METHOD(NJSDurationMetrics::isNull) {
    auto cpp_implementation = djinni::js::ObjectWrapper<ledger::core::api::DurationMetrics>::Unwrap(info.This());
    auto isNull = !cpp_implementation ? true : false;
    return info.GetReturnValue().Set(Nan::New<Boolean>(isNull));
}

void NJSDurationMetrics::Initialize(Local<Object> target) {
    Nan::HandleScope scope;

    Local<FunctionTemplate> func_template = Nan::New<FunctionTemplate>(NJSDurationMetrics::New);
    Local<ObjectTemplate> objectTemplate = func_template->InstanceTemplate();
    objectTemplate->SetInternalFieldCount(1);

    func_template->SetClassName(Nan::New<String>("NJSDurationMetrics").ToLocalChecked());

    //SetPrototypeMethod all methods
    Nan::SetPrototypeMethod(func_template,"getAllDurationMetrics", getAllDurationMetrics);
    Nan::SetPrototypeMethod(func_template,"isNull", isNull);
    //Set object prototype
    DurationMetrics_prototype.Reset(objectTemplate);

    //Add template to target
    Nan::Set(target, Nan::New<String>("NJSDurationMetrics").ToLocalChecked(), Nan::GetFunction(func_template).ToLocalChecked());
}
