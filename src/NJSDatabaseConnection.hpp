// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from database.djinni

#ifndef DJINNI_GENERATED_NJSDATABASECONNECTION_HPP
#define DJINNI_GENERATED_NJSDATABASECONNECTION_HPP


#include "../include/DatabaseBlob.hpp"
#include "../include/DatabaseStatement.hpp"
#include "NJSDatabaseBlob.hpp"
#include "NJSDatabaseStatement.hpp"
#include <memory>
#include <string>

#include <nan.h>
#include <node.h>
#include "../include/DatabaseConnection.hpp"

using namespace v8;
using namespace node;
using namespace std;
using namespace ledger::core::api;

class NJSDatabaseConnection: public ledger::core::api::DatabaseConnection {
public:

    static void Initialize(Local<Object> target);

    static Local<Object> wrap(const std::shared_ptr<ledger::core::api::DatabaseConnection> &object);
    static Nan::Persistent<ObjectTemplate> DatabaseConnection_prototype;
    ~NJSDatabaseConnection()
    {
        njs_impl.Reset();
    };
    NJSDatabaseConnection(Local<Object> njs_implementation){njs_impl.Reset(njs_implementation);};

    /**
     * Prepare a statement object using the given SQL query. The statement object will then be responsible of executing
     * the query and handle results. Statement objects may be reused over time if their `repeatable` flag is set to true.
     * @param query A SQL query to execute (e.g. "SELECT * FROM users WHERE name = 'Joe'")
     * @param repeatable A flag to indicate whether or not the statement is repeatable
     */
    std::shared_ptr<DatabaseStatement> prepareStatement(const std::string & query, bool repeatable);

    /** Begin a SQL transaction on this connection. */
    void begin();

    /** End the current transaction and rollback all changes that occurred between the call of `begin` and `rollback`. */
    void rollback();

    /** End the current transaction and persist all changes that occurred between the call of `begin` and `commit`. */
    void commit();

    /** Close the current connection. After this call the connection should never be called again. */
    void close();

    /**
     * Create a new empty blob.
     * @return An empty blob
     */
    std::shared_ptr<DatabaseBlob> newBlob();

    /** Check whether the connection is still alive. */
    bool isAlive();

private:
    /**
     * Prepare a statement object using the given SQL query. The statement object will then be responsible of executing
     * the query and handle results. Statement objects may be reused over time if their `repeatable` flag is set to true.
     * @param query A SQL query to execute (e.g. "SELECT * FROM users WHERE name = 'Joe'")
     * @param repeatable A flag to indicate whether or not the statement is repeatable
     */
    static NAN_METHOD(prepareStatement);

    /** Begin a SQL transaction on this connection. */
    static NAN_METHOD(begin);

    /** End the current transaction and rollback all changes that occurred between the call of `begin` and `rollback`. */
    static NAN_METHOD(rollback);

    /** End the current transaction and persist all changes that occurred between the call of `begin` and `commit`. */
    static NAN_METHOD(commit);

    /** Close the current connection. After this call the connection should never be called again. */
    static NAN_METHOD(close);

    /**
     * Create a new empty blob.
     * @return An empty blob
     */
    static NAN_METHOD(newBlob);

    /** Check whether the connection is still alive. */
    static NAN_METHOD(isAlive);

    static NAN_METHOD(New);

    Nan::Persistent<Object> njs_impl;
};
#endif //DJINNI_GENERATED_NJSDATABASECONNECTION_HPP
